<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Blog Name</title>
  <subtitle>Blog subtitle</subtitle>
  <id>http://blog.url.com/</id>
  <link href="http://blog.url.com/"/>
  <link href="http://blog.url.com/feed.xml" rel="self"/>
  <updated>2016-01-25T09:00:00+09:00</updated>
  <author>
    <name>Blog Author</name>
  </author>
  <entry>
    <title>moCloudでHubotを動かそう</title>
    <link rel="alternate" href="http://blog.url.com/2016/01/25/talk-to-hubot-on-mocloud.html"/>
    <id>http://blog.url.com/2016/01/25/talk-to-hubot-on-mocloud.html</id>
    <published>2016-01-25T09:00:00+09:00</published>
    <updated>2016-01-25T12:09:47+09:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;先日、「Mobingi moCloud ハンズオン」に行ってきました。&lt;br&gt;
&lt;a href="https://mobingi.doorkeeper.jp/events/37092"&gt;https://mobingi.doorkeeper.jp/events/37092&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;内容としては「moCloudの説明から実際にアプリケーションを作成する」を前半で行い、後半では「作成したアプリケーションを利用してサービスをデプロイする」を行いました。moCloudというのをまったく知らずに参加したこのハンズオンでしたが、とてもわかりやすかったです。&lt;/p&gt;

&lt;p&gt;そこでMobingiの吉田真吾さんが「moCloudを使ってHubotを動かす」という内容のハンズオンをしてくださったのでその内容(手順)をまとめてみました。&lt;/p&gt;

&lt;h1 id="概要"&gt;概要&lt;/h1&gt;

&lt;p&gt;moCloud上のアプリケーションにHubotを動かすスクリプトをデプロイし、Slackと連携させてHubotと会話をする。&lt;br&gt;
※Hubotを動かすスクリプトはあらかじめ用意されています。&lt;/p&gt;

&lt;h1 id="0.事前準備"&gt;0.事前準備&lt;/h1&gt;

&lt;p&gt;・&lt;a href="http://qiita.com/kooohei/items/361da3c9dbb6e0c7946b"&gt;GitHubアカウントの作成&lt;/a&gt;&lt;br&gt;
・Slackのインストールとアカウント作成&lt;/p&gt;

&lt;h1 id="1.-リポジトリのfork(github)"&gt;1. リポジトリのfork(GitHub)&lt;/h1&gt;

&lt;h4 id="1-1.ログイン"&gt;1-1.ログイン&lt;/h4&gt;

&lt;p&gt;GitHubにログインします。&lt;br&gt;
&lt;a href="https://github.com"&gt;https://github.com&lt;/a&gt;&lt;/p&gt;

&lt;h4 id="1-2.リポジトリのfork"&gt;1-2.リポジトリのfork&lt;/h4&gt;

&lt;p&gt;以下のリポジトリへアクセスし、forkします。&lt;br&gt;
&lt;a href="https://github.com/yoshidashingo/hubot-mocloud"&gt;https://github.com/yoshidashingo/hubot-mocloud&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img alt="20160124_github01.png" src="https://qiita-image-store.s3.amazonaws.com/0/82090/88696f9e-d46a-c9a0-2091-0f7965637488.png" /&gt;&lt;/p&gt;

&lt;p&gt;複数の組織に所属している場合は以下のように聞かれるので、forkするリポジトリを指定します。&lt;br&gt;
&lt;img alt="20160124_github02.png" src="https://qiita-image-store.s3.amazonaws.com/0/82090/dac20449-57ca-cbd3-0cd7-543a50096ef0.png" /&gt;&lt;/p&gt;

&lt;p&gt;forkすると自分のリポジトリのリストに表示されます。&lt;br&gt;
&lt;img alt="20160124_github03.png" src="https://qiita-image-store.s3.amazonaws.com/0/82090/6fc1b47e-3d2a-2b86-527d-3d62c0fddc7e.png" /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img alt="20160124_github04.png" src="https://qiita-image-store.s3.amazonaws.com/0/82090/65f412e5-cb6d-33e0-31e9-405ee923d8ef.png" /&gt;&lt;/p&gt;

&lt;h1 id="2.hubotのインストール(slack)"&gt;2.Hubotのインストール(Slack)&lt;/h1&gt;

&lt;h4 id="2-1.ログイン"&gt;2-1.ログイン&lt;/h4&gt;

&lt;p&gt;ブラウザからSlackにログインし、Hubotページにアクセスします。&lt;br&gt;
&lt;a href="https://slack.com/apps/A0F7XDU93-hubot"&gt;https://slack.com/apps/A0F7XDU93-hubot&lt;/a&gt;&lt;/p&gt;

&lt;h4 id="2-2.hubotのインストール"&gt;2-2.Hubotのインストール&lt;/h4&gt;

&lt;p&gt;「Install」をクリックします。&lt;br&gt;
&lt;img alt="20160123_slack-hubot01.png" src="https://qiita-image-store.s3.amazonaws.com/0/82090/c99fc360-55f8-d21d-b1f3-0886ec171cb4.png" /&gt;&lt;/p&gt;

&lt;h4 id="2-3.usernameの設定"&gt;2-3.Usernameの設定&lt;/h4&gt;

&lt;p&gt;「Username」を入力して「Add Hubot Integration」をクリックします。&lt;br&gt;
ここで入力した「Username」がHubotの名前となりSlack上で表示されます。&lt;br&gt;
&lt;img alt="20160123_slack-hubot02.png" src="https://qiita-image-store.s3.amazonaws.com/0/82090/1dace3c2-1129-9706-f2d6-0ff224293f49.png" /&gt;&lt;/p&gt;

&lt;h4 id="2-4.環境変数の確認"&gt;2-4.環境変数の確認&lt;/h4&gt;

&lt;p&gt;環境変数が表示されていることを確認して完了です。&lt;br&gt;
&lt;img alt="20160123_slack-hubot03.png" src="https://qiita-image-store.s3.amazonaws.com/0/82090/a161860e-f033-844e-7270-0f3916df403a.png" /&gt;&lt;br&gt;
※この環境変数は後で利用します。&lt;/p&gt;

&lt;h1 id="3.アプリケーションの作成(mocloud)"&gt;3.アプリケーションの作成(moCloud)&lt;/h1&gt;

&lt;h4 id="3-1.ログイン"&gt;3-1.ログイン&lt;/h4&gt;

&lt;p&gt;moCloudにログインします。&lt;br&gt;
&lt;a href="https://mocloud.io/"&gt;https://mocloud.io/&lt;/a&gt;&lt;/p&gt;

&lt;h4 id="3-2.アプリケーションの作成"&gt;3-2.アプリケーションの作成&lt;/h4&gt;

&lt;p&gt;左サイドにある「+ アプリケーションの作成」をクリックします。&lt;br&gt;
&lt;img alt="20160122_mobingi01.png" src="https://qiita-image-store.s3.amazonaws.com/0/82090/989d2273-b9b0-5711-2722-4fe44668be07.png" /&gt;&lt;/p&gt;

&lt;h4 id="3-3.アプリケーション情報の設定"&gt;3-3.アプリケーション情報の設定&lt;/h4&gt;

&lt;p&gt;任意のアプリケーション名とドメインを入力し、利用するリージョンとインスタンスを選択します。&lt;br&gt;
&lt;img alt="20160122_mobingi02.png" src="https://qiita-image-store.s3.amazonaws.com/0/82090/72b79a30-d65b-a284-fcae-89f15eec38eb.png" /&gt;&lt;/p&gt;

&lt;h4 id="3-4.イメージ設定①"&gt;3-4.イメージ設定①&lt;/h4&gt;

&lt;p&gt;作成するアプリケーションのイメージを選択します。&lt;br&gt;
今回は「PHP Stack Ubuntu 14.04, php 5.6, Apache」を選択します。&lt;br&gt;
&lt;img alt="20160122_mobingi03.png" src="https://qiita-image-store.s3.amazonaws.com/0/82090/ae30c714-2084-7696-c45c-8482569aacc3.png" /&gt;&lt;/p&gt;

&lt;h4 id="3-5.イメージ設定②"&gt;3-5.イメージ設定②&lt;/h4&gt;

&lt;p&gt;「4.イメージの設定①」で選択したイメージをクリックすると「Extra PHP Configuration」の設定画面がポップアップされます。&lt;br&gt;
今回はデフォルト設定のままで「実行」をクリックします。&lt;br&gt;
&lt;img alt="20160122_mobingi04.png" src="https://qiita-image-store.s3.amazonaws.com/0/82090/7b7417d7-b002-d8c5-6450-0996ccaee629.png" /&gt;&lt;/p&gt;

&lt;p&gt;すると、選択したイメージがブルーの色になります。&lt;br&gt;
&lt;img alt="20160122_mobingi05.png" src="https://qiita-image-store.s3.amazonaws.com/0/82090/a85fb6b8-7012-2d79-42dc-f4f8f0a3484e.png" /&gt;&lt;/p&gt;

&lt;h4 id="3-6.アプリケーションの作成"&gt;3-6.アプリケーションの作成&lt;/h4&gt;

&lt;p&gt;以上の設定を行ったら「アプリケーションの作成」をクリックします。&lt;br&gt;
&lt;img alt="20160122_mobingi06.png" src="https://qiita-image-store.s3.amazonaws.com/0/82090/373a026e-93df-1fbc-4011-b7f64dc5cabe.png" /&gt;&lt;/p&gt;

&lt;p&gt;すると、「既存アプリケーション」に画面が切り替わり、アプリケーションの作成が始まります。&lt;br&gt;
&lt;img alt="20160122_mobingi07.png" src="https://qiita-image-store.s3.amazonaws.com/0/82090/21903528-14c1-516d-77e8-6dcb95af02df.png" /&gt;&lt;/p&gt;

&lt;p&gt;ステータスが「初期化中」→「実行中」になったら作成完了です。&lt;br&gt;
※ちなみに自分は実行中になるまで7分ほどかかりました。&lt;br&gt;
&lt;img alt="20160122_mobingi09.png" src="https://qiita-image-store.s3.amazonaws.com/0/82090/491fa8c6-5a5f-2336-2027-13a6ac67754f.png" /&gt;&lt;/p&gt;

&lt;h1 id="4.コードのデプロイ"&gt;4.コードのデプロイ&lt;/h1&gt;

&lt;h4 id="4-1.アプリケーションの選択"&gt;4-1.アプリケーションの選択&lt;/h4&gt;

&lt;p&gt;作成したアプリケーション名をクリックします。&lt;br&gt;
&lt;img alt="20160122_mobingi10.png" src="https://qiita-image-store.s3.amazonaws.com/0/82090/07d72860-26f3-4ee4-15d2-4b812e59b285.png" /&gt;&lt;/p&gt;

&lt;h4 id="4-2.リポジトリの選択"&gt;4-2.リポジトリの選択&lt;/h4&gt;

&lt;p&gt;「コード」タブをクリックするとGitリポジトリ設定が表示されるので、そこで「GitHub」の「パブリックリポジトリ」を選択します。&lt;br&gt;
&lt;img alt="20160122_mobingi11.png" src="https://qiita-image-store.s3.amazonaws.com/0/82090/e76dfb22-99ce-eeec-00ee-c666dfe117da.png" /&gt;&lt;/p&gt;

&lt;h4 id="4-3.リポジトリとの接続"&gt;4-3.リポジトリとの接続&lt;/h4&gt;

&lt;p&gt;フォークした「自分のリポジトリ/hubot-mocloud」の「master」リポジトリを選択し、「接続」をクリックします。&lt;/p&gt;

&lt;p&gt;「成功」と出れば接続が完了です。&lt;br&gt;
&lt;img alt="20160122_mobingi12.png" src="https://qiita-image-store.s3.amazonaws.com/0/82090/864c944e-125f-13a7-b70c-fdfe7aa0ce64.png" /&gt;&lt;/p&gt;

&lt;h4 id="4-4.環境変数の設定①"&gt;4-4.環境変数の設定①&lt;/h4&gt;

&lt;p&gt;「設定」タブをクリックします。&lt;br&gt;
&lt;img alt="20160122_mobingi13.png" src="https://qiita-image-store.s3.amazonaws.com/0/82090/3ad10dcb-4d6f-667b-22d0-2bf33d9a923b.png" /&gt;&lt;/p&gt;

&lt;h4 id="4-5.環境変数の設定②"&gt;4-5.環境変数の設定②&lt;/h4&gt;

&lt;p&gt;「Browse Apps &amp;gt; Hubot &amp;gt; Configurations on Proudit Inc &amp;gt; Edit configuration」に記載されている環境変数を入力して「+」で追加します。&lt;br&gt;
&lt;img alt="20160123_slack-hubot03.png" src="https://qiita-image-store.s3.amazonaws.com/0/82090/8debffbc-a0d8-62c0-d374-190b7e349af6.png" /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img alt="20160122_mobingi14.png" src="https://qiita-image-store.s3.amazonaws.com/0/82090/debfd4f9-b845-0c4a-926f-cf0bfa24ad7a.png" /&gt;&lt;/p&gt;

&lt;h4 id="4-6.環境変数の設定③"&gt;4-6.環境変数の設定③&lt;/h4&gt;

&lt;p&gt;変数が追加されたのを確認したら「変更を保存」をクリックして保存します。&lt;br&gt;
&lt;img alt="20160122_mobingi15.png" src="https://qiita-image-store.s3.amazonaws.com/0/82090/41cb683a-aefe-c78d-40f3-02be06d84b86.png" /&gt;&lt;/p&gt;

&lt;p&gt;緑でSuccessが表示されれば設定完了です。&lt;br&gt;
&lt;img alt="20160122_mobingi16.png" src="https://qiita-image-store.s3.amazonaws.com/0/82090/6fa27ffa-91c1-bbdc-08cc-5f957b530fd3.png" /&gt;&lt;/p&gt;

&lt;p&gt;しばらく待つとslackに表示されているhubotのランプが緑になります。&lt;br&gt;
&lt;img alt="20160122_mobingi17.png" src="https://qiita-image-store.s3.amazonaws.com/0/82090/d3d7a7a0-4799-4020-3f3d-d9b7d1532f28.png" /&gt;&lt;/p&gt;

&lt;h1 id="5.let&amp;#39;s-hubot!!"&gt;5.Let&amp;#39;s Hubot!!&lt;/h1&gt;

&lt;p&gt;以上で準備が整いました。それでは話しかけてみましょう。&lt;br&gt;
「hello」と話しかけると「hello!」を返事をしてくれます。&lt;br&gt;
&lt;img alt="20160122_mobingi18.png" src="https://qiita-image-store.s3.amazonaws.com/0/82090/6f7d0594-7f9d-5011-8851-55b9b281463f.png" /&gt;&lt;/p&gt;

&lt;p&gt;ここではあらかじめ準備してくださったリポジトリをforkしてデプロイしています。&lt;br&gt;
もし他にもいろいろ試したいということであれば、今回forkしたソースを編集してみてください。「hello」以外にも会話ができるようになります。&lt;/p&gt;

&lt;h1 id="最後に"&gt;最後に&lt;/h1&gt;

&lt;p&gt;今回はハンズオンの第一回だったみたいです。今回のハンズオンを通じてmoCloudというのを知り、とても興味深いサービスだと感じました。なので今後もハンズオンとかがあったら参加しようと思います。&lt;/p&gt;

&lt;p&gt;/&amp;gt; Mobingi 吉田真吾さん&lt;br&gt;
わかりやすいハンズオンありがとうございました。&lt;/p&gt;

&lt;p&gt;また、より詳しく知りたい方は吉田さんが書いたブログ「&lt;a href="http://yoshidashingo.hatenablog.com/entry/2015/12/15/105841"&gt;moCloudでHubotを動かしてSlack上で遊ぼう&lt;/a&gt;」の記事を参照してみてください。&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Redmine 3.2をAmazon Linux(release 2015.09)にインストールしてみた。</title>
    <link rel="alternate" href="http://blog.url.com/2016/01/18/installation-method-of-redmine.html"/>
    <id>http://blog.url.com/2016/01/18/installation-method-of-redmine.html</id>
    <published>2016-01-18T09:00:00+09:00</published>
    <updated>2016-01-18T16:57:02+09:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;今回はAmazon Linux(release 2015.09)にRedmine 3.2をインストールする手順をまとめてみました。&lt;/p&gt;

&lt;p&gt;方針としてはシンプルにしたいので、できるだけyumやインストール済みのパッケージを利用していきます。&lt;/p&gt;

&lt;h1 id="必要なパッケージ等の準備"&gt;必要なパッケージ等の準備&lt;/h1&gt;

&lt;h4 id="1.開発ツールのインストール"&gt;1.開発ツールのインストール&lt;/h4&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# yum groupinstall "Development Tools"
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id="2.rubyのセットアップ"&gt;2.rubyのセットアップ&lt;/h4&gt;

&lt;p&gt;Amazon Linuxではデフォルトでrubyがインストールされています。今回はインストール済みのを利用し、追加で必要なライブラリのみをインストールします。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# ruby -v
# gem -v
# yum install ruby-devel
# gem install io-console
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id="3.bundlerのインストール"&gt;3.bundlerのインストール&lt;/h4&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# gem install bundler --no-rdoc --no-ri
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id="データベースの準備"&gt;データベースの準備&lt;/h1&gt;

&lt;h4 id="1.mysqlのインストール"&gt;1.MySQLのインストール&lt;/h4&gt;

&lt;p&gt;今回のデータベースはRDSを利用するため、クライアントをインストールします。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# yum install mysql mysql-devel
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id="2.データベースとユーザーの作成"&gt;2.データベースとユーザーの作成&lt;/h4&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# mysql -h &amp;lt;ホスト名&amp;gt; -u &amp;lt;ユーザー&amp;gt; -p &amp;lt;パスワード&amp;gt;
mysql&amp;gt; create database db_redmine default character set utf8;
mysql&amp;gt; grant all on db_redmine.* to user_redmine@localhost identified by '********';
mysql&amp;gt; flush privileges;
mysql&amp;gt; exit;
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id="apacheのインストール"&gt;apacheのインストール&lt;/h1&gt;

&lt;h4 id="1.apacheのインストール"&gt;1.apacheのインストール&lt;/h4&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# yum install httpd httpd-devel
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id="2.confファイルの修正---その１"&gt;2.confファイルの修正 - その１&lt;/h4&gt;

&lt;p&gt;&amp;quot;/etc/httpd/conf/httpd.conf&amp;quot;の以下のコメントアウトを外します。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# vim /etc/httpd/conf/httpd.conf
修正前：# NameVirtualHost *:80 → 修正後：NameVirtualHost *:80

# diff /etc/httpd/conf/httpd.conf /etc/httpd/conf/httpd.conf_org
991c991
&amp;lt; NameVirtualHost *:80
---
&amp;gt; #NameVirtualHost *:80
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id="3.confファイルの修正---その２"&gt;3.confファイルの修正 - その２&lt;/h4&gt;

&lt;p&gt;&amp;quot;/etc/httpd/conf.d/redmine.conf&amp;quot;を作成する。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# vim /etc/httpd/conf.d/redmine.conf
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;confの内容は適宜修正してください。以下は例となります。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;VirtualHost *:80&amp;gt;
    ServerName www.example.com

    DocumentRoot /var/www/redmine/public

    ErrorLog  "|/usr/sbin/rotatelogs /var/log/httpd/redmine/error_log.%Y%m%d 86400 540"
    CustomLog "|/usr/sbin/rotatelogs /var/log/httpd/redmine/access_log.%Y%m%d 86400 540" combined

&amp;lt;/VirtualHost&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id="redmineの設定"&gt;Redmineの設定&lt;/h1&gt;

&lt;h4 id="1.必要なパッケージのインストール"&gt;1.必要なパッケージのインストール&lt;/h4&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# yum -y install openssl-devel readline-devel zlib-devel curl-devel libyaml-devel libffi-devel
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id="2.imagemagickと日本語フォントのインストール"&gt;2.ImageMagickと日本語フォントのインストール&lt;/h4&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# yum install ImageMagick ImageMagick-devel ipa-pgothic-fonts
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id="3.redmineのダウンロード"&gt;3.Redmineのダウンロード&lt;/h4&gt;

&lt;p&gt;下記のURLからRedmine 3.2のtarball(.tar.gz)をダウンロードします。&lt;br&gt;
&lt;a href="http://www.redmine.org/projects/redmine/wiki/Download"&gt;http://www.redmine.org/projects/redmine/wiki/Download&lt;/a&gt;&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# wget http://www.redmine.org/releases/redmine-3.2.0.tar.gz
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ダウンロードしたら展開・配置します。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# tar zxvf redmine-3.2.0.tar.gz
# mv redmine-3.2.0 /var/www/redmine
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;また、apacheからアクセスできるようにオーナーの変更をします。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# chown -R apache.apache /var/www/redmine/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;配置したredmineディレクトリ配下のconfigディレクトリに&amp;quot;database.yml&amp;quot;と&amp;quot;configuration.yml&amp;quot;を作成します。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;production:
  adapter: mysql2
  database: db_redmine
  host: &amp;lt;RDSのエンドポイント名&amp;gt;
  username: ユーザー
  password: "パスワード"
  encoding: utf8
&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;production:
  email_delivery:
    delivery_method: :smtp
    smtp_settings:
      address: "127.0.0.1"
      port: 25
      domain: 'ドメイン'

  rmagick_font_path: /usr/share/fonts/ipa-gothic/ipag.ttf
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id="4.redmine用gemパッケージの一括インストール"&gt;4.Redmine用Gemパッケージの一括インストール&lt;/h4&gt;

&lt;p&gt;bandlerを使ってRedmineが使用するGemを一括でインストールします。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# bundle install --without development test --path vendor/bundle
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id="5.redmineの初期設定とデータベースのテーブル作成"&gt;5.Redmineの初期設定とデータベースのテーブル作成&lt;/h4&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# bundle exec rake generate_secret_token
# RAILS_ENV=production bundle exec rake db:migrate
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id="passengerインストール"&gt;passengerインストール&lt;/h1&gt;

&lt;h4 id="1.passengerのインストール"&gt;1.passengerのインストール&lt;/h4&gt;

&lt;p&gt;Railsアプリケーションを実行するためのApacheモジュールであるpassengerをインストールします。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# gem install passenger --no-rdoc --no-ri
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id="2.apache用モジュールのインストール"&gt;2.Apache用モジュールのインストール&lt;/h4&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# passenger-install-apache2-module
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;以下のコマンドを実行することで、apacheに組み込む設定が確認できます。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# passenger-install-apache2-module --snippet
LoadModule passenger_module /usr/local/share/ruby/gems/2.0/gems/passenger-5.0.22/buildout/apache2/mod_passenger.so
&amp;lt;IfModule mod_passenger.c&amp;gt;
  PassengerRoot /usr/local/share/ruby/gems/2.0/gems/passenger-5.0.22
  PassengerDefaultRuby /usr/bin/ruby2.0
&amp;lt;/IfModule&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&amp;quot;/etc/httpd/conf.d/&amp;quot;にpassengerの設定ファイルを作成します。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# vim /etc/httpd/conf.d/passenger.conf
&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# Passengerの基本設定。
# passenger-install-apache2-module --snippet を実行して表示される設定を使用。
# 環境によって設定値が異なりますので以下の5行はそのまま転記しないでください。
#
LoadModule passenger_module /usr/local/share/ruby/gems/2.0/gems/passenger-5.0.22/buildout/apache2/mod_passenger.so
&amp;lt;IfModule mod_passenger.c&amp;gt;
  PassengerRoot /usr/local/share/ruby/gems/2.0/gems/passenger-5.0.22
  PassengerDefaultRuby /usr/bin/ruby2.0
&amp;lt;/IfModule&amp;gt;

# Passengerが追加するHTTPヘッダを削除するための設定（任意）。
#
Header always unset "X-Powered-By"
Header always unset "X-Rack-Cache"
Header always unset "X-Content-Digest"
Header always unset "X-Runtime"

# 必要に応じてPassengerのチューニングのための設定を追加（任意）。
# 詳しくはPhusion Passenger users guide(http://www.modrails.com/documentation/Users%20guide%20Apache.html)をご覧ください。
PassengerMaxPoolSize 20
PassengerMaxInstancesPerApp 4
PassengerPoolIdleTime 3600
PassengerHighPerformance on
PassengerStatThrottleRate 10
PassengerSpawnMethod smart
RailsAppSpawnerIdleTime 86400
PassengerMaxPreloaderIdleTime 0
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id="3.apache起動"&gt;3.apache起動&lt;/h4&gt;

&lt;p&gt;最後にapacheを起動します。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# service httpd start
# chkconfig httpd on
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;以上でRedmineのインストールが完了しました。&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>「AWS WAF」を導入してみた。- String matching編</title>
    <link rel="alternate" href="http://blog.url.com/2016/01/12/aws-waf-stringmatching.html"/>
    <id>http://blog.url.com/2016/01/12/aws-waf-stringmatching.html</id>
    <published>2016-01-12T09:00:00+09:00</published>
    <updated>2016-01-14T18:30:56+09:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;h1 id="はじめに"&gt;はじめに&lt;/h1&gt;

&lt;hr&gt;

&lt;p&gt;2015年のre:Inventで「AWS WAF」が発表されました。&lt;/p&gt;

&lt;p&gt;AWS WAFはアプリケーション用のファイアウォールで、IP address、SQL injection、String matchingに関するアクセスの制御ができます。&lt;br&gt;
ただ、このサービスを利用するにはCloudFront経由でのアクセスにしか対応していないため、ELBやEC2にWAFを導入する場合はCloudFrontを配置する必要があります。&lt;/p&gt;

&lt;p&gt;今回は既に作成済みの「waf-test-acl」にString matchingの設定を追加してみます。&lt;br&gt;
その他の設定については以下参照ください。&lt;br&gt;
&lt;a href="../../../2015/12/28/aws-waf-ipaddress.html"&gt;「AWS WAF」を導入してみた。- IP addresses編&lt;/a&gt;&lt;br&gt;
&lt;a href="../../../2016/01/07/aws-waf-sqlinjection.html"&gt;「AWS WAF」を導入してみた。- SQL injection編&lt;/a&gt;&lt;/p&gt;

&lt;h1 id="1.設定"&gt;1.設定&lt;/h1&gt;

&lt;hr&gt;

&lt;h2 id="①-conditionの作成"&gt;① Conditionの作成&lt;/h2&gt;

&lt;p&gt;まず、String matchingをクリックします。&lt;br&gt;
&lt;img alt="aws-waf_sql-injection_2015120401.png" src="https://qiita-image-store.s3.amazonaws.com/0/82090/3c0e488c-ab1e-ed97-73ef-5f8b66a183ef.png" /&gt;&lt;/p&gt;

&lt;p&gt;「Create condition」をクリックします。&lt;br&gt;
&lt;img alt="aws-waf_sql-injection_2015120402.png" src="https://qiita-image-store.s3.amazonaws.com/0/82090/a8744128-6c9f-e323-dc85-8ca16f70d176.png" /&gt;&lt;/p&gt;

&lt;p&gt;「Name」には任意のコンディション名を入力します。&lt;br&gt;
また、Filter settingsの「Part of the request to filter on」でチェックしたいWeb要求、Match typeは部分一致や完全一致といった条件、「Transformation」でAWS WAFがリクエストをチェックする前に行う変換方式を指定。「Value is base64 encoded」は　「Value to match」にはチェックする文字列を入力します。入力が完了したら最後に「Add another filter」をクリックして条件に追加します。&lt;br&gt;
&lt;img alt="aws-waf_uri_2015121003.png" src="https://qiita-image-store.s3.amazonaws.com/0/82090/6a5672a0-c18a-f7b7-ce47-386f319d2a44.png" /&gt;&lt;/p&gt;

&lt;p&gt;Filters in this string match conditionへの追加が確認できたら「Create」をクリックして作成します。&lt;br&gt;
&lt;img alt="aws-waf_uri_2015121004.png" src="https://qiita-image-store.s3.amazonaws.com/0/82090/d5e64543-c90e-30d6-f8a6-18a16bb0080a.png" /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h2 id="②-ruleの作成"&gt;② Ruleの作成&lt;/h2&gt;

&lt;p&gt;conditionを作成したら、次に「Rules」をクリックします。&lt;br&gt;
&lt;img alt="aws-waf_uri_2015121005.png" src="https://qiita-image-store.s3.amazonaws.com/0/82090/1011c8f8-ea24-1b8d-07de-731158892085.png" /&gt;&lt;/p&gt;

&lt;p&gt;Rules設定画面が表示されたら「Create rule」をクリックしルールの作成を行います。&lt;br&gt;
&lt;img alt="aws-waf_uri_2015121006.png" src="https://qiita-image-store.s3.amazonaws.com/0/82090/d38f4d02-4131-0b3e-0068-4c4de905084f.png" /&gt;&lt;/p&gt;

&lt;p&gt;先ほどConditionsのSQL injectionで作成したルールを設定し、完了したら「Create」をクリックします。&lt;br&gt;
&lt;img alt="aws-waf_uri_2015121007.png" src="https://qiita-image-store.s3.amazonaws.com/0/82090/58d87168-f0b6-aea0-8d6f-17e9433e7115.png" /&gt;&lt;/p&gt;

&lt;p&gt;ルールの作成が完了したら「Web ACLs」をクリックします。&lt;br&gt;
&lt;img alt="aws-waf_uri_2015121008.png" src="https://qiita-image-store.s3.amazonaws.com/0/82090/280aa372-ac09-ab3e-dbac-6c65969eec9b.png" /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h2 id="③-access-control-listへの追加"&gt;③ Access Control Listへの追加&lt;/h2&gt;

&lt;p&gt;今回ルールを追加する対象のACL名をクリックします。&lt;br&gt;
&lt;img alt="aws-waf_uri_2015121009.png" src="https://qiita-image-store.s3.amazonaws.com/0/82090/8bc790ec-cbde-dcde-ffe1-f1f0cccf740e.png" /&gt;&lt;/p&gt;

&lt;p&gt;タブ「Rules」をクリックして「Edit web ACL」をクリックします。&lt;br&gt;
&lt;img alt="aws-waf_uri_2015121010-1.png" src="https://qiita-image-store.s3.amazonaws.com/0/82090/c21cf4c1-f557-80f4-2e82-cc7d0edf7b86.png" /&gt;&lt;/p&gt;

&lt;p&gt;「Rules」のプルダウンで今回作成したルールを選択し、「Add rule to web ACL」をクリックします。&lt;br&gt;
&lt;img alt="aws-waf_uri_2015121011.png" src="https://qiita-image-store.s3.amazonaws.com/0/82090/127306be-910f-092e-fea8-1e4e097b7848.png" /&gt;&lt;/p&gt;

&lt;p&gt;すると”If a request matches all the conditions in a rule, take the corresponding action”に追加されます。今回はブロックをしたいため”Action”は「Block」をチェックし、「Update」をクリックします。&lt;br&gt;
&lt;img alt="aws-waf_uri_2015121012.png" src="https://qiita-image-store.s3.amazonaws.com/0/82090/ed1925ab-f67f-b767-b99b-c5da4222b416.png" /&gt;&lt;/p&gt;

&lt;p&gt;ルールが追加されました。「Requests」タブをクリックするとリクエストログが確認できます。&lt;br&gt;
&lt;img alt="aws-waf_uri_2015121013-1.png" src="https://qiita-image-store.s3.amazonaws.com/0/82090/21d65f4b-572b-20b3-11d3-c4ce5df9e538.png" /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;  &lt;/p&gt;

&lt;h1 id="2.動作確認"&gt;2.動作確認&lt;/h1&gt;

&lt;hr&gt;

&lt;p&gt;今回は「test.txt」の文字列があるアクセスはブロックというルールを適用しました。なので例えば「http://&lt;CloudFront&gt;/test.txt」へアクセスすると以下の画面が表示されます。&lt;br&gt;
&lt;img alt="aws-waf_uri_2015121016-1.png" src="https://qiita-image-store.s3.amazonaws.com/0/82090/2e8d2008-6169-9166-c14a-f33ed1a12fad.png" /&gt;&lt;/p&gt;

&lt;p&gt;今回作成したルールによってフィルタリングがされているかを確認するには「Requests」から今回作成した&amp;quot;uri-string-block-rule&amp;quot;をプルダウンから選び、「Get new samples」をクリックします。&lt;br&gt;
&lt;img alt="aws-waf_uri_2015121015-1.png" src="https://qiita-image-store.s3.amazonaws.com/0/82090/1e536f40-c29a-2e19-4173-959a93b20f44.png" /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h1 id="あとがき"&gt;あとがき&lt;/h1&gt;

&lt;p&gt;つい先日、画面が変わったみたいです。(とりあえず2015/12/10には変わってました。)&lt;br&gt;
「Requests」タブをクリックすると、マッチしたリクエストまたはルールについてのグラフが現れます。&lt;br&gt;
&lt;img alt="aws-waf_uri_2015121014.png" src="https://qiita-image-store.s3.amazonaws.com/0/82090/e4b7a2f3-4a6e-5ddf-e492-3843a25b5708.png" /&gt;&lt;br&gt;
　確認したいリクエストやルールにチェックを入れるとそれについてグラフ化されます。もともとCloudWatchで確認できましたが、一つ一つ選択して確認しないといけなかったのと、CloudWatchの画面に移動しないといけなかったので、見やすくなってよかったかなと思います。&lt;br&gt;
　また、「Sampled requests」もルールごとに表示されるように変わりました。これについてはルールごとに表示は見やすくて良いのですが「ALL」みたいな全てを表示する項目があった方がより使いやすいなと感じました。また、以前は記載されていたルールに対しての処理(BlockしたのかAllowしたのか)が無くなってしまったので、そこも直感的に分かりづらくなって残念です。&lt;br&gt;
　ただWAFはリリースしたてというのもあり、今後もどんどん変化していくと思います。よりサービスの充実とともに使いやすくなることにも期待です。&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>「AWS WAF」を導入してみた。- SQL injection編</title>
    <link rel="alternate" href="http://blog.url.com/2016/01/07/aws-waf-sqlinjection.html"/>
    <id>http://blog.url.com/2016/01/07/aws-waf-sqlinjection.html</id>
    <published>2016-01-07T09:00:00+09:00</published>
    <updated>2016-01-14T18:30:56+09:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;h1 id="はじめに"&gt;はじめに&lt;/h1&gt;

&lt;hr&gt;

&lt;p&gt;2015年のre:Inventで「AWS WAF」が発表されました。&lt;/p&gt;

&lt;p&gt;AWS WAFはアプリケーション用のファイアウォールで、IP address、SQL injection、String matchingに関するアクセスの制御ができます。&lt;br&gt;
ただ、このサービスを利用するにはCloudFront経由でのアクセスにしか対応していないため、ELBやEC2にWAFを導入する場合はCloudFrontを配置する必要があります。&lt;/p&gt;

&lt;p&gt;今回は既に作成済みの「waf-test-acl」にSQL injectionの設定を追加してみます。&lt;br&gt;
その他の設定については以下参照ください。&lt;br&gt;
&lt;a href="../../../2015/12/28/aws-waf-ipaddress.html"&gt;「AWS WAF」を導入してみた。- IP addresses編&lt;/a&gt;&lt;br&gt;
&lt;a href="../../../2016/01/12/aws-waf-stringmatching.html"&gt;「AWS WAF」を導入してみた。- String matching編&lt;/a&gt;&lt;/p&gt;

&lt;h1 id="1.設定"&gt;1.設定&lt;/h1&gt;

&lt;hr&gt;

&lt;h2 id="①-conditionの作成"&gt;① Conditionの作成&lt;/h2&gt;

&lt;p&gt;まず、SQL injectionをクリックします。&lt;br&gt;
&lt;img alt="aws-waf_sql-injection_2015120401.png" src="https://qiita-image-store.s3.amazonaws.com/0/82090/3c0e488c-ab1e-ed97-73ef-5f8b66a183ef.png" /&gt;&lt;/p&gt;

&lt;p&gt;「Create condition」をクリックします。&lt;br&gt;
&lt;img alt="aws-waf_sql-injection_2015120402.png" src="https://qiita-image-store.s3.amazonaws.com/0/82090/a8744128-6c9f-e323-dc85-8ca16f70d176.png" /&gt;&lt;/p&gt;

&lt;p&gt;「Name」には任意のコンディション名を入力します。&lt;br&gt;
また、Filter settingsの「Part of the request to filter on」でチェックしたいWeb要求、「Transformation」でAWS WAFがリクエストをチェックする前に行う変換方式を指定し、OKであれば「Add another filter」をクリックして条件に追加します。&lt;br&gt;
&lt;img alt="aws-waf_sql-injection_2015120403.png" src="https://qiita-image-store.s3.amazonaws.com/0/82090/31948ec2-c58c-a4d7-0b26-19504d9f84dd.png" /&gt;&lt;/p&gt;

&lt;p&gt;Filters in this SQL injection match conditionへの追加が確認できたら「Create」をクリックして作成します。&lt;br&gt;
&lt;img alt="aws-waf_sql-injection_2015120404.png" src="https://qiita-image-store.s3.amazonaws.com/0/82090/54e80d2d-720f-349a-96a5-04f6a25697ca.png" /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h2 id="②-ruleの作成"&gt;② Ruleの作成&lt;/h2&gt;

&lt;p&gt;conditionを作成したら、次に「Rules」をクリックします。&lt;br&gt;
&lt;img alt="aws-waf_sql-injection_2015120405.png" src="https://qiita-image-store.s3.amazonaws.com/0/82090/e91e32cb-55dd-1018-0b0a-838d546e070c.png" /&gt;&lt;/p&gt;

&lt;p&gt;Rules設定画面が表示されたら「Create rule」をクリックしルールの作成を行います。&lt;br&gt;
&lt;img alt="aws-waf_sql-injection_2015120406.png" src="https://qiita-image-store.s3.amazonaws.com/0/82090/2c386f4c-78bb-07ae-377c-dd1112e035f6.png" /&gt;&lt;/p&gt;

&lt;p&gt;先ほどConditionsのSQL injectionで作成したルールを設定し、完了したら「Create」をクリックします。&lt;br&gt;
&lt;img alt="aws-waf_sql-injection_2015120407.png" src="https://qiita-image-store.s3.amazonaws.com/0/82090/4e5abd0b-ec03-3f5b-8b8c-72fc924cb72e.png" /&gt;&lt;/p&gt;

&lt;p&gt;ルールの作成が完了したら「Web ACLs」をクリックします。&lt;br&gt;
&lt;img alt="aws-waf_sql-injection_2015120408.png" src="https://qiita-image-store.s3.amazonaws.com/0/82090/f8f07011-cc24-5d48-9b06-b47db0383cee.png" /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h2 id="③-access-control-listへの追加"&gt;③ Access Control Listへの追加&lt;/h2&gt;

&lt;p&gt;今回ルールを追加する対象のACL名をクリックします。&lt;br&gt;
&lt;img alt="aws-waf_sql-injection_2015120409.png" src="https://qiita-image-store.s3.amazonaws.com/0/82090/8340e1bf-1517-1eac-f827-0d4435bbedb5.png" /&gt;&lt;/p&gt;

&lt;p&gt;タブ「Rules」をクリックして「Edit web ACL」をクリックします。&lt;br&gt;
&lt;img alt="aws-waf_sql-injection_2015120410-1.png" src="https://qiita-image-store.s3.amazonaws.com/0/82090/a4139ba3-e738-78b4-3ac2-3fca43ebe0a1.png" /&gt;&lt;/p&gt;

&lt;p&gt;「Rules」のプルダウンで今回作成したルールを選択し、「Add rule to web ACL」をクリックすると下の”If a request matches all the conditions in a rule, take the corresponding action”に追加されます。そうしたら今回はブロックをしたいため「Block」にチェックし、「Update」をクリックします。&lt;br&gt;
&lt;img alt="aws-waf_sql-injection_2015120411.png" src="https://qiita-image-store.s3.amazonaws.com/0/82090/32de316d-d008-4001-a91c-527d05e48b79.png" /&gt;&lt;/p&gt;

&lt;p&gt;ルールが追加されました。「Requests」タブをクリックするとリクエストログが確認できます。&lt;br&gt;
&lt;img alt="aws-waf_sql-injection_2015120412-1.png" src="https://qiita-image-store.s3.amazonaws.com/0/82090/14c360d3-19cc-0783-51aa-c583b61cc2f6.png" /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;  &lt;/p&gt;

&lt;h1 id="2.動作確認"&gt;2.動作確認&lt;/h1&gt;

&lt;hr&gt;

&lt;h2 id="①-現状確認"&gt;① 現状確認&lt;/h2&gt;

&lt;p&gt;まずは現状を確認します。リクエストがない状態です。&lt;br&gt;
&lt;img alt="aws-waf_sql-injection_2015120414.png" src="https://qiita-image-store.s3.amazonaws.com/0/82090/4fa2ba96-395b-c49d-6a48-694f3e98cbcc.png" /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h2 id="②-ツールの実行"&gt;② ツールの実行&lt;/h2&gt;

&lt;p&gt;次にsqlmapを実行します。&lt;br&gt;
&lt;img alt="aws-waf_sql-injection_2015120419-1.png" src="https://qiita-image-store.s3.amazonaws.com/0/82090/2edf7173-9eef-ea55-316f-d33268c8ff1e.png" /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h2 id="③-リクエスト確認"&gt;③ リクエスト確認&lt;/h2&gt;

&lt;p&gt;それでは再度、リクエストを確認してみます。&lt;br&gt;
&lt;img alt="aws-waf_sql-injection_2015120415-1.png" src="https://qiita-image-store.s3.amazonaws.com/0/82090/3e5b73ce-86ff-f935-760e-1f1a4f8f48ed.png" /&gt;&lt;/p&gt;

&lt;p&gt;先ほど設定したルール&amp;quot;sql-injection-rule&amp;quot;によってリクエストが「Block」されているのが確認できます。&lt;br&gt;
さらに今回はUser-Agentに対して設定したので、Request headersのUser-Agentを確認するとどういったリクエストを防いだかがわかります。&lt;br&gt;
&lt;img alt="aws-waf_sql-injection_2015120416-1.png" src="https://qiita-image-store.s3.amazonaws.com/0/82090/9c7297be-2382-0036-f87a-96050f749dfe.png" /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img alt="aws-waf_sql-injection_2015120417-1.png" src="https://qiita-image-store.s3.amazonaws.com/0/82090/68bfd374-a6d0-6bfc-930b-9fbcb01c201a.png" /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img alt="aws-waf_sql-injection_2015120418-1.png" src="https://qiita-image-store.s3.amazonaws.com/0/82090/14cd9731-1cd5-6e62-a8cf-17551086c621.png" /&gt;&lt;/p&gt;

&lt;p&gt;以上で設定完了です。&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>「AWS WAF」を導入してみた。- IP addresses編</title>
    <link rel="alternate" href="http://blog.url.com/2015/12/28/aws-waf-ipaddress.html"/>
    <id>http://blog.url.com/2015/12/28/aws-waf-ipaddress.html</id>
    <published>2015-12-28T09:00:00+09:00</published>
    <updated>2016-01-14T18:30:56+09:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;WS WAFはアプリケーション用のファイアウォールで、&lt;br&gt;
IP address、SQL injection、String matchingに関するアクセスの制御ができます。&lt;/p&gt;

&lt;p&gt;ただ、このサービスを利用するにはCloudFront経由でのアクセスにしか対応していないため、ELBやEC2にWAFを導入する場合はCloudFrontを配置する必要があります。&lt;/p&gt;

&lt;p&gt;今回はIP addressesの設定を行います。&lt;br&gt;
その他の設定については以下を参照ください。&lt;br&gt;
&lt;a href="../../../2016/01/07/aws-waf-sqlinjection.html"&gt;「AWS WAF」を導入してみた。- SQL injection編&lt;/a&gt;&lt;br&gt;
&lt;a href="../../../2016/01/12/aws-waf-stringmatching.html"&gt;「AWS WAF」を導入してみた。- String matching編&lt;/a&gt;&lt;/p&gt;

&lt;h1 id="1.新規設定"&gt;1.新規設定&lt;/h1&gt;

&lt;hr&gt;

&lt;p&gt;今回は新規で特定IPアドレスからのアクセスをブロックする設定をします。&lt;br&gt;
まずはじめに画面中央にある「Get started」をクリックします。&lt;br&gt;
&lt;img alt="aws-waf_2015120101.png" src="https://qiita-image-store.s3.amazonaws.com/0/82090/efb26a7f-2d80-b239-4084-90c86b13aa3a.png" /&gt;&lt;/p&gt;

&lt;p&gt;Concepts overview画面が表示されますが右下の「Next」をクリックします。&lt;br&gt;
&lt;img alt="aws-waf_2015120102.png" src="https://qiita-image-store.s3.amazonaws.com/0/82090/c511e13b-9596-060d-c4d7-347ec52b1708.png" /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;  &lt;/p&gt;

&lt;h2 id="step-1:-name-web-acl"&gt;Step 1: Name web ACL&lt;/h2&gt;

&lt;p&gt;作成するWeb ACLの名前を入力します。これはWAFで設定する複数のルールをまとめるためのグループ名となるので、導入するサービス名などをつけるのが良いと思います。&lt;br&gt;
今回は「waf-test-acl」にします。&lt;br&gt;
&lt;img alt="aws-waf_2015120103-step1.png" src="https://qiita-image-store.s3.amazonaws.com/0/82090/0df8bfbf-ce26-698e-1dca-84a86b45bca3.png" /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;  &lt;/p&gt;

&lt;h2 id="step-2:-create-conditions"&gt;Step 2: Create conditions&lt;/h2&gt;

&lt;p&gt;今回はIPアドレスのアクセスコントロール設定をするので「IP match conditions」の「Create IP match condition」をクリックします。&lt;br&gt;
&lt;img alt="aws-waf_2015120103-step2-1.png" src="https://qiita-image-store.s3.amazonaws.com/0/82090/13711371-ecf1-204e-0553-0df570b452ba.png" /&gt;&lt;/p&gt;

&lt;p&gt;するとIPアドレスを設定する画面がポップアップされるためIPアドレス名とIPアドレス(レンジ指定可)を入力して「Create」をクリックします。&lt;br&gt;
&lt;img alt="aws-waf_2015120103-step2-2-1.png" src="https://qiita-image-store.s3.amazonaws.com/0/82090/fc4bafd9-8cea-10f6-c6d4-15861caeb638.png" /&gt;&lt;/p&gt;

&lt;p&gt;作成が完了したら「Next」をクリックします。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;  &lt;/p&gt;

&lt;h2 id="step-3:-create-rules"&gt;Step 3: Create rules&lt;/h2&gt;

&lt;p&gt;「Create rule」をクリックするとルールを設定する画面がポップアップされます。&lt;br&gt;
&lt;img alt="aws-waf_2015120103-step3-1.png" src="https://qiita-image-store.s3.amazonaws.com/0/82090/7613d6a2-a2c3-d688-300c-161756d26620.png" /&gt;&lt;/p&gt;

&lt;p&gt;今回の場合は「リクストが該当IP(waf-test-ip)からのアクセスからの場合」というルールを設定しています。&lt;br&gt;
&lt;img alt="aws-waf_2015120103-step3-2-1.png" src="https://qiita-image-store.s3.amazonaws.com/0/82090/7562a015-1416-658a-7d1a-af63e248c329.png" /&gt;&lt;/p&gt;

&lt;p&gt;設定が完了したら「Create」をクリックします。&lt;br&gt;
作成したらそのルールにマッチした際のアクション(Allow, Block, Count)と、マッチしない場合のデフォルトアクション(Allow, Block)を設定し「Next」をクリックします。&lt;br&gt;
&lt;img alt="aws-waf_2015120103-step3-3.png" src="https://qiita-image-store.s3.amazonaws.com/0/82090/12b1af6d-c5e2-4a34-09ca-fcfb30c31fd6.png" /&gt;&lt;/p&gt;

&lt;p&gt;今回はデフォルトアクションをAllowとし、該当IP(ip-deny-rule)からのリクエストはBlockを設定します。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;  &lt;/p&gt;

&lt;h2 id="step-4:-choose-aws-resource"&gt;Step 4: Choose AWS resource&lt;/h2&gt;

&lt;p&gt;Resourceの項目を適用したいCloudFrontに設定して「Review and create」をクリックします。&lt;br&gt;
&lt;img alt="aws-waf_2015120103-step4-1-1.png" src="https://qiita-image-store.s3.amazonaws.com/0/82090/da06dd26-46f8-7fd9-a3e7-72ee273f4862.png" /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;  &lt;/p&gt;

&lt;h2 id="step-5:-review-and-create"&gt;Step 5: Review and create&lt;/h2&gt;

&lt;p&gt;最後に今までのStepで設定した内容が表示されるのでOKであることを確認して「Confirm and distribution」をクリックします。&lt;br&gt;
&lt;img alt="aws-waf_2015120103-step5-1-1.png" src="https://qiita-image-store.s3.amazonaws.com/0/82090/b35d35f3-58ca-47f0-90cd-72af62ada0b1.png" /&gt;&lt;/p&gt;

&lt;p&gt;作成が完了した後「Requests」タブをクリックするとリクエストログが確認できます。&lt;br&gt;
&lt;img alt="aws-waf_2015120104-1.png" src="https://qiita-image-store.s3.amazonaws.com/0/82090/cd7286f2-75a5-a5e5-3656-0e1e449f28d9.png" /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;  &lt;/p&gt;

&lt;h1 id="2.動作確認"&gt;2.動作確認&lt;/h1&gt;

&lt;hr&gt;

&lt;p&gt;まずはリクエストが無いことを確認します。&lt;br&gt;
&lt;img alt="aws-waf_2015120105.png" src="https://qiita-image-store.s3.amazonaws.com/0/82090/ec9359fe-028f-3c74-8f39-64f0b1973f2c.png" /&gt;&lt;/p&gt;

&lt;p&gt;CloudFront経由でサーバへブラウザアクセスすると以下の画面が表示されます。&lt;br&gt;
&lt;img alt="aws-waf_2015120106-1.png" src="https://qiita-image-store.s3.amazonaws.com/0/82090/f073bee1-f30f-ffea-5b07-39a871f75d4d.png" /&gt;&lt;/p&gt;

&lt;p&gt;再度リクエストログのMatches ruleを確認すると「ip-deny-rule(Block)」というログが出ているのが確認でます。&lt;/p&gt;

&lt;p&gt;今回ブロック対象としたIPからのみブロックできているのが確認できました。&lt;br&gt;
&lt;img alt="aws-waf_2015120107-1.png" src="https://qiita-image-store.s3.amazonaws.com/0/82090/c9a7a629-e448-fb6d-6430-86837b409f72.png" /&gt;&lt;/p&gt;

&lt;p&gt;以上で設定完了です。&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>問い合わせフォームもサーバレスでDevOps!　(Github,CircleCI,AWS lambda/cognito/ses)　後編</title>
    <link rel="alternate" href="http://blog.url.com/2015/12/03/lambda-s3.html"/>
    <id>http://blog.url.com/2015/12/03/lambda-s3.html</id>
    <published>2015-12-03T09:00:00+09:00</published>
    <updated>2015-12-18T16:46:05+09:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;前回の&lt;a href="http://qiita.com/toguma/items/a3c833e42c2469142ca4"&gt;記事&lt;/a&gt;で、単純な静的サイトのオートデプロイフローまで完了した後の続き。&lt;/p&gt;

&lt;p&gt;後編&lt;br&gt;
「問い合わせフォームもサーバレスでDevOps!」&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;認証 AWS Cognito&lt;/li&gt;
&lt;li&gt;処理 AWS Lambda&lt;/li&gt;
&lt;li&gt;通知 AWS SES&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;を利用して、もちろん&lt;strong&gt;サーバレス&lt;/strong&gt;で。&lt;br&gt;
Gibhubへのstaging/masterへのpush　のみで、&lt;br&gt;
CircleCI経由で各種環境へ自動デプロイを実現。&lt;/p&gt;

&lt;h1 id="前提"&gt;前提&lt;/h1&gt;

&lt;p&gt;前回同様の続きなので、&lt;br&gt;
s3site.proudit.jp -&amp;gt; 本番サイト&lt;br&gt;
st.s3site.proudit.jp -&amp;gt;　ステージングサイト&lt;br&gt;
が、すでに&lt;strong&gt;Github+CircleCiにてデプロイ可能&lt;/strong&gt;である前提で進める。&lt;/p&gt;

&lt;h1 id="構築内容"&gt;構築内容&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;Cognito準備&lt;/li&gt;
&lt;li&gt;フォーム/JavaScript準備&lt;/li&gt;
&lt;li&gt;Lambda準備&lt;/li&gt;
&lt;li&gt;SES準備&lt;/li&gt;
&lt;li&gt;CicriCIデプロイ処理修正&lt;/li&gt;
&lt;li&gt;オートデプロイテスト&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id="cognito準備"&gt;Cognito準備&lt;/h1&gt;

&lt;p&gt;CognitoはWebアクセスしたユーザに対して、時限で一時的、限定的なAWS権限を付与することが可能。&lt;br&gt;
今回は&lt;strong&gt;「フォーム入力データを指定S3バケットにUPする」&lt;/strong&gt;権限を付与する為に構築&lt;/p&gt;

&lt;h3 id="フォームデータを一時的にupする為のs3バケットを作成する。"&gt;フォームデータを一時的にUPする為のS3バケットを作成する。&lt;/h3&gt;

&lt;p&gt;公開用　s3site-form-data&lt;br&gt;
ステージング用　st-s3site-form-data&lt;/p&gt;

&lt;p&gt;このままだと、一時的な権限であってもどこからでも際限なくデータUPされかねないので、指定サイト外からのアクセス制限をCORS(Cross-Origin Resource Sharing)機能で実施。&lt;/p&gt;

&lt;p&gt;各バケットプロパティより、「▼アクセス許可」-&amp;gt; 「CORS設定の追加」&lt;/p&gt;

&lt;p&gt;&lt;img width="645" alt="スクリーンショット 2015-12-02 17.59.15.png" src="https://qiita-image-store.s3.amazonaws.com/0/89940/5e2a2583-fa34-a489-f376-f9b227571633.png"&gt;&lt;/p&gt;

&lt;p&gt;CORS構成エディターより、下記に変更。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;?xml version="1.0" encoding="UTF-8"?&amp;gt;
&amp;lt;CORSConfiguration xmlns="http://s3.amazonaws.com/doc/2006-03-01/"&amp;gt;
    &amp;lt;CORSRule&amp;gt;
        &amp;lt;AllowedOrigin&amp;gt;http://s3site.proudit.jp&amp;lt;/AllowedOrigin&amp;gt;
        &amp;lt;AllowedMethod&amp;gt;PUT&amp;lt;/AllowedMethod&amp;gt;
        &amp;lt;AllowedHeader&amp;gt;*&amp;lt;/AllowedHeader&amp;gt;
    &amp;lt;/CORSRule&amp;gt;
&amp;lt;/CORSConfiguration&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;?xml version="1.0" encoding="UTF-8"?&amp;gt;
&amp;lt;CORSConfiguration xmlns="http://s3.amazonaws.com/doc/2006-03-01/"&amp;gt;
    &amp;lt;CORSRule&amp;gt;
        &amp;lt;AllowedOrigin&amp;gt;http://st.s3site.proudit.jp&amp;lt;/AllowedOrigin&amp;gt;
        &amp;lt;AllowedMethod&amp;gt;PUT&amp;lt;/AllowedMethod&amp;gt;
        &amp;lt;AllowedHeader&amp;gt;*&amp;lt;/AllowedHeader&amp;gt;
    &amp;lt;/CORSRule&amp;gt;
&amp;lt;/CORSConfiguration&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=""&gt;&lt;img width="799" alt="スクリーンショット 2015-12-02 18.00.51.png" src="https://qiita-image-store.s3.amazonaws.com/0/89940/cba73c91-f368-a54f-48aa-698c67441b1f.png"&gt;&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;本番/ステージング、それぞれのバケットに設定するのを忘れずに。&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id="aws-cognito-identify-poolの作成"&gt;AWS Cognito Identify-Poolの作成&lt;/h3&gt;

&lt;p&gt;AWSコンソールより、Cognitoを選択。&lt;br&gt;
&lt;strong&gt;&lt;em&gt;「Create New identity pool」&lt;/em&gt;&lt;/strong&gt;より、新規Poolを作成。&lt;br&gt;
pool名は任意でOK&lt;/p&gt;

&lt;p&gt;&lt;img width="607" alt="スクリーンショット 2015-12-02 18.23.31.png" src="https://qiita-image-store.s3.amazonaws.com/0/89940/7d42d2cd-e23d-a0ec-77c4-49f0de146a6a.png"&gt;&lt;/p&gt;

&lt;p&gt;今回は認証無しユーザへ一時権限を付与するので、&lt;br&gt;
「Enable access to Unauthenticated identities」にもチェックを入れる。&lt;br&gt;
あとはそのまま作成でOK。&lt;br&gt;
　&lt;/p&gt;

&lt;p&gt;詳細を表示させて、Unauthenticatedの方のロール名を覚えておく。&lt;br&gt;
（このロール名は自動で命名されるが、自分で任意のものも指定可能）&lt;/p&gt;

&lt;p&gt;&lt;img width="739" alt="スクリーンショット 2015-12-02 18.24.04.png" src="https://qiita-image-store.s3.amazonaws.com/0/89940/09977e08-7502-a4cb-b911-11bf70cdbd77.png"&gt;&lt;/p&gt;

&lt;p&gt;　&lt;br&gt;
　&lt;/p&gt;

&lt;p&gt;作成後の画面で、&lt;strong&gt;[Get AWS Credentials]&lt;/strong&gt;に表示される「IdentityPoolID」も控えておく。(赤ラインの部分）もちろん後から確認も可能。&lt;/p&gt;

&lt;p&gt;&lt;img width="715" alt="スクリーンショット 2015-12-02 18.25.57.png" src="https://qiita-image-store.s3.amazonaws.com/0/89940/a3b4bf60-95e8-600a-0fd1-84d3e552f0d7.png"&gt;&lt;/p&gt;

&lt;h3 id="cognito-iam設定"&gt;Cognito IAM設定&lt;/h3&gt;

&lt;p&gt;Cognitoで一時的にユーザへ与える「S3バケットへのPUT権限」を作成&lt;/p&gt;

&lt;p&gt;IAM -&amp;gt; ポリシー -&amp;gt; ポリシーの作成 -&amp;gt; 独自のポリシーを作成&lt;/p&gt;

&lt;p&gt;ポリシー名　mycorpsite-cognito&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Effect": "Allow",
            "Action": [
                "s3:PutObject",
                "s3:PutObjectAcl"
            ],
            "Resource": [
                "arn:aws:s3:::s3site-form-data/*",
                "arn:aws:s3:::st-s3site-form-data/*"
            ]
        }
    ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;　&lt;br&gt;
Cognito Pool作成時に自動で生成されたRoleの内、Unauthのロールに上記ポリシーをアタッチする。&lt;/p&gt;

&lt;p&gt;IAM -&amp;gt; ロール -&amp;gt; Cognito_mycorpsiteidpoolUnauth_Role　-&amp;gt; ポリシーのアタッチ&lt;br&gt;
上記ポリシーをアタッチする。&lt;/p&gt;

&lt;p&gt;&lt;img width="733" alt="スクリーンショット 2015-12-03 00.22.38.png" src="https://qiita-image-store.s3.amazonaws.com/0/89940/2809b706-a01e-374d-5a1a-87195fe4e29f.png"&gt;&lt;/p&gt;

&lt;p&gt;　&lt;/p&gt;

&lt;p&gt;ここまでで Cognitoの準備完了。&lt;br&gt;
　&lt;/p&gt;

&lt;h1 id="フォーム・javascriptの準備"&gt;フォーム・javascriptの準備&lt;/h1&gt;

&lt;p&gt;既存index.html内のフォーム部分を下記に変更&lt;/p&gt;

&lt;p&gt;問い合わせフォーム データ仕様&lt;br&gt;
・名前 (text)&lt;br&gt;
・メールアドレス (email)&lt;br&gt;
・問い合わせ内容 (textarea)&lt;/p&gt;

&lt;p&gt;上記項目は、html / javascript / lambda　の3つを適宜変更することで要件に合わせて修正、増減可能。&lt;br&gt;
　&lt;br&gt;
まずはhtml部分の編集。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
・・・・
formタグ部分を下記と入れ替え
・・・・
&amp;lt;form class="form-horizontal"&amp;gt;
    &amp;lt;fieldset&amp;gt;
      &amp;lt;div class="control-group"&amp;gt;
        &amp;lt;div class="controls"&amp;gt;
                      &amp;lt;input type="text" class="input-xlarge" name="name"  id="name" placeholder="NAME"&amp;gt;
        &amp;lt;/div&amp;gt;
      &amp;lt;/div&amp;gt;
       &amp;lt;div class="control-group"&amp;gt;
        &amp;lt;div class="controls"&amp;gt;
                      &amp;lt;input type="email" class="input-xlarge" name="mail" id="mail" placeholder="user@example.com"&amp;gt;
        &amp;lt;/div&amp;gt;
      &amp;lt;/div&amp;gt;
       &amp;lt;div class="control-group"&amp;gt;
        &amp;lt;div class="controls"&amp;gt;
                      &amp;lt;textarea class="input-xlarge" rows="10" name="contents" id="contents" placeholder="Messages"&amp;gt;&amp;lt;/textarea&amp;gt;
        &amp;lt;/div&amp;gt;
      &amp;lt;/div&amp;gt;
        &amp;lt;input onClick="uploadFile();" type="button" value="Send Message"  class="btn btn-large btn-primary" style="color: #a2a3a3;background-color: #fff;margin-top:30px;" /&amp;gt;
    &amp;lt;/fieldset&amp;gt;
 &amp;lt;/form&amp;gt;
・・・・
・・
・

・
・・
・・・・
下記AWS/Form用のjavascriptを追加
・・・・
&amp;lt;!-- Form Script  --&amp;gt;
&amp;lt;script src="https://sdk.amazonaws.com/js/aws-sdk-2.2.19.min.js"&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script src="js/form.js"&amp;gt;&amp;lt;/script&amp;gt;
　
　
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;　&lt;br&gt;
修正後のフォーム画面&lt;br&gt;
&lt;img width="1093" alt="スクリーンショット 2015-12-03 02.50.58.png" src="https://qiita-image-store.s3.amazonaws.com/0/89940/fad8d01c-de7a-d9ca-f63f-a0f43ec838eb.png"&gt;&lt;/p&gt;

&lt;p&gt;formデータupload用のjavascriptファイルをjs/form.jsとして下記内容で追加。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Cognito IdentityPoolを作成した時に控えた「IdentityPoolId」と差し替えること&lt;/strong&gt;&lt;br&gt;
　&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var $id = function(id) { return document.getElementById(id); };
AWS.config.region = "ap-northeast-1";
AWS.config.credentials = new AWS.CognitoIdentityCredentials({IdentityPoolId: "ap-northeast-1:00000000-0000-0000-0000-000000000000"}); ##ここに控えておいたPoolIdを記載
AWS.config.credentials.get(function(err) {
    if (!err) {
        console.log("Cognito Identify Id: " + AWS.config.credentials.identityId);
    }
});

function uploadFile() {
    AWS.config.region = 'ap-northeast-1';
    var url = location.href;

    var s3BucketName = "REPLACE-DATA-BACKET";

    var now = new Date();
    var obj = {"name":$id("name").value, "mail":$id("mail").value ,"contents":$id("contents").value, "date": now.toLocaleString(), "url": url };
    var s3 = new AWS.S3({params: {Bucket: s3BucketName}});
    var blob = new Blob([JSON.stringify(obj, null, 2)], {type:'text/plain'});
    s3.putObject({Key: "uploads/" +now.getTime()+".txt", ContentType: "text/plain", Body: blob, ACL: "public-read"},
    function(err, data){
    if(data !== null){
    alert("お問い合わせ完了致しました");
        console.log('data:' + data);
    }
    else{
        alert("Upload Failed" + err.message);
    }
    });
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;　&lt;br&gt;
なお、&lt;br&gt;
javascript内の s3BucketNameは、フォーム内容をUPするバケット「s3site-form-data」「st-s3site-form-data」などを直接指定する箇所だ。&lt;/p&gt;

&lt;p&gt;ここをあえて、&lt;br&gt;
&lt;strong&gt;&amp;quot;REPLACE-DATA-BACKET&amp;quot;&lt;/strong&gt;&lt;br&gt;
としてしてあることに注意。&lt;/p&gt;

&lt;p&gt;これは、最終的に、CircleCIでデプロイするときに、ブランチに応じて本番用、ステージング用を動的に置き換える為の準備である。&lt;/p&gt;

&lt;h1 id="lambda準備"&gt;Lambda準備&lt;/h1&gt;

&lt;p&gt;今回のLambdaの処理概要&lt;br&gt;
「指定のS3バケットにデータがUPされたら、内容を整形して、指定のメールアドレスへ送付する」&lt;br&gt;
ここでいう指定のS3バケットとは前述で作成したs3site-form-dataなどを指す。&lt;/p&gt;

&lt;h3 id="iamの設定"&gt;IAMの設定&lt;/h3&gt;

&lt;p&gt;lambda用のIAMロールを先に準備しておく。&lt;br&gt;
（必要なポリシーはログ出力権限とSES送付権限の２つ）&lt;/p&gt;

&lt;p&gt;IAM -&amp;gt; ポリシー -&amp;gt; ポリシーの作成 -&amp;gt; 独自のポリシーを作成&lt;/p&gt;

&lt;p&gt;ポリシー名　mycorpsite-lambda&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Effect": "Allow",
            "Action": [
                "logs:CreateLogGroup",
                "logs:CreateLogStream",
                "logs:PutLogEvents"
            ],
            "Resource": "arn:aws:logs:*:*:*"
        }
    ]
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;　&lt;/p&gt;

&lt;p&gt;IAM -&amp;gt; ロール -&amp;gt; 新しいロールの作成&lt;/p&gt;

&lt;p&gt;ロール名 mycorpsite-lambda-role&lt;/p&gt;

&lt;p&gt;アタッチするポリシーは先ほど作成した&lt;br&gt;
・mycorpsite-lambda　（ログ権限）&lt;br&gt;
と&lt;br&gt;
・AmazonSESFullAccess　（SES送付権限）&lt;br&gt;
の２つでOK。&lt;/p&gt;

&lt;p&gt;&lt;img width="758" alt="スクリーンショット 2015-12-03 00.56.08.png" src="https://qiita-image-store.s3.amazonaws.com/0/89940/d8561bca-83e5-488c-eb87-969e35e44c3c.png"&gt;&lt;/p&gt;

&lt;h3 id="lambda関数の(仮)作成"&gt;Lambda関数の(仮)作成&lt;/h3&gt;

&lt;p&gt;lambdaの関数を作成する。&lt;br&gt;
ここで（仮）としているのは、関数の中身自体は後ほどCircleCIにてデプロイするので、このタイミングでは器を作成するだけという意味。&lt;/p&gt;

&lt;p&gt;Lambda -&amp;gt; Create a Lambda functions　&lt;/p&gt;

&lt;p&gt;Select blueprintにて&lt;br&gt;
Filter に [S3]と入力し、&lt;br&gt;
S3-get-objedtを選択&lt;br&gt;
　&lt;br&gt;
&lt;img width="932" alt="スクリーンショット 2015-12-03 00.59.42.png" src="https://qiita-image-store.s3.amazonaws.com/0/89940/598d3525-7ad2-3048-4659-c9184162e851.png"&gt;&lt;/p&gt;

&lt;p&gt;Event source type を　[S3]&lt;br&gt;
Bucket を　[s3site-form-data]&lt;br&gt;
Event Type を [Put]&lt;/p&gt;

&lt;p&gt;&lt;img width="926" alt="スクリーンショット 2015-12-03 01.00.10.png" src="https://qiita-image-store.s3.amazonaws.com/0/89940/dc522cc8-162b-44f8-0857-fbe36ccbcde7.png"&gt;&lt;/p&gt;

&lt;p&gt;Name 　s3site-form&lt;br&gt;
Discprition 　Product&lt;br&gt;
Runtime　　Node.jp&lt;/p&gt;

&lt;p&gt;&lt;img width="860" alt="スクリーンショット 2015-12-03 01.32.04.png" src="https://qiita-image-store.s3.amazonaws.com/0/89940/e76903d5-66f4-f1e5-1c3b-c0704e6ffd4f.png"&gt;&lt;/p&gt;

&lt;p&gt;Code部分は特にこの時点では編集しなくていい。&lt;/p&gt;

&lt;p&gt;Role　は作成しておいた　&lt;strong&gt;mycorpsite-lambda-role&lt;/strong&gt;　を指定する。&lt;/p&gt;

&lt;p&gt;&lt;img width="976" alt="スクリーンショット 2015-12-03 01.01.10.png" src="https://qiita-image-store.s3.amazonaws.com/0/89940/432dedca-2c5a-8635-2be3-1d81241c6bb4.png"&gt;&lt;/p&gt;

&lt;p&gt;Event sources　は　Enable now　としておく。&lt;/p&gt;

&lt;p&gt;&lt;img width="688" alt="スクリーンショット 2015-12-03 01.32.29.png" src="https://qiita-image-store.s3.amazonaws.com/0/89940/77d42141-7d11-ca02-cc01-79441b27250e.png"&gt;&lt;/p&gt;

&lt;p&gt;　　&lt;/p&gt;

&lt;p&gt;上記と同様の流れで、下記の部分を変更した、ステージング用のlambda関数も作成しておく。&lt;/p&gt;

&lt;p&gt;・Name 　st-s3site-form&lt;br&gt;
・Description　Staging&lt;br&gt;
・Bucket　st-s3site-form-data&lt;br&gt;
　&lt;br&gt;
　　&lt;/p&gt;

&lt;h1 id="ses準備"&gt;SES準備&lt;/h1&gt;

&lt;p&gt;SESは東京リージョンにはない為、バージニアかオレゴンかEUのリージョンを選択する必要がある。&lt;br&gt;
ここではバージニア(us-east-1)で作成しておく。&lt;br&gt;
SESはメールマガジンなど大量配信時には設定項目は多々あるが、今回のように自身の管理内のアドレスを登録するのは至って簡単だ。&lt;/p&gt;

&lt;p&gt;SES(バージニア） -&amp;gt; Email Adresses -&amp;gt; Verify a New Email Address　&lt;br&gt;
フォームから送信するアドレスを指定。（自身が受け取れるEmailであることが望ましい）&lt;/p&gt;

&lt;p&gt;&lt;img width="602" alt="スクリーンショット 2015-12-03 01.43.46.png" src="https://qiita-image-store.s3.amazonaws.com/0/89940/5a763442-73d7-a794-97dd-c4a8b27d4fc8.png"&gt;&lt;/p&gt;

&lt;p&gt;登録したアドレスに承認メールが届くので承認し、&lt;br&gt;
下記の通りverifiedとなることを確認する。&lt;/p&gt;

&lt;p&gt;&lt;img width="805" alt="スクリーンショット 2015-12-03 01.44.03.png" src="https://qiita-image-store.s3.amazonaws.com/0/89940/ba71e628-f716-5470-8b7a-8ea7ac3bfc7a.png"&gt;&lt;/p&gt;

&lt;p&gt;以上で、SESの準備は完了。&lt;/p&gt;

&lt;h1 id="circleciからlambdaへのデプロイ準備"&gt;CircleCIからlambdaへのデプロイ準備&lt;/h1&gt;

&lt;p&gt;CircleCIからlambda関数をupdateする為の権限を付与する必要がある。&lt;/p&gt;

&lt;p&gt;CircleCIには&lt;a href="http://qiita.com/toguma/items/a3c833e42c2469142ca4"&gt;前編&lt;/a&gt;のS3サイトへのオートデプロイ時に、s3-deploy-userの権限を付与されている状態であるので、このユーザへポリシーを追加する。&lt;/p&gt;

&lt;h3 id="iam設定"&gt;IAM設定&lt;/h3&gt;

&lt;p&gt;まずはlambdaデプロイ用ポリシーを作成。&lt;/p&gt;

&lt;p&gt;IAM -&amp;gt; ポリシー -&amp;gt; ポリシーの作成 -&amp;gt; 独自のポリシーを作成&lt;/p&gt;

&lt;p&gt;ポリシー名　lambda-deploy&lt;/p&gt;

&lt;p&gt;PassRoleで指定するARNはlambda実行時に作成したroleのARNを指定。&lt;br&gt;
(ここでは&lt;strong&gt;mycorpsite-lambda-role&lt;/strong&gt;)&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Sid": "",
            "Effect": "Allow",
            "Action": [
                "lambda:CreateFunction",
                "lambda:GetFunction",
                "lambda:UpdateFunctionConfiguration",
                "lambda:UpdateFunctionCode",
                "lambda:UpdateEventSourceMapping",
                "lambda:CreateEventSourceMapping",
                "lambda:ListEventSourceMappings"
            ],
            "Resource": [
                "*"
            ]
        },
        {
            "Sid": "",
            "Effect": "Allow",
            "Action": [
                "iam:PassRole"
            ],
            "Resource": [
                "arn:aws:iam::[自身のAWS-ID]:role/mycorpsite-lambda-role"
            ]
        }
    ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;IAM -&amp;gt; ユーザー -&amp;gt; s3-deploy-user -&amp;gt; ポリシーのアタッチ&lt;br&gt;
作成したポリシー[lambda-deploy]を追加アタッチする。&lt;/p&gt;

&lt;p&gt;&lt;img width="768" alt="スクリーンショット 2015-12-03 02.04.56.png" src="https://qiita-image-store.s3.amazonaws.com/0/89940/364d7a54-a4e3-7a38-8ebe-8665e3d9505d.png"&gt;&lt;/p&gt;

&lt;h3 id="lambda関数の本体準備"&gt;lambda関数の本体準備&lt;/h3&gt;

&lt;p&gt;lambda関数の配置ルール&lt;br&gt;
・Gitリポジトリ管理のトップディレクトリ直下の「lambda」ディレクトリ内に置く&lt;br&gt;
　→htmlディレクトリと同列に配置&lt;br&gt;
・lambda関数本体は　「index.js」&lt;br&gt;
・lambdaが利用するnodejs関数を lambda/node_modules/　以下に置く&lt;br&gt;
　→今回はaws-sdkのみ利用。&lt;/p&gt;

&lt;p&gt;[Gitrepo]/&lt;br&gt;
　　　--README.md&lt;br&gt;
　　　--circle.yml&lt;br&gt;
　　　--html/&lt;br&gt;
　　　　　　---index.html&lt;br&gt;
　　　　    ---js/&lt;br&gt;
　　　　　　---etc..&lt;br&gt;
&lt;strong&gt;　　　--lambda/&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;　　　　　　---index.js&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;　　　　　　---node_modules/&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;　&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ cd [PathTo GitRepo]
$ mkdir lambda
$ mkdir lambda/node_modules
$ npm install aws-sdk
　通常homedirのnode_modules配下にインストールされる。

$ cp -r ~/node_modules/aws-sdk lambda/node_modules/.
$ vi lambda/index.js
$ ls lambda/
index.js    node_modules

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;　&lt;br&gt;
lambda関数本体&lt;/p&gt;

&lt;p&gt;Destination:{ToAddresses:[]}&lt;br&gt;
のアドレスには、SESにて登録したものを指定する。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;console.log("Loading event")
var aws = require('aws-sdk');
var s3 = new aws.S3({apiVersion: '2006-03-01'});
var ses = new aws.SES({apiVersion: '2010-12-01', region: 'us-east-1' });
exports.handler = function(event, context) {
    console.log('Received event:', JSON.stringify(event, null, 2));
    var bucket = event.Records[0].s3.bucket.name;
    var key = event.Records[0].s3.object.key;
    s3.getObject({Bucket: bucket, Key: key},
        function(err, data) {
            if (err){
                context.done('error', 'error getting file' + err);
            } else {
                console.log('data:' + data);
                var message = JSON.parse(data.Body);
                console.log('message:' + message);
                var eParams = {
                        Destination: {
                            ToAddresses: ["info@proudit.jp"]
                        },
                        Message: {
                            Body: {
                                Text: {
                                    Data: "mail：" + message.mail+ "\n" + "subject："+ message.name + "\n" + "contents："+ message.contents
                                }
                            },
                            Subject: {
                                Data: "HPからお問い合わせがありました。" + "From:" + message.url
                            }
                        },
                        Source: "info@proudit.jp"
                        };

                        console.log('===SENDING EMAIL===');
                        var email = ses.sendEmail(eParams, function(err, data){
                            if(err){
                                console.log("===EMAIL ERR===");
                                console.log(err);
                                context.done(null, 'ERR'); 
                            }else {
                                console.log("===EMAIL SENT===");
                                console.log(data);
                                context.done(null, 'SUCCESS');
                            }
                });
                console.log("EMAIL CODE END");
            }
        }
    );

};
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id="デプロイ準備"&gt;デプロイ準備&lt;/h1&gt;

&lt;p&gt;CiecleCIのデプロイ定義を修正する。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;machine:
  timezone:
    Asia/Tokyo

dependencies:
    override:
        - sudo pip install awscli
    post:
        - aws configure set region ap-northeast-1

test:
  override:
    - echo "Nothing to do here"

deployment:
  production: # just a label; label names are completely up to you
    branch: master
    commands:
      - sed -i -e "s/REPLACE-DATA-BACKET/s3site-form-data/g" html/js/form.js
      - aws s3 sync html/ s3://s3site.proudit.jp/ --delete
      - cd lambda/ &amp;amp;&amp;amp; zip -r lambda.zip ./*
      - aws lambda update-function-code --function-name s3site-form --zip-file fileb://./lambda/lambda.zip --publish
  staging:
    branch: staging
    commands:
      - sed -i -e "s/REPLACE-DATA-BACKET/st-s3site-form-data/g" html/js/form.js
      - aws s3 sync html/ s3://st.s3site.proudit.jp/ --delete
      - cd lambda/ &amp;amp;&amp;amp; zip -r lambda.zip ./*
      - aws lambda update-function-code --function-name st-s3site-form --zip-file fileb://./lambda/lambda.zip --publish
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;以上で、長かった準備が完了。&lt;/p&gt;

&lt;h1 id="デプロイテスト"&gt;デプロイテスト&lt;/h1&gt;

&lt;p&gt;ここで、stagingブランチへadd/commit/push　する。&lt;/p&gt;

&lt;p&gt;例によってCircleCiが反応し、自動でデプロイ処理を始める。&lt;br&gt;
1分〜1分30秒程で完了するはず。&lt;br&gt;
&lt;img width="890" alt="スクリーンショット 2015-12-03 09.09.26.png" src="https://qiita-image-store.s3.amazonaws.com/0/89940/0e6fc72e-0181-4547-dd09-9773775253ba.png"&gt;&lt;/p&gt;

&lt;p&gt;処理中error/failerが出て処理が中断した場合はデプロイ失敗となる。&lt;br&gt;
その場合は、適宜エラー内容から判断し、修正する。&lt;/p&gt;

&lt;p&gt;Parmission系はIAM設定や、タイポなどをチェック。&lt;/p&gt;

&lt;p&gt;無事「success」となったら、ステージングサイトURLにてフォーム入力チェック。&lt;br&gt;
&lt;a href="http://st.s3site.proudit.jp"&gt;http://st.s3site.proudit.jp/&lt;/a&gt;&lt;br&gt;&lt;br&gt;
※&lt;strong&gt;(IP制限が入っているので、許可IPからは閲覧出来ないが、正しい挙動）&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img width="852" alt="スクリーンショット 2015-12-03 09.07.01.png" src="https://qiita-image-store.s3.amazonaws.com/0/89940/b3f886cc-deab-b901-0284-4f7ca1d1506b.png"&gt;&lt;/p&gt;

&lt;p&gt;入力したら、Send Messageをクリック。&lt;br&gt;
ブラウザポップアップで、「問い合わせ完了」と出れば無事S3へUP出来ている。&lt;/p&gt;

&lt;p&gt;&lt;img width="543" alt="スクリーンショット 2015-12-03 09.07.10.png" src="https://qiita-image-store.s3.amazonaws.com/0/89940/7fa4b5d6-5d70-480f-a608-138d789a9df5.png"&gt;&lt;/p&gt;

&lt;p&gt;lambdaが無事デプロイされていれば、ワンテンポ遅れて、メールが届くはずだ。&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;&lt;img width="592" alt="スクリーンショット 2015-12-03 09.03.18.png" src="https://qiita-image-store.s3.amazonaws.com/0/89940/ef8d72ba-dd69-11d2-c5a6-58bc680c9d13.png"&gt;&lt;/p&gt;

&lt;p&gt;stagingブランチで一連の表示、挙動を含め、レビューする。&lt;br&gt;
問題なければ、masterブランチへマージすることで、本番へデプロイされる。&lt;/p&gt;

&lt;p&gt;　&lt;br&gt;
本番サイトからの問い合わせフォームも同様に無事メールが届くことを確認する。&lt;/p&gt;

&lt;p&gt;&lt;img width="608" alt="スクリーンショット 2015-12-03 09.42.36.png" src="https://qiita-image-store.s3.amazonaws.com/0/89940/75ad7de0-3fd5-a302-b702-1b2bf10614e3.png"&gt;&lt;/p&gt;

&lt;h1 id="雑感"&gt;雑感&lt;/h1&gt;

&lt;p&gt;サーバレス＋自動デプロイ、DevOpsをテーマにどこまでやれるかを試した。&lt;/p&gt;

&lt;p&gt;サーバレスが故に、関連する様々なサービスとの連携が必須。&lt;br&gt;
それぞれのIAMによる権限調整は、関連処理を熟知が必要。&lt;br&gt;
と、形に持って行くまでのハードルは少々高いが、その分のメリットは十分あると感じた。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;HTML/javascript/lambda の連携のデプロイを可能な限りオートメーション化&lt;/li&gt;
&lt;li&gt;レビューしたStagingソースをそのままMasterへ反映&lt;/li&gt;
&lt;li&gt;完全サーバレス&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;この3点を抑えることで、驚くほどデプロイサイクルが早まるのではないかと思う。&lt;br&gt;
ぜひお試しあれ。&lt;/p&gt;
</content>
  </entry>
</feed>
