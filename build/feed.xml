<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Blog Name</title>
  <subtitle>Blog subtitle</subtitle>
  <id>http://blog.url.com/</id>
  <link href="http://blog.url.com/"/>
  <link href="http://blog.url.com/feed.xml" rel="self"/>
  <updated>2016-05-30T09:00:00+09:00</updated>
  <author>
    <name>Blog Author</name>
  </author>
  <entry>
    <title>IDCFクラウドのコマンドラインツールをインストールする。 - MacOSX</title>
    <link rel="alternate" href="http://blog.url.com/2016/05/30/how-to-install-the-idcf-command-line-tool-for-macosx.html"/>
    <id>http://blog.url.com/2016/05/30/how-to-install-the-idcf-command-line-tool-for-macosx.html</id>
    <published>2016-05-30T09:00:00+09:00</published>
    <updated>2016-05-30T20:30:05+09:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;h1 id="はじめに"&gt;はじめに&lt;/h1&gt;

&lt;hr&gt;

&lt;p&gt;MacOSからIDCFクラウドに対してコマンドラインツールを利用して操作できるようにします。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h1 id="事前準備"&gt;事前準備&lt;/h1&gt;

&lt;hr&gt;

&lt;p&gt;今回インストールするにあたって、gitとpipの２つのコマンドが必要となります。&lt;br&gt;
なので、まだインストールしていない場合は以下のコマンドでインストールしておいてください。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ sudo brew install git
&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ curl -kL https://raw.github.com/saghul/pythonz/master/pythonz-install | bash
$ sudo easy_install pip
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h1 id="インストール"&gt;インストール&lt;/h1&gt;

&lt;hr&gt;

&lt;p&gt;事前準備が完了したら、いよいよコマンドのインストールを行います。&lt;br&gt;
インストールはidcfのgithubリポジトリにあるcloudstack-apiをします。&lt;br&gt;
&lt;a href="https://github.com/idcf/cloudstack-api"&gt;https://github.com/idcf/cloudstack-api&lt;/a&gt;&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ sudo pip install git+https://github.com/idcf/cloudstack-api

・・・
    cc -fno-strict-aliasing -fno-common -dynamic -arch i386 -arch x86_64 -g -Os -pipe -fno-common -fno-strict-aliasing -fwrapv -DENABLE_DTRACE -DMACOSX -DNDEBUG -Wall -Wstrict-prototypes -Wshorten-64-to-32 -DNDEBUG -g -fwrapv -Os -Wall -Wstrict-prototypes -DENABLE_DTRACE -arch i386 -arch x86_64 -pipe -I/usr/include/libxml2 -Isrc/lxml/includes -I/System/Library/Frameworks/Python.framework/Versions/2.7/include/python2.7 -c src/lxml/lxml.etree.c -o build/temp.macosx-10.11-intel-2.7/src/lxml/lxml.etree.o -w -flat_namespace
    In file included from src/lxml/lxml.etree.c:320:
    src/lxml/includes/etree_defs.h:14:10: fatal error: 'libxml/xmlversion.h' file not found
    #include "libxml/xmlversion.h"
             ^
    1 error generated.
    Compile failed: command 'cc' failed with exit status 1
    creating tmp
    cc -I/usr/include/libxml2 -I/usr/include/libxml2 -c /tmp/xmlXPathInit3sJd9Z.c -o tmp/xmlXPathInit3sJd9Z.o
    /tmp/xmlXPathInit3sJd9Z.c:1:10: fatal error: 'libxml/xpath.h' file not found
    #include "libxml/xpath.h"
             ^
    1 error generated.
    *********************************************************************************
    Could not find function xmlCheckVersion in library libxml2. Is libxml2 installed?
    Perhaps try: xcode-select --install
    *********************************************************************************
    error: command 'cc' failed with exit status 1

    ----------------------------------------
Command "/usr/bin/python -u -c "import setuptools, tokenize;__file__='/private/tmp/pip-build-GIuK3z/lxml/setup.py';exec(compile(getattr(tokenize, 'open', open)(__file__).read().replace('\r\n', '\n'), __file__, 'exec'))" install --record /tmp/pip-Mmw1r6-record/install-record.txt --single-version-externally-managed --compile" failed with error code 1 in /private/tmp/pip-build-GIuK3z/lxml
You are using pip version 8.0.2, however version 8.1.1 is available.
You should consider upgrading via the 'pip install --upgrade pip' command.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;なにやらインストールが失敗してしまったみたいです。。。&lt;br&gt;
でもよく見ると、&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;*********************************************************************************
    Could not find function xmlCheckVersion in library libxml2. Is libxml2 installed?
    Perhaps try: xcode-select --install
    *********************************************************************************
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;という表示が出ています。&lt;br&gt;
インストールに必要な関数(xmlCheckVersion)が見つからないみたいです。Perhaps tryという箇所でインストール方法も教えてくれているので、とりあえずその通りに実行します。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ xcode-select --install
xcode-select: note: install requested for command line developer tools
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;再度インストールを実行します。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ sudo pip install git+https://github.com/idcf/cloudstack-api

The directory '/Users/kohei/Library/Caches/pip/http' or its parent directory is not owned by the current user and the cache has been disabled. Please check the permissions and owner of that directory. If executing pip with sudo, you may want sudo's -H flag.
The directory '/Users/kohei/Library/Caches/pip' or its parent directory is not owned by the current user and caching wheels has been disabled. check the permissions and owner of that directory. If executing pip with sudo, you may want sudo's -H flag.
Collecting git+https://github.com/idcf/cloudstack-api
  Cloning https://github.com/idcf/cloudstack-api to /tmp/pip-FkXf1Z-build
Requirement already satisfied (use --upgrade to upgrade): setuptools in /System/Library/Frameworks/Python.framework/Versions/2.7/Extras/lib/python (from cloudstack.compute==0.10.2)
Requirement already satisfied (use --upgrade to upgrade): httplib2 in /Library/Python/2.7/site-packages (from cloudstack.compute==0.10.2)
Requirement already satisfied (use --upgrade to upgrade): simplejson in /Library/Python/2.7/site-packages (from cloudstack.compute==0.10.2)
Requirement already satisfied (use --upgrade to upgrade): argparse in /Library/Python/2.7/site-packages (from cloudstack.compute==0.10.2)
Requirement already satisfied (use --upgrade to upgrade): prettytable==0.5 in /Library/Python/2.7/site-packages (from cloudstack.compute==0.10.2)
Requirement already satisfied (use --upgrade to upgrade): parsedatetime==0.8.7 in /Library/Python/2.7/site-packages (from cloudstack.compute==0.10.2)
Collecting lxml (from cloudstack.compute==0.10.2)
  Downloading lxml-3.6.0.tar.gz (3.7MB)
    100% |████████████████████████████████| 3.7MB 151kB/s
Installing collected packages: lxml, cloudstack.compute
  Running setup.py install for lxml ... done
  Running setup.py install for cloudstack.compute ... done
Successfully installed cloudstack.compute-0.10.2 lxml-3.6.0
You are using pip version 8.0.2, however version 8.1.1 is available.
You should consider upgrading via the 'pip install --upgrade pip' command.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;今度はインストールできたみたいです。&lt;br&gt;
一応試しにコマンドを実行してみると、&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ cloudstack-api --version
cloudstack-api v0.10.2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ちゃんとバージョン情報の確認ができました。&lt;/p&gt;

&lt;p&gt;ただ、このままではインストールしただけなので、次は環境へアクセスできるように設定を行います。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h1 id="環境設定"&gt;環境設定&lt;/h1&gt;

&lt;hr&gt;

&lt;p&gt;idcfヘアクセスできるようにするには&lt;code&gt;.idcfrc&lt;/code&gt;というファイルを作成し、そこに必要な情報を記載してあげる必要があります。&lt;/p&gt;

&lt;p&gt;ということではじめに必要な情報の取得です。&lt;br&gt;
情報は管理コンソールの「仮想マシン」&amp;gt;「API」から確認できます。&lt;/p&gt;

&lt;p&gt;まずは、API KeyとSecret Keyは画面の「API」の項目から取得できます。ボードクリップアイコンをクリックするとコピーできます。&lt;br&gt;
&lt;img alt="20160517-01.png" src="https://qiita-image-store.s3.amazonaws.com/0/82090/145b8cb9-2357-ee5d-f9ae-c78043f9bad0.png" /&gt;&lt;/p&gt;

&lt;p&gt;次にエンドポイント情報を取得します。今回は「東日本リージョン」ということで進めたいと思うので、先ほどと同じように東日本の箇所にあるクリップボードアイコンをクリックしてコピーします。&lt;br&gt;
&lt;img alt="20160517-02.png" src="https://qiita-image-store.s3.amazonaws.com/0/82090/904688ef-7cc6-e705-77c1-e69dc420fb91.png" /&gt;&lt;/p&gt;

&lt;p&gt;３つの情報が取得できたらいよいよ「.idcfrc」ファイルを作成します。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ vi ~/.idcfrc

[account]
host=https://compute.jp-east.idcfcloud.com/client/api
api_key=***********************************
secret_key=***********************************
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;hostにはエンドポイントが入ります。&lt;br&gt;
また、アクセス権限をユーザーだけが読み書きできるように変更もしておきます。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ chmod 600 ~/.idcfrc
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;以上で環境へアクセスできるところまで準備ができました。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h1 id="確認"&gt;確認&lt;/h1&gt;

&lt;hr&gt;

&lt;p&gt;環境設定まで完了したので実際にアクセスできるか確認してみましょう。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ cloudstack-api listZones
{
  "listzonesresponse": {
    "count": 5,
    "zone": [
      {
        "allocationstate": "Enabled",
・・・
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;レスポンス内容は割愛しますが、ずらっとJSON形式でゾーン情報が表示されればOKです。&lt;/p&gt;

&lt;p&gt;補足ですが、もし環境設定の情報が間違っていたりすると、&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ cloudstack-api listZones
No option 'api_key' in section: 'account'
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;といった内容が表示されます。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h1 id="おわりに"&gt;おわりに&lt;/h1&gt;

&lt;hr&gt;

&lt;p&gt;今回はIDCFクラウドをAPIコマンドで操作できるようにするためのセットアップを行いました。&lt;br&gt;
これによって仮想マシンを作成するたびに管理コンソールへいちいちログインするのではなく、コマンドで一発作成が可能となります。また、スクリプトなどを組んでおけば仮想マシンの作成からグローバルIPの付与といった一連の処理も可能です。&lt;/p&gt;

&lt;p&gt;ただ、現在使えるcloudstack-apiコマンドは限られています。&lt;br&gt;
詳しい内容は&lt;a href="http://docs.idcf.jp/cloud/api/"&gt;IDCFのAPI References&lt;/a&gt;に一覧があるので参考にしてください。&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>jQuery Validationを使ってフォームチェックをしてみる</title>
    <link rel="alternate" href="http://blog.url.com/2016/05/27/jQuery-validation-1.html"/>
    <id>http://blog.url.com/2016/05/27/jQuery-validation-1.html</id>
    <published>2016-05-27T09:00:00+09:00</published>
    <updated>2016-05-30T20:15:50+09:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;h1 id="はじめに"&gt;はじめに&lt;/h1&gt;

&lt;hr&gt;

&lt;p&gt;フォーム入力をする際、必須項目を未入力のまますっ飛ばすとフォームが赤くなって「必須記入項目です」なんて言われてしまったことありませんか？&lt;br&gt;
今回、その動作をプラウディットHPに実装することになりました。&lt;/p&gt;

&lt;p&gt;プロの方なら簡単なことなんだと思いますが、なんせ無知なので...&lt;br&gt;
とっても時間がかかりました。&lt;/p&gt;

&lt;p&gt;ちなみに、本番実装はまだです。&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h1 id="jqueryって？validationって？"&gt;jQueryって？Validationって？&lt;/h1&gt;

&lt;hr&gt;

&lt;p&gt;まずここからです。&lt;br&gt;
jQueryは聞いたことあるなー。Validationに関しては全く初めましてです！&lt;/p&gt;

&lt;p&gt;詳しい説明は省きますが、jQueryとはJavaScriptのライブラリのこと。&lt;br&gt;
そしてValidationとは、&lt;br&gt;
入力フォームのバリデーション（チェック）を簡単に実装することが出来るjQueryプラグイン。&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h1 id="まずサンプルを実装してみる"&gt;まずサンプルを実装してみる&lt;/h1&gt;

&lt;hr&gt;

&lt;p&gt;いろんなサイトにValidationの実装の仕方が載っているので、調べて手頃なものを引っ張ってきました。&lt;/p&gt;

&lt;p&gt;今回参考にしたのは&lt;br&gt;
&lt;a href="http://www.webdesign-fan.com/jquery-validation-engine"&gt;http://www.webdesign-fan.com/jquery-validation-engine&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;一旦ローカルで実装するため、必要なファイルをダウンロードして、&lt;br&gt;
サイト内にあったhtmlファイルを設置。&lt;/p&gt;

&lt;p&gt;してみましたが、なぜか動きません。&lt;/p&gt;

&lt;p&gt;jquery.validationEngine-ja.jsのファイルのパスが間違っていました。&lt;br&gt;
js配下のlaguageフォルダの下にjquery.validationEngine-ja.jsが入ってしまっていて、&lt;br&gt;
ファイルの読み込みができていませんでした。&lt;br&gt;
その他のファイルと同じ階層に移動。&lt;/p&gt;

&lt;p&gt;&lt;img alt="スクリーンショット" src="/images/./2016/0527_validation/validation_test_1.png" /&gt;&lt;/p&gt;

&lt;p&gt;これで解決。&lt;br&gt;
無事に動作確認できました。&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h1 id="既存のhtmlにvalidationを追加"&gt;既存のHTMLにValidationを追加&lt;/h1&gt;

&lt;hr&gt;

&lt;p&gt;サンプルと同じように、ファイルを設置、コードを追加してみました！&lt;/p&gt;

&lt;p&gt;あら？validation動いてない...&lt;/p&gt;

&lt;p&gt;既存のhtmlには既に他のjavascriptも使われているので、何かが影響して動かないのか、&lt;br&gt;
パスが違うのか...&lt;/p&gt;

&lt;p&gt;今回追加したファイルは&lt;/p&gt;

&lt;p&gt;・jquery-1.8.2.min.js (jQueryの本体)&lt;br&gt;
・jquery.validationEngine.js (プラグインの本体)&lt;br&gt;
・languages/jquery.validationEngine-ja.js (日本語ファイル)&lt;br&gt;
・validationEngine.jquery.css (スタイルシート)&lt;/p&gt;

&lt;p&gt;head要素内で上記ファイルが読み込めるようコードを記述。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    &amp;lt;!-- ▼jQuery本体 --&amp;gt;
    &amp;lt;script src="https://ajax.googleapis.com/ajax/libs/jquery/1.9.1/jquery.min.js"&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;!-- ▼バリデーション --&amp;gt;
    &amp;lt;link rel="stylesheet" href="css/validationEngine.jquery.css"&amp;gt;
    &amp;lt;script src="js/jquery.validationEngine.js"&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;script src="js/jquery.validationEngine-ja.js"&amp;gt;&amp;lt;/script&amp;gt;

    &amp;lt;script&amp;gt;
      $(function(){
        jQuery("#form").validationEngine();
      });
    &amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;フォームタグ内のチェックをしたいclass要素にvalidate[]という要素を追加&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;form fole="form"&amp;gt;
&amp;lt;div class="container"&amp;gt;
            &amp;lt;div class="col-xs-8 col-xs-offset-2"&amp;gt;
                &amp;lt;div class="row"&amp;gt;
                    &amp;lt;div class="col-sm-2"&amp;gt;&amp;lt;label for="name"&amp;gt;NAME&amp;lt;/label&amp;gt;&amp;lt;/div&amp;gt;
                        &amp;lt;div class="col-sm-10 form-group"&amp;gt;
                            &amp;lt;input type="text" class="validate[required] form-control input_per70" name="name"  id="name" placeholder="プラウド 太郎"&amp;gt;
                        &amp;lt;/div&amp;gt;

            ----------以下省略----------

             &amp;lt;div class="form-group text-center"&amp;gt;
                     &amp;lt;!-- &amp;lt;button onClick="uploadFile();" type="submit" class="btn btn-dark"&amp;gt;Send Inquiry&amp;lt;/button&amp;gt; --&amp;gt;
                     &amp;lt;input onClick="uploadFile();" type="button" value="Send Inquiry"  class="btn btn-dark" /&amp;gt;
                &amp;lt;/div&amp;gt;
        &amp;lt;/form&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h1 id="今回はまってしまった原因"&gt;今回はまってしまった原因&lt;/h1&gt;

&lt;hr&gt;

&lt;p&gt;①フォームチェックを行いたい対象のフォームIDがきちんと指定できていなかった&lt;/p&gt;

&lt;p&gt;既存のファイルではform fole=&amp;quot;form&amp;quot;という記述になっていました。&lt;br&gt;
ここをform id=&amp;quot;form&amp;quot;に変更しました。&lt;/p&gt;

&lt;p&gt;②jQueryファイルを２つ読みこもうとしていた&lt;/p&gt;

&lt;p&gt;設定を加える前に、すでにjquery.jsというフィルが存在しているところへ、&lt;br&gt;
jquery-1.8.2.min.jsを読み込もうとしていました。&lt;/p&gt;

&lt;p&gt;そのため、jquery.jsを削除。&lt;br&gt;
こちらを削除したことで、その他の動作に影響もなさそうでした。&lt;/p&gt;

&lt;p&gt;上記2点を行ったところ、しっかり動いてくれました。&lt;/p&gt;

&lt;p&gt;&lt;img alt="スクリーンショット" src="/images/./2016/0527_validation/validation_test_2.png" /&gt;&lt;/p&gt;

&lt;p&gt;※ちなみに、jquery.jsとjquery.min.jsの違いとして、ファイルサイズの大きさ、&lt;br&gt;
コードの見やすさがあるようです。&lt;br&gt;
.minの方がサイズを小さくするために改行も削除され変数名も簡略化されていて読みにくく&lt;br&gt;
なっているようですが。&lt;/p&gt;

&lt;p&gt;自分でカスタマイズしたい人には圧縮されていない方がおすすめ、とのこと。&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h1 id="おわりに"&gt;おわりに&lt;/h1&gt;

&lt;p&gt;簡単にまとめましたが、ここに辿り着くまでコードを何度も読んだり、コードの順番を変えてみたり、ファイルの階層を変えてみたり、、&lt;br&gt;
解決する気が全くしない...なんて思いながら。&lt;br&gt;
本当に根気のいる作業だなと思いましたが、自分で解決できると楽しいですね！&lt;/p&gt;

&lt;p&gt;ただ、まだこれで終わりではありません。&lt;br&gt;
現在のままだと、必須項目ですというチェックをすることはできてもフォームが未入力でもフォームの送信ができてしまうんです...&lt;/p&gt;

&lt;p&gt;この部分についてはまた調べてみようと思います。&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>第４回 AWSとIDCFをVPN接続する - 最後の仕上げ編</title>
    <link rel="alternate" href="http://blog.url.com/2016/05/26/how-the-vpn-connection-to-AWS-and-IDCF-4.html"/>
    <id>http://blog.url.com/2016/05/26/how-the-vpn-connection-to-AWS-and-IDCF-4.html</id>
    <published>2016-05-26T09:00:00+09:00</published>
    <updated>2016-05-30T20:15:50+09:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;h1 id="はじめに"&gt;はじめに&lt;/h1&gt;

&lt;hr&gt;

&lt;p&gt;&lt;a href="http://qiita.com/kooohei/items/f16dcb9e7280b29deee7"&gt;&amp;lt;&amp;lt; 前回：第３回 AWSとIDCFをVPN接続する - VPN接続編（全４回）&lt;/a&gt;&lt;br&gt;
IDCFクラウドにVyOSで仮想マシンを作成して、IDCFクラウドとAWSをVPNで接続する設定を説明します。&lt;br&gt;
&lt;img alt="idcf-vpn-1.png" src="https://qiita-image-store.s3.amazonaws.com/0/82090/9b15d672-f654-ab05-fb61-57cf8951b58e.png" /&gt;&lt;/p&gt;

&lt;p&gt;前回でIDCFのVPNゲートウェイにAWSで取得したコンフィグを流し込み、ついにIDCFとAWS間のVPN接続が完了しました。&lt;br&gt;
&lt;img alt="idcf-vpn-7.png" src="https://qiita-image-store.s3.amazonaws.com/0/82090/b290de8c-a844-3286-22e6-3e305e593004.png" /&gt;&lt;/p&gt;

&lt;p&gt;とはいえ、このままではただVPN接続しただけで、サーバー間で通信を行うことはできません。&lt;/p&gt;

&lt;p&gt;そこで仕上げとして、サーバー間で通信ができるようにルーティングとセキュリティグループの設定を行います。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h1 id="ルーティング設定"&gt;ルーティング設定&lt;/h1&gt;

&lt;hr&gt;

&lt;h2 id="aws"&gt;AWS&lt;/h2&gt;

&lt;p&gt;&lt;img alt="idcf-vpn-5.png" src="https://qiita-image-store.s3.amazonaws.com/0/82090/f143d7a0-9cf1-f292-da00-0cea9741299c.png" /&gt;&lt;/p&gt;

&lt;p&gt;ここで必要なのは「ルートテーブル」と「セキュリティグループ」の２点です。&lt;br&gt;
&lt;br&gt;&lt;br&gt;
・ルートテーブル&lt;br&gt;
作成した「VPN接続」の「要約」タブの内容が表示されていることを確認し「VPC」をクリックします。&lt;br&gt;
&lt;img alt="idcf-vpn_4_01.png" src="https://qiita-image-store.s3.amazonaws.com/0/82090/422d6f5e-bd8f-54f5-f59a-c1cb4a8cd7c1.png" /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;
対象の「VPC」の「概要」タブを表示し「ルートテーブル」をクリックします。&lt;br&gt;
&lt;img alt="idcf-vpn_4_02.png" src="https://qiita-image-store.s3.amazonaws.com/0/82090/31fbb0e9-5aba-10ad-eb67-847d8b2fc0a9.png" /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;
対象の「ルートテーブル」の「ルート」の内容を「編集」してルーティングを追加します。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;10.13.0.0/21     vgw-adsfad（仮想プライベートゲートウェイ）
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;※サブネットで別のルートテーブルも利用している場合はそちらを追加する必要があるかもしれないので注意が必要です。&lt;/p&gt;

&lt;p&gt;&lt;img alt="idcf-vpn_4_03.png" src="https://qiita-image-store.s3.amazonaws.com/0/82090/1b79aa29-30a6-d660-0a7a-f198453d97da.png" /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;
・セキュリティグループの設定&lt;br&gt;
インスタンスに紐付いているセキュリティグループに対象となるIDCF側のNWを追加します。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    タイプ        プロトコル  ポート範囲   送信元
すべてのトラフィック    すべて    すべて   10.13.0.0 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h2 id="idcf"&gt;IDCF&lt;/h2&gt;

&lt;p&gt;&lt;img alt="idcf-vpn-6.png" src="https://qiita-image-store.s3.amazonaws.com/0/82090/5da656ec-d04e-2357-0f3f-2d4df62c3d5b.png" /&gt;&lt;/p&gt;

&lt;p&gt;IDCFではAWSのようなルートテーブルなどのルーティングを一括管理するものがないので各サーバに対しスタティックルートの設定を行う必要があります。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;
・スタティックルートの設定&lt;br&gt;
サーバへログインします。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ ssh hogehoge@xxx.xxx.xxx.xxx
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;
ルーティングを追加します。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ sudo route add -net 172.31.0.0 gw 10.13.0.2 netmask 255.255.0.0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;今回はコマンドによる一時的な追加ですが、永久的に追加するのであればstatic-routesに直接記載します。(Ubuntuの場合)&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#!/bin/sh
/sbin/route add -net 172.31.0.0 gw 10.13.0.2 netmask 255.255.0.0 dev eth0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;また、実行権限が必要なのでお忘れなく。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ sudo chmod +x /etc/network/if-up.d/static-routes
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h1 id="確認"&gt;確認&lt;/h1&gt;

&lt;hr&gt;

&lt;p&gt;それでは疎通ができたかpingで確認してみましょう。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h2 id="aws環境から確認"&gt;AWS環境から確認&lt;/h2&gt;

&lt;p&gt;それではAWS環境にあるサーバにログインしてください。&lt;/p&gt;

&lt;p&gt;まずは、ルーティングの確認です。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ netstat -nr
Kernel IP routing table
Destination     Gateway         Genmask         Flags   MSS Window  irtt Iface
0.0.0.0         10.20.0.1       0.0.0.0         UG        0 0          0 eth0
172.31.0.0       0.0.0.0         255.255.0.0   U         0 0          0 eth0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;とは言ってもAWSの場合はルートテーブルで管理してますので&lt;code&gt;netstat&lt;/code&gt;では確認できません。&lt;br&gt;
ということでとりあえず疎通確認します。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ ping xxx.xxx.xxx.xxx
PING xxx.xxx.xxx.xxx (xxx.xxx.xxx.xxx) 56(84) bytes of data.
64 bytes from xxx.xxx.xxx.xxx: icmp_seq=1 ttl=63 time=11.1 ms
64 bytes from xxx.xxx.xxx.xxx: icmp_seq=2 ttl=63 time=12.7 ms
64 bytes from xxx.xxx.xxx.xxx: icmp_seq=3 ttl=63 time=10.4 ms
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;無事、確認できました。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h2 id="idcf環境から確認"&gt;IDCF環境から確認&lt;/h2&gt;

&lt;p&gt;まずはルーティングの確認です。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ netstat -nr
Kernel IP routing table
Destination     Gateway         Genmask         Flags   MSS Window  irtt Iface
0.0.0.0         10.13.0.1       0.0.0.0         UG        0 0          0 eth0
10.13.0.0       0.0.0.0         255.255.248.0   U         0 0          0 eth0
xxx.xxx.xxx.xxx &amp;lt;VyOSのIP&amp;gt;      255.255.0.0     UG        0 0          0 eth0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;こちらはルーティングが確認できました。(まぁ、さっき追加したので当たり前ですねw)&lt;br&gt;
ということで疎通確認しましょう。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ ping xxx.xxx.xxx.xxx
PING xxx.xxx.xxx.xxx (xxx.xxx.xxx.xxx) 56(84) bytes of data.
64 bytes from xxx.xxx.xxx.xxx: icmp_seq=1 ttl=63 time=11.1 ms
64 bytes from xxx.xxx.xxx.xxx: icmp_seq=2 ttl=63 time=12.7 ms
64 bytes from xxx.xxx.xxx.xxx: icmp_seq=3 ttl=63 time=10.4 ms
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;こちらも無事、確認できました。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h1 id="おわりに"&gt;おわりに&lt;/h1&gt;

&lt;hr&gt;

&lt;p&gt;以上で今回はAWSの対向の環境はIDCFですが、VPN接続するために利用しているのはVyOSです。&lt;br&gt;
なので、その他の環境であっても同様の設定(ポート許可など)ができればVyOSを利用してVPN接続が可能です。&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>スクロールが必要なweb画面のスクリーンショットを撮る方法</title>
    <link rel="alternate" href="http://blog.url.com/2016/05/18/screendhot-file.html"/>
    <id>http://blog.url.com/2016/05/18/screendhot-file.html</id>
    <published>2016-05-18T09:00:00+09:00</published>
    <updated>2016-05-24T11:08:06+09:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;h1 id="はじめに"&gt;はじめに&lt;/h1&gt;

&lt;hr&gt;

&lt;p&gt;何かと便利なスクリーンショット。&lt;br&gt;
取得したファイルを資料の添付イメージとして利用することも多いかと思います。&lt;br&gt;
&lt;br&gt;&lt;br&gt;
ただ、画面に収まっているページしか取得できずに困ったことって&lt;br&gt;
ありませんか？&lt;br&gt;
本当は全部のページを一発でできたらいいのに...と何度思ったことか。&lt;br&gt;
&lt;br&gt;&lt;br&gt;
今回、資料作りにスクリーンショットが必要になったので、調べてみました。&lt;br&gt;
きっと何かいい方法があるはず！&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h1 id="full-page-screen-capture"&gt;Full Page Screen Capture&lt;/h1&gt;

&lt;hr&gt;

&lt;p&gt;今回使ってみたのは、&lt;/p&gt;

&lt;p&gt;Google Chromeの拡張機能「Full Page Screen Capture』&lt;/p&gt;

&lt;p&gt;[追加方法]&lt;/p&gt;

&lt;p&gt;・chrome ＞　環境設定　＞　詳細設定　＞　ユーザー補助機能をさら　に追加&lt;br&gt;
&lt;br&gt;&lt;br&gt;
・chromeウェブストアが出てくるので、そこでFull Page Screen Captureを検索！&lt;/p&gt;

&lt;p&gt;&lt;img alt="スクリーンショット" src="/images/./2016/0518_screenshot/20160518_03.png" /&gt;&lt;br&gt;
&lt;br&gt;&lt;br&gt;
わたしはすでに追加済みになっていますが、これをchromeに追加するだけでOK。&lt;br&gt;
&lt;br&gt;&lt;br&gt;
該当のページを開いて、右上にあるカメラマークをぽちっとするだけ！&lt;/p&gt;

&lt;p&gt;&lt;img alt="スクリーンショット" src="/images/./2016/0518_screenshot/20160518_01.png" /&gt;&lt;/p&gt;

&lt;p&gt;すると別タブで取得したファイルが開くので、そのファイルを保存するだけ。&lt;/p&gt;

&lt;p&gt;&lt;img alt="スクリーンショット" src="/images/./2016/0518_screenshot/20160518_02.png" /&gt;&lt;br&gt;
&lt;br&gt;&lt;br&gt;
簡単ですね〜！&lt;br&gt;
必要に応じて、不要部分は画像編集で切り抜きすればいいだけです。&lt;br&gt;
&lt;br&gt;&lt;br&gt;
欲を言えば該当の画面でそのままスクロールして必要なところだけ&lt;br&gt;
スクリーンショットが取れれば尚嬉しいです。&lt;br&gt;
&lt;br&gt;&lt;br&gt;
そんな機能ないかな。&lt;br&gt;
また探してみます。&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>第３回 AWSとIDCFをVPN接続する - VPN接続編（全４回）</title>
    <link rel="alternate" href="http://blog.url.com/2016/05/16/how-the-vpn-connection-to-AWS-and-IDCF-3.html"/>
    <id>http://blog.url.com/2016/05/16/how-the-vpn-connection-to-AWS-and-IDCF-3.html</id>
    <published>2016-05-16T09:00:00+09:00</published>
    <updated>2016-05-17T12:39:40+09:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;h1 id="はじめに"&gt;はじめに&lt;/h1&gt;

&lt;hr&gt;

&lt;p&gt;&lt;a href="http://qiita.com/kooohei/items/fbc6b32f5a70bf3cfa20"&gt;&amp;lt;&amp;lt; 前回：第２回 AWSとIDCFをVPN接続する - AWS準備編（全４回）&lt;/a&gt;&lt;br&gt;
IDCFクラウドにVyOSで仮想マシンを作成して、IDCFクラウドとAWSをVPNで接続する設定を説明します。&lt;br&gt;
&lt;img alt="idcf-vpn-1.png" src="https://qiita-image-store.s3.amazonaws.com/0/82090/9b15d672-f654-ab05-fb61-57cf8951b58e.png" /&gt;&lt;/p&gt;

&lt;p&gt;ここまでで、IDCFとAWSの両方にVPNゲートウェイのを用意するところまで完了しました。&lt;br&gt;
前回の「VPN接続の作成」の際に「設定のダウンロード」を行っているのであとはそのAWS側で取得したコンフィグをIDCF側で設定してあげれば接続できるようになります。&lt;br&gt;
ということで今回はIDCFとAWS間の接続設定を行います。&lt;br&gt;
&lt;img alt="idcf-vpn-4.png" src="https://qiita-image-store.s3.amazonaws.com/0/82090/2111d578-734d-ad00-1175-1c6bce14db14.png" /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h2 id="vpn接続設定---idcf"&gt;VPN接続設定 - IDCF&lt;/h2&gt;

&lt;hr&gt;

&lt;p&gt;・VyOSへログイン&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ ssh vyos@&amp;lt;サーバーIP&amp;gt; -i &amp;lt;鍵のパス&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;
・コンフィグの流し込み&lt;br&gt;
前回の&lt;a href="#"&gt;第２回 AWSとIDCFをVPN接続する（全４回）&lt;/a&gt;で「VPN接続の作成」の「設定をダウンロード」した際にダウンロードしたコンフィグを流し込みます。(コピペでOK)&lt;br&gt;
もしうまくいかない場合はコメントアウト（先頭に「!」がある行)を除いてみてください。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;
・VPC Tunnelのlocal-address設定&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;vyos@vyos# set vpn ipsec site-to-site peer 52.192.68.69 local-address 10.13.0.146
[edit]
vyos@vyos# set vpn ipsec site-to-site peer 52.193.106.189 local-address 10.13.0.146
[edit]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;
・設定の保存&lt;br&gt;
設定を保存します。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;vyos@vyos# commit
[edit]
vyos@vyos# save
Saving configuration to '/config/config.boot'...
Done
[edit]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;
・IPsec再起動&lt;br&gt;
基本的には設定を保存した時点で接続されますが、一応再起動しておきます。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ sudo /etc/init.d/ipsec restart
Restarting strongswan IPsec services: ipsecStopping strongSwan IPsec...
Starting strongSwan 4.5.2 IPsec [starter]...
.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;
・接続確認&lt;br&gt;
vti0とvti1がAWSと接続しているtunnelです。どちらもu/u(Up)しているのが確認できます。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ show interfaces
Codes: S - State, L - Link, u - Up, D - Down, A - Admin Down
Interface        IP Address                        S/L  Description
---------        ----------                        ---  -----------
eth0             10.13.0.146/21                    u/u
lo               127.0.0.1/8                       u/u
                 ::1/128
vti0             169.254.25.22/30                  u/u  VPC tunnel 1
vti1             169.254.24.82/30                  u/u  VPC tunnel 2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ここでもvti0とvti1がconnectedと成っているが確認できます。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ show ip route
Codes: K - kernel route, C - connected, S - static, R - RIP, O - OSPF,
       I - ISIS, B - BGP, &amp;gt; - selected route, * - FIB route

S&amp;gt;* 0.0.0.0/0 [210/0] via 10.13.0.1, eth0
C&amp;gt;* 10.13.0.0/21 is directly connected, eth0
C&amp;gt;* 127.0.0.0/8 is directly connected, lo
C&amp;gt;* 169.254.24.80/30 is directly connected, vti1
C&amp;gt;* 169.254.25.20/30 is directly connected, vti0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;「VPC tunnel 1と2」2つのvti接続が確認でき、どちらもStateがupと成っています。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ show vpn ipsec sa
Peer ID / IP                            Local ID / IP
------------                            -------------
52.192.68.69                            10.13.0.146

    Description: VPC tunnel 1

    Tunnel  State  Bytes Out/In   Encrypt  Hash    NAT-T  A-Time  L-Time  Proto
    ------  -----  -------------  -------  ----    -----  ------  ------  -----
    vti     up     7.4K/6.6K      aes128   sha1    yes    1587    3600    all

Peer ID / IP                            Local ID / IP
------------                            -------------
52.193.106.189                          10.13.0.146

    Description: VPC tunnel 2

    Tunnel  State  Bytes Out/In   Encrypt  Hash    NAT-T  A-Time  L-Time  Proto
    ------  -----  -------------  -------  ----    -----  ------  ------  -----
    vti     up     7.5K/4.9K      aes128   sha1    yes    1262    3600    all
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;また、AWS側は以下で確認できます。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h1 id="おわりに"&gt;おわりに&lt;/h1&gt;

&lt;hr&gt;

&lt;p&gt;以上で無事IDCF-AWS間をVPN接続できました。&lt;br&gt;
ただ、これだけではただ繫っただけでサーバー間で通信を行うには不完全です。&lt;br&gt;
ということで、次回は最後の仕上げとして通信を行うための設定を行います。&lt;/p&gt;

&lt;p&gt;&lt;a href="http://qiita.com/kooohei/items/6ba28436485096100161"&gt;&amp;gt;&amp;gt; 最終回：第４回 AWSとIDCFをVPN接続する - 最後の仕上げ編（全４回）&lt;/a&gt;&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>2016年ゴールデンウィーク！</title>
    <link rel="alternate" href="http://blog.url.com/2016/05/11/long-Holiday.html"/>
    <id>http://blog.url.com/2016/05/11/long-Holiday.html</id>
    <published>2016-05-11T09:00:00+09:00</published>
    <updated>2016-05-17T12:39:40+09:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;h1 id="今年のゴールデンウィークは"&gt;今年のゴールデンウィークは&lt;/h1&gt;

&lt;hr&gt;

&lt;p&gt;長かったゴールデンウィークも終わってしまいましたね。&lt;br&gt;
最大で10連休、という方も多かったのではないでしょうか。&lt;br&gt;
プラウディットのお休みは暦通りでした〜。&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;p&gt;我が家のゴールデンウィークはパパもほぼお仕事だったので遠出はしませんでしが、近場で楽しみましたよ〜！&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h1 id="どこに行ったかというと・・・"&gt;どこに行ったかというと・・・&lt;/h1&gt;

&lt;hr&gt;

&lt;p&gt;連休期間中、“原作出版70周年記念 きかんしゃトーマススペシャルギャラリー”&lt;br&gt;
なるものが開催されていたので、&lt;br&gt;
トーマス好きな息子を連れて、おじいちゃん、おばあちゃんと共に行ってきました！&lt;/p&gt;

&lt;p&gt;&lt;font size=5&gt;&lt;/p&gt;

&lt;p&gt;原鉄道模型博物館へ！！&lt;/p&gt;

&lt;p&gt;&lt;/font&gt;&lt;/p&gt;

&lt;p&gt;&lt;font size=2&gt;&lt;/p&gt;

&lt;p&gt;この博物館、実は全て個人の方がお持ちになっていた模型やコレクションが展示されているんです！&lt;br&gt;
詳しいお話はこちらへ⇩&lt;br&gt;
&lt;a href="http://www.hara-mrm.com/about/index.html"&gt;http://www.hara-mrm.com/about/index.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;/font&gt;&lt;/p&gt;

&lt;p&gt;お目当のトーマスのコーナーは、大きなプラレールのコースにたくさんの&lt;br&gt;
トーマスの仲間が走っている模型？や、&lt;br&gt;
トーマスプラレールで遊べる広場がちょこっと。&lt;/p&gt;

&lt;p&gt;スペースは意外に小さかったのですが、子供達はそれぞれトーマスに大興奮していました。&lt;br&gt;
息子も滞在時間のほぼ8割がたここで遊んでいました。&lt;/p&gt;

&lt;p&gt;あとは、スタンプラリーをしてトーマスのステッカーをゲット！&lt;/p&gt;

&lt;p&gt;その他は鉄道の模型やカメラの展示があり、一番すごかったのは&lt;em&gt;いちばんテツモパーク&lt;/em&gt;という&lt;br&gt;
蒸気・電気・トロリーの軌道が走る巨大なジオラマ。&lt;br&gt;
トーマスギャラリーも開催されていたので、トーマスの仲間達も走っていましたー。&lt;/p&gt;

&lt;p&gt;&lt;img alt="原鉄道模型博物館" src="/images/./2016/0511_holiday/20160511_thomas.jpg" /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;
また連休中のイベントとして、博物館の半券を見せると、ミニ機関車？に乗れることができ、ここも息子のお気に入りでした。&lt;br&gt;
が、10メートルあるかないかくらいの直線線路を往復する、といったほんとにちょっとした乗り物でした。&lt;/p&gt;

&lt;p&gt;このトーマスのイベントは5月末まで開催されているそうです。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h1 id="おわりに"&gt;おわりに&lt;/h1&gt;

&lt;hr&gt;

&lt;p&gt;原鉄道模型博物館、トーマスイベントがやっていたので、&lt;br&gt;
行ってみましたが多分イベントがなければ２歳の息子には少しレベルが&lt;br&gt;
高すぎるかもしれません。。&lt;/p&gt;

&lt;p&gt;巨大ジオラマはじーっと見ていましたが、その他の模型はほぼスルーで走り去って行きました。というよりトーマスにむかって一直線でした(笑)&lt;/p&gt;

&lt;p&gt;電車が好きな子、というよりは鉄道模型が好きな大人、&lt;br&gt;
もうすこし大きい子供向けの施設なのかな、という印象でした。&lt;/p&gt;

&lt;p&gt;この他には別日でみなとみらいでお買い物したり、&lt;br&gt;
臨港パークでお散歩したりしていました。&lt;br&gt;
そしてGW中盤に息子は発熱、３日間ほど引きこもりでした・・・。&lt;/p&gt;

&lt;p&gt;&lt;img alt="臨港パーク" src="/images/./2016/0511_holiday/20160511_myson.jpg" /&gt;&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;p&gt;次は夏休みですね！どこにいこうかな〜。&lt;br&gt;
それまでお仕事がんばりましょう！！&lt;/p&gt;
</content>
  </entry>
</feed>
