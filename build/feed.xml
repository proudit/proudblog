<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Blog Name</title>
  <subtitle>Blog subtitle</subtitle>
  <id>http://blog.url.com/</id>
  <link href="http://blog.url.com/"/>
  <link href="http://blog.url.com/feed.xml" rel="self"/>
  <updated>2016-07-19T09:00:00+09:00</updated>
  <author>
    <name>Blog Author</name>
  </author>
  <entry>
    <title>AmazonLinuxにswapを作成する。</title>
    <link rel="alternate" href="http://blog.url.com/2016/07/19/how-to-make-a-swap-for-the-amazonlinux.html"/>
    <id>http://blog.url.com/2016/07/19/how-to-make-a-swap-for-the-amazonlinux.html</id>
    <published>2016-07-19T09:00:00+09:00</published>
    <updated>2016-07-19T10:57:21+09:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;h1 id="はじめに"&gt;はじめに&lt;/h1&gt;

&lt;p&gt;&lt;em&gt;Amazon Linux&lt;/em&gt;に2048MBのスワップを作成する作業を行います。&lt;/p&gt;

&lt;p&gt;その前にまずスワップとは、&lt;br&gt;
| スワップとは、ハードディスクなどの補助記憶装置を利用して使用可能なメモリ容量を増やすOSの機能の一つ。－ IT用語辞典(e-Words)より抜粋&lt;/p&gt;

&lt;p&gt;つまり今回で言うとEBSボリュームの一部をメモリとして扱えるようにした領域のことです。&lt;/p&gt;

&lt;p&gt;ということで作成してみます。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h1 id="事前確認"&gt;事前確認&lt;/h1&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ free -m
             total       used       free     shared    buffers     cached
Mem:           491        353        138          0          8        294
-/+ buffers/cache:         49        442
Swap:            0          0          0
&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ swapon -s
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h1 id="スワップ領域の作成"&gt;スワップ領域の作成&lt;/h1&gt;

&lt;p&gt;まず、&lt;code&gt;dd&lt;/code&gt;コマンドでスワップ用の領域を確保します。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ sudo dd if=/dev/zero of=/swapfile bs=1024 count=2048k
2097152+0 レコード入力
2097152+0 レコード出力
2147483648 バイト (2.1 GB) コピーされました、 32.0676 秒、 67.0 MB/秒
&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ sudo chmod 600 /swapfile 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;作成したら&lt;code&gt;mkswap&lt;/code&gt;でスワップを作成します。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ sudo mkswap /swapfile 
mkswap: /swapfile: warning: wiping old swap signature.
スワップ空間バージョン1を設定します、サイズ = 2097148 KiB
ラベルはありません, UUID=88c217dc-d8e0-42f9-b2bc-eb814505b5e3
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;以上で作成が完了しました。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h1 id="スワップ領域の有効化"&gt;スワップ領域の有効化&lt;/h1&gt;

&lt;p&gt;&lt;code&gt;mkswap&lt;/code&gt;で作成しただけでは利用できません。スワップの作成ができたら&lt;code&gt;swapon&lt;/code&gt;でスワップ領域の有効化をします。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ sudo swapon /swapfile 
&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ free -m
             total       used       free     shared    buffers     cached
Mem:           491        485          6          0          4        421
-/+ buffers/cache:         59        432
Swap:         2047          0       2047
&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ swapon -s
Filename                Type        Size    Used    Priority
/swapfile                               file    2097148 0   -1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h1 id="スワップ領域の無効化"&gt;スワップ領域の無効化&lt;/h1&gt;

&lt;p&gt;スワップ領域の有効化は&lt;code&gt;swapon&lt;/code&gt;ですが、無効化は&lt;code&gt;swapoff&lt;/code&gt;で行います。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ sudo swapoff /swapfile 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h1 id="自動マウント設定"&gt;自動マウント設定&lt;/h1&gt;

&lt;p&gt;毎回コマンドでスワップを有効化するのは大変ですので、起動時に自動マウントするように&lt;em&gt;/etc/fstab&lt;/em&gt;に追記しておきます。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ sudo vi /etc/fstab
/swapfile   none        swap    defaults        0   0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;参考：&lt;a href="https://wiki.archlinuxjp.org/index.php/Fstab"&gt;Arch Linux - fstab&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;以上で完了です。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h1 id="おわりに"&gt;おわりに&lt;/h1&gt;

&lt;p&gt;かつての物理サーバでは、コストや仕様などの理由で利用出来るメモリに制限がありました。&lt;br&gt;
ただ、今ではクラウドを利用することによって&lt;strong&gt;swapを作成するならそれ以上にメモリを積む&lt;/strong&gt;であったり、&lt;strong&gt;一台あたりのパワーを求めるよりスケールアウト&lt;/strong&gt;という発想の方が効率的になってきたこともありswapの利用する場面が少なくなっています。&lt;br&gt;
とはいえ、&lt;strong&gt;いざという時のswap&lt;/strong&gt;はあっても損じゃないかなと個人的には思います。&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>CentOS HVM方式のルートボリュームを拡張する。</title>
    <link rel="alternate" href="http://blog.url.com/2016/07/11/to-expand-the-root-volume-of-centos-hvm-system.html"/>
    <id>http://blog.url.com/2016/07/11/to-expand-the-root-volume-of-centos-hvm-system.html</id>
    <published>2016-07-11T09:00:00+09:00</published>
    <updated>2016-07-19T10:39:43+09:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;h1 id="はじめに"&gt;はじめに&lt;/h1&gt;

&lt;p&gt;AWS Marketplaceにある&lt;strong&gt;「CentOS 6 (x86_64) - with Updates HVM」&lt;/strong&gt;を利用してインスタンスを作成する際、インスタンス作成時の「ストレージの追加」でルートボリュームを増やしたとしてもOSから見えるボリュームは変わりません。&lt;/p&gt;

&lt;p&gt;今回、ルートボリュームサイズを30GiBに拡張したいと思います。&lt;br&gt;
&lt;img alt="2016-06-20.png" src="https://qiita-image-store.s3.amazonaws.com/0/82090/644e1a43-3062-087f-7e9f-41cbab1b9833.png" /&gt;&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ df -h
Filesystem      Size  Used Avail Use% Mounted on
/dev/xvda1      7.8G  666M  6.7G   9% /
tmpfs           498M     0  498M   0% /dev/shm
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ただ、アタッチされているボリュームサイズについて確認してみると、&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ lsblk 
NAME    MAJ:MIN RM SIZE RO TYPE MOUNTPOINT
xvda    202:0    0  30G  0 disk 
└─xvda1 202:1    0   8G  0 part /
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;割り当てられてはいるけどパーティションの拡張ができていない状態のようです。&lt;br&gt;
AMIがHVM方式のを選択すると、このように自動的に拡張されない場合があるようです。&lt;/p&gt;

&lt;blockquote&gt;
&lt;hr&gt;

&lt;h2 id="hvmとは"&gt;HVMとは&lt;/h2&gt;

&lt;p&gt;HVMとは「Hardware-assited VM」の略で、日本語では完全仮想化と言われています。&lt;br&gt;
EC2ユーザーガイドの説明には以下のように記載されています。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;HVM AMI&lt;/strong&gt;&lt;br&gt;
HVM AMI は、完全に仮想化された一連のハードウェアを備えており、イメージのルートブロックデバイスのマスターブートレコードを実行することによって起動します。この仮想化タイプでは、ベアメタルハードウェア上でオペレーティングシステムが動作するのと同様に、修正を行わなくても仮想マシン上でオペレーティングシステムを直接実行することができます。Amazon EC2 ホストシステムでは、ゲストに提供されている基盤となるハードウェアの一部またはすべてがエミュレートされます。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr&gt;
&lt;/blockquote&gt;

&lt;p&gt;ということでパーティションの拡張をしたいと思います。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h1 id="準備"&gt;準備&lt;/h1&gt;

&lt;p&gt;まずはじめに、&lt;em&gt;dracut-modules-growroot&lt;/em&gt;と&lt;em&gt;cloud-utils-growpart&lt;/em&gt;この２つのパッケージをインストールします。&lt;/p&gt;

&lt;p&gt;ただ、これらのパッケージはデフォルトのリポジトリからは取得できないのでリポジトリを追加します。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ sudo yum install wget

$ wget http://dl.fedoraproject.org/pub/epel/6/x86_64/epel-release-6-8.noarch.rpm

$ sudo rpm -i epel-release-6-8.noarch.rpm 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ここでは&lt;code&gt;wget&lt;/code&gt;コマンドがインストールされていなかったので、初めにインストールしています。&lt;/p&gt;

&lt;p&gt;それでは今回の作業に必要なパッケージをインストールします。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ sudo yum install dracut-modules-growroot

・・・省略・・・
Installed:
  dracut-modules-growroot.noarch 0:0.20-2.el6                                                                       

Dependency Installed:
  cloud-utils-growpart.x86_64 0:0.27-10.el6                                                                         

Complete!

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;以上で準備完了です。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h1 id="拡張"&gt;拡張&lt;/h1&gt;

&lt;p&gt;それでは拡張作業を行います。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ sudo dracut --force --add growroot /boot/initramfs-$(uname -r).img
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ここで行っているのは&lt;em&gt;--add&lt;/em&gt;オプションを使って&lt;em&gt;initramfs-2.6.32-573.18.1.el6.x86_64.img&lt;/em&gt;のイメージファイルにgrowrootモジュールを追加しています。&lt;br&gt;
2.6.32-573.18.1.el6.x86_64は&lt;code&gt;uname -r&lt;/code&gt;コマンドで取得される値です。&lt;/p&gt;

&lt;p&gt;少し間がありプロンプトが返ってきたら完了です。それではサーバーを再起動します。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ sudo reboot
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;hr&gt;

&lt;h2 id="dracutとは"&gt;dracutとは&lt;/h2&gt;

&lt;p&gt;dracutなんて普段見慣れない方が多いかと思います。ということで&lt;a href="https://dracut.wiki.kernel.org/index.php/Main_Page"&gt;Dracut Wiki（by The Linux Kernel Organization）&lt;/a&gt;によると、、、&lt;/p&gt;

&lt;blockquote&gt;
&lt;h2 id="dracut"&gt;dracut&lt;/h2&gt;

&lt;p&gt;dracut is an event driven initramfs infrastructure. dracut (the tool) is used to create an initramfs image by copying tools and files from an installed system and combining it with the dracut framework, usually found in /usr/lib/dracut/modules.d. .....&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;つまりは「initramfsを作成するコマンド」みたいです。（かなりざっくりですみません。。。）&lt;br&gt;
今回の場合&lt;em&gt;--add&lt;/em&gt;オプションでdraucutモジュールのgrowrootをイメージに追加しています。&lt;br&gt;
&lt;em&gt;--force&lt;/em&gt;オプションはすでに存在しているinitramfsに対して上書きする場合に指定します。&lt;/p&gt;

&lt;p&gt;その他にdracutについて知りたい場合は以下を参考にしてください。&lt;br&gt;
・&lt;a href="http://linux.die.net/man/8/dracut"&gt;dracut(8) - Linux man page&lt;/a&gt;：コマンドオプションについて色々説明しています。&lt;br&gt;
・&lt;a href="https://www.kernel.org/pub/linux/utils/boot/dracut/dracut.html"&gt;dracut - www.kernel.org&lt;/a&gt;：利用例などについて説明しています。&lt;/p&gt;

&lt;hr&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h1 id="確認"&gt;確認&lt;/h1&gt;

&lt;p&gt;それではボリュームを確認してみます。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ df -h
Filesystem      Size  Used Avail Use% Mounted on
/dev/xvda1      985G  735M  934G   1% /
tmpfs           498M     0  498M   0% /dev/shm
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;OSから無事認識されているのが確認できます。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ lsblk 
NAME    MAJ:MIN RM  SIZE RO TYPE MOUNTPOINT
xvda    202:0    0 1000G  0 disk 
└─xvda1 202:1    0 1000G  0 part /
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;lsblk&lt;/code&gt;コマンドでもパーティションが割り当てたボリュームまで拡張されているのが確認できました。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h1 id="おわりに"&gt;おわりに&lt;/h1&gt;

&lt;p&gt;今回の拡張作業で&lt;code&gt;dracut&lt;/code&gt;コマンドを利用していますが、実際は&lt;code&gt;dracut&lt;/code&gt;コマンドが拡張するコマンドではありません。&lt;br&gt;
ボリュームの拡張は&lt;code&gt;growpart&lt;/code&gt;によって行われています。それを&lt;code&gt;yum&lt;/code&gt;でインストールし&lt;code&gt;dracut&lt;/code&gt;で追加した&lt;code&gt;growroot&lt;/code&gt;をイメージに追加することで、起動時に&lt;code&gt;growpart&lt;/code&gt;が実行され、パーティションが割り当てたボリュームまで拡張されます。&lt;br&gt;
また、&lt;code&gt;growpart&lt;/code&gt;コマンドも今回はインストールされていなかったのですが、&lt;code&gt;yum&lt;/code&gt;を使うと&lt;em&gt;dracut-modules-growroot&lt;/em&gt;の依存関係で&lt;em&gt;cloud-utils-growpart&lt;/em&gt;もインストールしてくれるため利用できるようになります。&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>ミネラル甘酒講座</title>
    <link rel="alternate" href="http://blog.url.com/2016/07/08/amazakekouza.html"/>
    <id>http://blog.url.com/2016/07/08/amazakekouza.html</id>
    <published>2016-07-08T09:00:00+09:00</published>
    <updated>2016-07-11T10:39:41+09:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;h1 id="ミネラル甘酒講座を開催しました！"&gt;ミネラル甘酒講座を開催しました！&lt;/h1&gt;

&lt;hr&gt;

&lt;p&gt;先日、醸せ師あき先生によるミネラル甘酒講座が開催されました！&lt;br&gt;
沢山の方にお越し頂き大盛況の講座でした。&lt;br&gt;
皆様ありがとうございました。&lt;/p&gt;

&lt;p&gt;&lt;img alt="甘酒講座" src="/images/./2016/0708_amazakekouza/amazakekouza7.jpg" /&gt;&lt;br&gt;
&lt;img alt="甘酒講座" src="/images/./2016/0708_amazakekouza/amazakekouza4.jpg" /&gt;&lt;/p&gt;

&lt;p&gt;甘酒と言っても、よくお正月に神社で配られている酒粕を使った甘酒ではなく、&lt;br&gt;
米麹を使った甘酒です！&lt;br&gt;
もちろんアルコールは入っていないので、小さなお子様でも大丈夫。&lt;/p&gt;

&lt;p&gt;私は以前、甘酒とフルーツを合わせたフルーツ甘酒を頂いたことがあるのですが、&lt;br&gt;
本当においしかったです！&lt;/p&gt;

&lt;p&gt;今回は試食として、&lt;br&gt;
・３種の甘酒シャーベット&lt;br&gt;
・ノンシュガーの発酵スイートポテト&lt;br&gt;
をあき先生がご用意してくださったそうです。&lt;br&gt;
とっても美味しそうですね〜〜♪&lt;/p&gt;

&lt;p&gt;わたしも参加したかったです...(涙)&lt;/p&gt;

&lt;p&gt;&lt;img alt="甘酒講座" src="/images/./2016/0708_amazakekouza/amazakekouza5.jpg" /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img alt="甘酒講座" src="/images/./2016/0708_amazakekouza/amazakekouza3.jpg" /&gt;&lt;/p&gt;

&lt;p&gt;次回は9月にお味噌の講座を開催予定です！&lt;br&gt;
気になる方は是非お問い合わせください〜！&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>13本の薬箱講座</title>
    <link rel="alternate" href="http://blog.url.com/2016/07/06/kusuribako.html"/>
    <id>http://blog.url.com/2016/07/06/kusuribako.html</id>
    <published>2016-07-06T09:00:00+09:00</published>
    <updated>2016-07-11T10:39:41+09:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;h1 id="植物エッセンスの薬箱®13本講座"&gt;植物エッセンスの薬箱®13本講座&lt;/h1&gt;

&lt;hr&gt;

&lt;p&gt;先日弊社新宿オフィスにて、あき先生による13本の薬箱講座が開催されました！&lt;/p&gt;

&lt;p&gt;&lt;img alt="薬箱講座" src="/images/./2016/0706_kusuribako/kusuribako_02.jpg" /&gt;&lt;/p&gt;

&lt;p&gt;利用するオイルはドテラ社のエッセンシャルオイル♪&lt;br&gt;
ドテラのエッセンシャルオイルはCPTG（認定純粋セラピー等級）の基準をクリアした、とても質の高いオイルです。&lt;br&gt;
だからこそ、香る、塗る、飲む色々な方法で活用できます！&lt;/p&gt;

&lt;p&gt;&lt;a href="http://www.doterraeveryday.jp/training/cptg/"&gt;CPTGとは&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;上記写真のようにドテラのオイルはたくさんあるのですが、&lt;br&gt;
このたくさんあるオイルの中でもこの講座では使いやすい13本のオイルについてご紹介しています。&lt;br&gt;
実際にオイルを香ってみたり、塗ってみたり、体験しながら学ぶことができるので、&lt;br&gt;
これからエッセンシャルオイル使ってみようかな？興味がある、という方にオススメの講座です。&lt;/p&gt;

&lt;p&gt;また自分でお好きな香りを選んで、香るクリームも作れちゃいます！&lt;br&gt;
たくさんのエッセンシャルオイルの中から自分好みの香りを作り出す...とっても楽しいですよ〜♪&lt;/p&gt;

&lt;p&gt;&lt;img alt="薬箱講座" src="/images/./2016/0706_kusuribako/kusuribako_0629_1.jpg" /&gt;&lt;br&gt;
&lt;img alt="薬箱講座" src="/images/./2016/0706_kusuribako/kusuribako_0629_2.jpg" /&gt;&lt;/p&gt;

&lt;p&gt;素敵な香りに癒されて、エッセンシャルオイルに魅了されてしまいます！&lt;br&gt;
今後も定期的に開催予定なので、気になる方はぜひお問い合わせ下さい！&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>【IDCFクラウド】s3cmdでオブジェクトストレージへアクセスする</title>
    <link rel="alternate" href="http://blog.url.com/2016/07/04/access-to-object-storage-by-s3cmd.html"/>
    <id>http://blog.url.com/2016/07/04/access-to-object-storage-by-s3cmd.html</id>
    <published>2016-07-04T09:00:00+09:00</published>
    <updated>2016-07-11T10:39:41+09:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;h1 id="はじめに"&gt;はじめに&lt;/h1&gt;

&lt;hr&gt;

&lt;p&gt;IDCFクラウドのオブジェクトストレージにコマンドでバケットを作成したりファイルをアップロードしたりするには&lt;code&gt;s3cmd&lt;/code&gt;コマンドで行えます。&lt;br&gt;
今回、その&lt;code&gt;s3cmd&lt;/code&gt;のインストールと簡単な操作(バケットの作成・削除)を行いたいと思います。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h1 id="s3cmdインストール"&gt;s3cmdインストール&lt;/h1&gt;

&lt;hr&gt;

&lt;p&gt;まずはじめに&lt;code&gt;s3cmd&lt;/code&gt;のインストールを行いたいと思います。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h2 id="macosの場合"&gt;MacOSの場合&lt;/h2&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ sudo brew install s3cmd
==&amp;gt; Downloading https://homebrew.bintray.com/bottles/s3cmd-1.6.0.el_capitan.bottle.tar.gz
######################################################################## 100.0%
==&amp;gt; Pouring s3cmd-1.6.0.el_capitan.bottle.tar.gz
🍺  /usr/local/Cellar/s3cmd/1.6.0: 55 files, 738.3K
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h2 id="ubuntuの場合"&gt;Ubuntuの場合&lt;/h2&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ sudo  apt-get install s3cmd
Reading package lists... Done
Building dependency tree
Reading state information... Done
The following NEW packages will be installed:
  s3cmd
0 upgraded, 1 newly installed, 0 to remove and 202 not upgraded.
Need to get 67.6 kB of archives.
After this operation, 295 kB of additional disk space will be used.
Get:1 http://jp.archive.ubuntu.com/ubuntu/ trusty/universe s3cmd all 1.1.0~beta3-2 [67.6 kB]
Fetched 67.6 kB in 0s (1,018 kB/s)
Selecting previously unselected package s3cmd.
(Reading database ... 91433 files and directories currently installed.)
Preparing to unpack .../s3cmd_1.1.0~beta3-2_all.deb ...
Unpacking s3cmd (1.1.0~beta3-2) ...
Processing triggers for man-db (2.6.7.1-1) ...
Setting up s3cmd (1.1.0~beta3-2) ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h2 id="確認"&gt;確認&lt;/h2&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ s3cmd --version
s3cmd version 1.6.0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;インストールが確認できました。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h1 id=".s3cfgの作成"&gt;.s3cfgの作成&lt;/h1&gt;

&lt;hr&gt;

&lt;p&gt;&lt;code&gt;s3cmd&lt;/code&gt;コマンドのインストールができたので、次は設定ファイルの&lt;code&gt;.s3cfg&lt;/code&gt;を作成します。&lt;br&gt;
作成は以下のコマンドで行います。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ s3cmd --configure

Enter new values or accept defaults in brackets with Enter.
Refer to user manual for detailed description of all options.

Access key and Secret key are your identifiers for Amazon S3
Access Key: ********************
Secret Key: ****************************************

Encryption password is used to protect your files from reading
by unauthorized persons while in transfer to S3
Encryption password:
Path to GPG program [/usr/bin/gpg]:

When using secure HTTPS protocol all communication with Amazon S3
servers is protected from 3rd party eavesdropping. This method is
slower than plain HTTP and can't be used if you're behind a proxy
Use HTTPS protocol [No]:

On some networks all internet access must go through a HTTP proxy.
Try setting it here if you can't conect to S3 directly
HTTP Proxy server name:

New settings:
  Access Key: ********************
  Secret Key: ****************************************
  Encryption password:
  Path to GPG program: /usr/bin/gpg
  Use HTTPS protocol: False
  HTTP Proxy server name:
  HTTP Proxy server port: 0

Test access with supplied credentials? [Y/n] n

Save settings? [y/N] y
Configuration saved to '/root/.s3cfg'
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h1 id="設定の修正"&gt;設定の修正&lt;/h1&gt;

&lt;hr&gt;

&lt;p&gt;&lt;code&gt;.s3cfg&lt;/code&gt;の&lt;em&gt;host_base&lt;/em&gt;と&lt;em&gt;host_bucket&lt;/em&gt;の値をIDCFのエンドポイントに変更します。&lt;br&gt;
エンドポイントは&lt;br&gt;
「IDCF管理画面 &amp;gt; オブジェクトストレージ &amp;gt; APIユーザー」で対象となるAPIユーザー名をクリックすると確認できます。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ cd ~/
$ vi .s3cfg
&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[変更前]
host_base = s3.amazonaws.com
host_bucket = %(bucket)s.s3.amazonaws.com

[変更後]
host_base = ds.jp-east.idcfcloud.com
host_bucket = %(bucket)s.ds.jp-east.idcfcloud.com
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h1 id="バケット参照"&gt;バケット参照&lt;/h1&gt;

&lt;hr&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ s3cmd ls
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;はじめはバケットがないため、コマンドを実行しても何も返ってきません。&lt;br&gt;
ただ、もし&lt;code&gt;.s3cfg&lt;/code&gt;を変更せずにバケット参照すると以下のように&lt;em&gt;ERROR&lt;/em&gt;となります。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ s3cmd ls
ERROR: S3 error: 403 (InvalidAccessKeyId): The AWS Access Key Id you provided does not exist in our records.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h1 id="バケットの作成"&gt;バケットの作成&lt;/h1&gt;

&lt;hr&gt;

&lt;p&gt;ということで、バケットを作成してみましょう。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ s3cmd mb s3://proudit-test
Bucket 's3://proudit-test/' created
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;再度バケットを参照してみるとちゃんと作成できているのが確認できます。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ s3cmd ls
2016-04-13 05:01  s3://proudit-test
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h1 id="バケットの削除"&gt;バケットの削除&lt;/h1&gt;

&lt;hr&gt;

&lt;p&gt;とりあえず今回は作成まで確認できたので削除します。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ s3cmd rb s3://proudit-test
Bucket 's3://proudit-test/' removed
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;参照すると何も返ってこないので削除されたのが確認できます。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ s3cmd ls
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h1 id="おわりに"&gt;おわりに&lt;/h1&gt;

&lt;hr&gt;

&lt;p&gt;今回、オブジェクトストレージへアクセスしオブジェクトの作成や削除といった一般的な操作を行いました。&lt;br&gt;
ですが、もしプライベートコネクトを利用してオブジェクトストレージへアクセスを行いたい場合、プライベートコネクトの申請やルーティングの追加、&lt;code&gt;.s3cfg&lt;/code&gt;の修正などが必要になるので注意してください。&lt;br&gt;
そこらへんの設定についてはまた時間があるときに紹介しようと思います。&lt;/p&gt;

&lt;p&gt;以上で完了です。&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>OGPの設定</title>
    <link rel="alternate" href="http://blog.url.com/2016/06/29/facebookSARE2.html"/>
    <id>http://blog.url.com/2016/06/29/facebookSARE2.html</id>
    <published>2016-06-29T09:00:00+09:00</published>
    <updated>2016-07-01T16:37:39+09:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;h1 id="ogpとは&amp;amp;設定方法"&gt;OGPとは&amp;amp;設定方法&lt;/h1&gt;

&lt;hr&gt;

&lt;p&gt;前回の記事で、facebookシェア機能がとりあえず実行できるようになりましたが、シェアする際のOGP設定がまだできていないため、&lt;br&gt;
シェアをするときに出てくる情報が、こちらの意図しないものになっています。&lt;/p&gt;

&lt;p&gt;OGP設定前↓&lt;/p&gt;

&lt;p&gt;&lt;img alt="OGP設定" src="/images/./2016/0629_facebookSARE_2/OGP_1.png" /&gt;&lt;/p&gt;

&lt;h2 id="ogpとは？"&gt;OGPとは？&lt;/h2&gt;

&lt;p&gt;OGPとはOpen Graph protocolの略で、「このウェブページは何について書かれていいるのか」という情報を、プログラムから読める形で HTMLに付加する記述方法のこと。&lt;br&gt;
このOGPの設定がされていないと、せっかくシェアしてもらった記事も意図しない内容や画像でアップされてしまい、せっかくシェアしてもらってもきちんとした情報が伝わらないので効果が薄くなってしまいます...&lt;/p&gt;

&lt;p&gt;OGPの設定をしない場合、facebookのシステムが勝手に判断した内容を表示してしまいます。&lt;/p&gt;

&lt;p&gt;設定の仕方は、HTMLファイルにMETAタグを追記するだけ。&lt;/p&gt;

&lt;p&gt;例えば以下のような感じ。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;meta property=”og:title” content=”記事のタイトル” /&amp;gt;
&amp;lt;meta property=”og:description” content=”記事の説明” /&amp;gt;
&amp;lt;meta property=”og:url” content=”記事のURL” /&amp;gt;
&amp;lt;meta property=”og:image” content=”画像のURL” /&amp;gt;
&amp;lt;meta property=”og:site_name” content=”サイトのタイトル” /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id="注意するべき画像の仕様"&gt;注意するべき画像の仕様&lt;/h2&gt;

&lt;p&gt;OGPに設定する画像についてはいくつかおさえておきたい仕様があります。&lt;br&gt;
適切な画像を指定してより目にとまりやすくなるようにしたいですよね。&lt;br&gt;
　&lt;br&gt;
・画像サイズ&lt;br&gt;
　推奨サイズ　1200×630ピクセル&lt;br&gt;
　最低でも600×315ピクセル必要&lt;/p&gt;

&lt;p&gt;・縦横比率&lt;br&gt;
　1.91：1&lt;/p&gt;

&lt;p&gt;・画像の指定は相対パスではなく絶対パスで記述&lt;/p&gt;

&lt;p&gt;指定した画像がどのように表示されるのか、事前に確認することもできます。&lt;/p&gt;

&lt;p&gt;OGP画像シュミレータ&lt;br&gt;
&lt;a href="http://ogimage.tsmallfield.com/"&gt;http://ogimage.tsmallfield.com/&lt;/a&gt;&lt;/p&gt;

&lt;h1 id="ogpのキャッシュをクリアする"&gt;OGPのキャッシュをクリアする&lt;/h1&gt;

&lt;p&gt;METAタグを追加してもなぜか、情報が更新されません。&lt;/p&gt;

&lt;p&gt;OGPの設定がされているかfacebookのデバッガーで確認をしてみます。&lt;/p&gt;

&lt;p&gt;&lt;a href="https://developers.facebook.com/tools/debug/"&gt;https://developers.facebook.com/tools/debug/&lt;/a&gt;&lt;br&gt;
&lt;img alt="OGP設定" src="/images/./2016/0629_facebookSARE_2/OGP_2.png" /&gt;&lt;/p&gt;

&lt;p&gt;情報更新されていないです...タグの設定ミスかな�...なんて思いながら、調べてみると&lt;br&gt;
facebookのデバッガーからキャッシュをクリアすることができるそうで、&lt;br&gt;
早速やってみました！&lt;/p&gt;

&lt;p&gt;Open Graph Object Debugger&lt;br&gt;
&lt;a href="https://developers.facebook.com/tools/debug/og/object/"&gt;https://developers.facebook.com/tools/debug/og/object/&lt;/a&gt;&lt;br&gt;
&lt;img alt="OGP設定" src="/images/./2016/0629_facebookSARE_2/OGP_3.png" /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img alt="OGP設定" src="/images/./2016/0629_facebookSARE_2/OGP_5.png" /&gt;&lt;br&gt;
ちゃんと画像も指定したものが表示されていて、サイト名もPloudBlogの表示が！&lt;br&gt;
実際にブログサイトからシェアしてみると...&lt;/p&gt;

&lt;p&gt;&lt;img alt="OGP設定" src="/images/./2016/0629_facebookSARE_2/OGP_4.png" /&gt;&lt;/p&gt;

&lt;p&gt;こちらも情報が更新されていますね。&lt;br&gt;
ただ、、一部おかしなところがあります...(汗)&lt;/p&gt;

&lt;p&gt;この部分は、記事ごとに内容が変わるように設定しかったので、変数を入れてみたのですが、きちんとデータの取得ができていないですね。&lt;/p&gt;

&lt;p&gt;多くのサイトではおそらくPHPを使ってデータ取得の設定をしているようですが、、JavaScriptあたりで同じことができないか今模索中です。。&lt;/p&gt;

&lt;p&gt;wordpressはプラグインでこう言った設定ができるようです&lt;/p&gt;

&lt;p&gt;ここは引き続き調べていきます！&lt;br&gt;
facebookの設定けっこう難しいです...&lt;/p&gt;
</content>
  </entry>
</feed>
