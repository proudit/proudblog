<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Blog Name</title>
  <subtitle>Blog subtitle</subtitle>
  <id>http://blog.url.com/</id>
  <link href="http://blog.url.com/"/>
  <link href="http://blog.url.com/feed.xml" rel="self"/>
  <updated>2016-06-14T09:00:00+09:00</updated>
  <author>
    <name>Blog Author</name>
  </author>
  <entry>
    <title>【IDCFクラウド】cloudstack-apiで仮想マシンを作成する。</title>
    <link rel="alternate" href="http://blog.url.com/2016/06/14/make-virtual-machine-by-cloudstack-api.html"/>
    <id>http://blog.url.com/2016/06/14/make-virtual-machine-by-cloudstack-api.html</id>
    <published>2016-06-14T09:00:00+09:00</published>
    <updated>2016-06-14T12:42:54+09:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;h1 id="はじめに"&gt;はじめに&lt;/h1&gt;

&lt;hr&gt;

&lt;p&gt;cloudstack-apiで仮想マシンの構築を行いたいと思います。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h2 id="基本情報"&gt;基本情報&lt;/h2&gt;

&lt;p&gt;ということで、今回は以下の情報をもとに仮想マシンのを作成を行います。&lt;/p&gt;

&lt;table&gt;&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;項目　　　　　　　&lt;/th&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;ゾーン　　　　　　　　　&lt;/td&gt;
&lt;td&gt;radian&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;インスタンス&lt;/td&gt;
&lt;td&gt;light.S1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;テンプレート&lt;/td&gt;
&lt;td&gt;Ubuntu Server 14.04 LTS 64-bit&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;IP&lt;/td&gt;
&lt;td&gt;10.13.0.50&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;所属グループ&lt;/td&gt;
&lt;td&gt;test&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ホスト名&lt;/td&gt;
&lt;td&gt;test-name&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ディスプレイ名&lt;/td&gt;
&lt;td&gt;create-test&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;キーペア&lt;/td&gt;
&lt;td&gt;hogehoge&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h1 id="事前確認"&gt;事前確認&lt;/h1&gt;

&lt;hr&gt;

&lt;p&gt;仮想マシンを作成する前にまず、現在IDCFクラウドでの稼働状況を確認しておきたいと思います。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ cloudstack-api listVirtualMachines -t name
&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;no data found
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;現在、環境内には１台も仮想マシンが作成されていないため&lt;em&gt;no data found&lt;/em&gt;となっています。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h1 id="仮想マシンの作成"&gt;仮想マシンの作成&lt;/h1&gt;

&lt;hr&gt;

&lt;p&gt;それでは仮想マシンを作成しましょう。&lt;/p&gt;

&lt;p&gt;作成には&lt;code&gt;createInstanceGroup&lt;/code&gt;を利用します。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ cloudstack-api deployVirtualMachine \
--zoneid a53ff3d3-042b-4cbd-ad16-494bb8d33e06 \
--serviceofferingid e01a9f32-55c4-4c0d-9b7c-d49a3ccfd3f6 \
--templateid 6eee3f7d-2193-4df7-81d5-bc2169ac3380 \
--ipaddress 10.13.0.50 \
--name test-host \
--keypair hogehoge \
--displayname create-test \
--group test
&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
  "deployvirtualmachineresponse": {
    "id": "b1230e50-f75b-4343-8d6e-ca7a4efcf2b0",
    "jobid": "dee8c58d-069a-408a-98c3-03ea1e4e3c50"
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;今回指定したオプションについての説明は以下のとおりです。&lt;/p&gt;

&lt;table&gt;&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;オプション&lt;/th&gt;
&lt;th&gt;内容&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;--zoneid&lt;/td&gt;
&lt;td&gt;ゾーン環境ID&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;--serviceofferingid&lt;/td&gt;
&lt;td&gt;インスタンスID&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;--templateid&lt;/td&gt;
&lt;td&gt;テンプレートのID&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;--ipaddress&lt;/td&gt;
&lt;td&gt;IPアドレス&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;--name&lt;/td&gt;
&lt;td&gt;ホスト名&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;--keypair&lt;/td&gt;
&lt;td&gt;デフォルト(root)で利用するキーペア&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;--displayname&lt;/td&gt;
&lt;td&gt;コンソール画面で表示される名前&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;--group&lt;/td&gt;
&lt;td&gt;仮想マシンが所属するグループ&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

&lt;p&gt;簡単に説明すると、&lt;/p&gt;

&lt;p&gt;・&lt;em&gt;ipaddress&lt;/em&gt;オプションで仮想マシンに&lt;code&gt;10.13.0.50&lt;/code&gt;のIPアドレスを付与&lt;br&gt;
・SSHログインするために必要なデフォルトキーは&lt;code&gt;hogehoge&lt;/code&gt;を配置&lt;br&gt;
・&lt;em&gt;name&lt;/em&gt;オプションでSSHログインした際に表示されるホスト名を&lt;code&gt;test-host&lt;/code&gt;に設定&lt;/p&gt;

&lt;p&gt;といった内容になります。&lt;/p&gt;

&lt;p&gt;また、仮想マシンに直接影響はありませんが、&lt;/p&gt;

&lt;p&gt;・&lt;em&gt;group&lt;/em&gt;オプションで仮想マシンを&lt;code&gt;test&lt;/code&gt;にグルーピング&lt;br&gt;
・&lt;em&gt;diplayname&lt;/em&gt;オプションでコンソール画面での表示を&lt;code&gt;create-test&lt;/code&gt;に設定&lt;/p&gt;

&lt;p&gt;を行っています。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h1 id="確認"&gt;確認&lt;/h1&gt;

&lt;hr&gt;

&lt;p&gt;確認はコンソールおよびコマンドでも可能です。&lt;/p&gt;

&lt;h3 id="コンソール画面で確認"&gt;コンソール画面で確認&lt;/h3&gt;

&lt;p&gt;&lt;img alt="cloudstack-api_createvm01.png" src="https://qiita-image-store.s3.amazonaws.com/0/82090/39962077-6be0-39ff-bba7-87d00e4823b7.png" /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h3 id="コマンドで確認"&gt;コマンドで確認&lt;/h3&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ cloudstack-api listVirtualMachines -t name,keypair,displayname,group
&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;+-----------+----------+-------------+-------+
|    name   | keypair  | displayname | group |
+-----------+----------+-------------+-------+
| test-host | hogehoge | create-test | test  |
+-----------+----------+-------------+-------+
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h1 id="おわりに"&gt;おわりに&lt;/h1&gt;

&lt;hr&gt;

&lt;p&gt;今回、仮想マシンを作成しましたが、このままではグローバルIPが無いため外部との通信ができません。&lt;br&gt;
次回は仮想マシンをグローバルIPに付与するところをcloudstack-apiコマンドで行いたいと思います。&lt;br&gt;
&lt;a href="http://qiita.com/kooohei/items/524c1d5b4e541c695c06"&gt;&amp;gt;&amp;gt;【IDCFクラウド】cloudstack-apiで仮想マシンにパブリックIPを付与する。&lt;/a&gt;&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>ミネラル醤(ひしお)講座</title>
    <link rel="alternate" href="http://blog.url.com/2016/06/09/hisio-seminer.html"/>
    <id>http://blog.url.com/2016/06/09/hisio-seminer.html</id>
    <published>2016-06-09T09:00:00+09:00</published>
    <updated>2016-06-14T12:33:23+09:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;h1 id="醤(ひしお)講座を開催しました！"&gt;醤(ひしお)講座を開催しました！&lt;/h1&gt;

&lt;hr&gt;

&lt;p&gt;講師は弊社COOでもあり醸せ師のあき先生！！&lt;/p&gt;

&lt;p&gt;わたしは数ヶ月前に受講済みなのですが、&lt;br&gt;
さらに知識を深めるべく参加させて頂きました。&lt;/p&gt;

&lt;p&gt;醤は味噌と醤油の原型ともいえる、発酵食の基礎のようなもの。&lt;br&gt;
火を入れずそのまま使えば醤油の味、火を通せば味噌の味！&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;p&gt;醤の歴史からはじまり、麹のお話、醤の活用法、&lt;br&gt;
などなど盛りだくさん！興味深いお話に皆さん聞き入っていました。&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;p&gt;そして最後はお待ちかねの醤づくり！&lt;br&gt;
完成までは２週間かかるので、それぞれお持ち帰り頂き、&lt;br&gt;
お家で引き続き醤さんを育てて頂きます！完成がたのしみですね！&lt;br&gt;
今回材料の中にドテラ社のミネラルを加えました。&lt;br&gt;
とっても贅沢です！&lt;br&gt;
1日たってみて、前回に比べ醤の成長具合が早い気がしています。&lt;br&gt;
やはりミネラルの力なのでしょうか。&lt;/p&gt;

&lt;p&gt;&lt;img alt="醤講座" src="/images/./2016/0610_hisio_seminar/hisio.jpeg" /&gt;&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;p&gt;また皆さんが他に気にされていたのが普段使う調味料について。&lt;br&gt;
お醤油、みりん、お酒、塩、砂糖...etc&lt;/p&gt;

&lt;p&gt;日常的に使うものだからこそ、ちゃんとしたものを使いたい&lt;br&gt;
という思いを皆さん持たれているようでした。&lt;br&gt;
&lt;br&gt;&lt;br&gt;
食は私たちの生活の中で一番基本となるもの。&lt;br&gt;
健康にいい！！という食品や情報があふれている世の中で、&lt;br&gt;
自分にとって家族にとって何が一番有益であるのか、&lt;br&gt;
情報を選択する上でしっかりとした情報を得ることは&lt;br&gt;
とても大切なこと。&lt;/p&gt;

&lt;p&gt;ご興味ある方は是非一度弊社までお問い合わせください！&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>子供乗せ自転車を購入！</title>
    <link rel="alternate" href="http://blog.url.com/2016/06/07/bicycle.html"/>
    <id>http://blog.url.com/2016/06/07/bicycle.html</id>
    <published>2016-06-07T09:00:00+09:00</published>
    <updated>2016-06-14T12:33:23+09:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;h1 id="はじめに"&gt;はじめに&lt;/h1&gt;

&lt;hr&gt;

&lt;p&gt;最近、子供乗せ用の電動自転車を購入しました！&lt;br&gt;
普段から保育園へは歩き＆抱っこで行っているんですが、近距離とは言え、&lt;br&gt;
坂が多いのでけっこうキツイんです…&lt;br&gt;
子供も大きくなって抱っこする手も限界。&lt;br&gt;
歩くといってもまだまだ寄り道も多くて時間がかかる。&lt;/p&gt;

&lt;p&gt;と言うことで購入に踏み切りました。&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h1 id="車種選び"&gt;車種選び&lt;/h1&gt;

&lt;hr&gt;

&lt;h2 id="メーカーは？"&gt;メーカーは？&lt;/h2&gt;

&lt;p&gt;子供乗せとして販売されているメーカーは主に３つ！&lt;/p&gt;

&lt;p&gt;・Panasonic&lt;br&gt;
 ・BRIDGESTONE&lt;br&gt;
 ・YAMAHA&lt;/p&gt;

&lt;p&gt;実際見てみると、どのメーカーのものもデザイン性以外目立って変わりがないです(笑)&lt;br&gt;
自転車屋さんの店員さんにメーカーごとの違いを聞いてみるも、&lt;br&gt;
性能については大差ないですー。とのこと。&lt;/p&gt;

&lt;p&gt;特にYAMAHAとBRIDGESTONEはお互い部品供給し合っているので尚更。&lt;br&gt;
違いをあげるとすればデザイン性。&lt;br&gt;
性能については最初の漕ぎ出しがPanasonicが一番スムーズだ、というママの意見が多いとのこと。&lt;br&gt;
またメーカーというより商品によりますが、乗車適用身長というものがあるので身長が低め、&lt;br&gt;
という方はその辺りの確認も必要。&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h2 id="前乗せか後ろ乗せか"&gt;前乗せか後ろ乗せか&lt;/h2&gt;

&lt;p&gt;これはその時のお子さんの成長にあったものを選ぶことになります。&lt;br&gt;
前乗せは15㌔まで。年齢としては1歳以上〜4歳未満。&lt;br&gt;
後ろ乗せは推奨2歳〜6歳未満。&lt;/p&gt;

&lt;p&gt;前乗せメリット・デメリット&lt;br&gt;
・普通ならかごが来る位置にシートが着いているので漕いでいる時ひざ　が当たることがない。&lt;br&gt;
・前乗せ専用シートはがっちりしていてホールド感がしっかりしている。&lt;br&gt;
・専用シートを使える期間が短い&lt;br&gt;
・かごがない&lt;/p&gt;

&lt;p&gt;後ろ乗せメリット・デメリット&lt;br&gt;
・前乗せする場合のオプションシートの作りが簡易的。&lt;br&gt;
・前乗せシートをつけると、漕いでいる時足があたる可能性あり。&lt;br&gt;
・かごがついている&lt;br&gt;
&lt;br&gt;&lt;br&gt;
息子は2歳2ヵ月体重12㌔なので前乗せ、後ろ乗せどちらでもいけます。&lt;br&gt;
ただ、前乗せだとすぐに後ろ乗せをオプションで追加&lt;br&gt;
することになりそう。。&lt;br&gt;
あとは今後2人目を考えるなら、下の子を乗せることになる前乗せシートが&lt;br&gt;
しっかりしてるものの方がいいかなー？と迷いました。&lt;br&gt;
が、散々悩んで後ろ乗せにしました！&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h2 id="車輪の大きさ(車高の高さ)"&gt;車輪の大きさ(車高の高さ)&lt;/h2&gt;

&lt;p&gt;車輪の大きさ、26cmと20cmがあります。&lt;br&gt;
ママが乗ってる子供乗せって街で見かけるものは大半車輪が小さく車高が低いですよね？&lt;br&gt;
車高が低い方が確かに子供の乗降が楽です！&lt;br&gt;
車輪が小さいからといって漕ぎにくさや進み具合に大差はないそう。&lt;/p&gt;

&lt;p&gt;ここは迷わず20cmに。&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h2 id="選んだ車種は"&gt;選んだ車種は&lt;/h2&gt;

&lt;p&gt;候補としては、&lt;br&gt;
Panasonicギュットアニーズ、ギュットミニDX、YAMAHAのpas baby。&lt;/p&gt;

&lt;p&gt;&lt;img alt="子供の乗せ自転車" src="/images/./2016/0607_bicycle/anyys.png" /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img alt="子供の乗せ自転車" src="/images/./2016/0607_bicycle/miniDX.png" /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img alt="子供の乗せ自転車" src="/images/./2016/0607_bicycle/pasbaby.png" /&gt;&lt;/p&gt;

&lt;p&gt;と言うことで我が家が選んだのは、&lt;br&gt;
Panasonicギュットアニーズ！&lt;/p&gt;

&lt;p&gt;ただこのギュットアニーズ、バッテリー容量が8Ahなんです。&lt;br&gt;
12Ahのバッテリーを積んでいる車種もあるので、小さいかなーと&lt;br&gt;
アニーズかpasbabyXLで悩みましたが、&lt;br&gt;
我が家の場合保育園の送迎と、近場への買い物くらいなので、8Ahで十分だろうということに。&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h2 id="迷っている人は店頭試乗もおすすめ"&gt;迷っている人は店頭試乗もおすすめ&lt;/h2&gt;

&lt;p&gt;購入店では試乗はしていないのですが、以前別のお店でPanasonicのギュットミニDXと&lt;br&gt;
BRIDGESTONEのbikkeに試乗しました。&lt;br&gt;
この時のお店の人もPanasonicの方が漕ぎ出しのアシストがスムーズだと言っていましたが、&lt;br&gt;
乗ってみて確かに！と実感。&lt;br&gt;
試乗はいい検討材料になりますよ。アニーズは試乗してないですが(笑)&lt;br&gt;
迷っている人は試乗のできるお店に行ってみるといいと思います！&lt;/p&gt;

&lt;p&gt;うちの息子も一緒に試乗しましたが、意外にも全く泣かず、楽しかったようで&lt;br&gt;
『もう一回！』と降りてくれませんでしたー。&lt;br&gt;
　試乗をするとこんな風にお子さんの反応を見ることもできます。　&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h1 id="いざ購入へ-意外な盲点"&gt;いざ購入へ 意外な盲点&lt;/h1&gt;

&lt;hr&gt;

&lt;p&gt;いざお店で取り寄せ依頼！となったのですが、なんとメーカー在庫がない！！&lt;br&gt;
製造待ちになるので納期は8月頃になるとか、、&lt;br&gt;
第2希望としていたpasbabyXLについては9月納期、、&lt;/p&gt;

&lt;p&gt;電動自転車は毎年2月頃に新機種が発売されるそうで、やはり入園シーズンの3、4月頃が&lt;br&gt;
1番売れる時期だそうです。&lt;br&gt;
5月頃にはだんだん品薄になってくるのかもしれませんね。&lt;/p&gt;

&lt;p&gt;今後購入を検討される方は購入時期は早めがおすすめですよー。&lt;/p&gt;

&lt;p&gt;ネットではまだ在庫があるお店も多数ありましたが、ネットで自転車を購入するのも&lt;br&gt;
ちょっと抵抗があり、、近所の自転車屋さんの系列店にあったラ&lt;br&gt;
スト１台をなんとかゲット！！&lt;br&gt;
念願の電動自転車ーーー！&lt;br&gt;
実はまだ乗れてはいませんが、、今からとっても楽しみです。&lt;br&gt;
これで快適に保育園の通園ができるはず！&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>AWS S3バケットに独自ドメインを割り当てる。</title>
    <link rel="alternate" href="http://blog.url.com/2016/06/06/assign-your-own-domain-to-the-aws-s3-bucket.html"/>
    <id>http://blog.url.com/2016/06/06/assign-your-own-domain-to-the-aws-s3-bucket.html</id>
    <published>2016-06-06T09:00:00+09:00</published>
    <updated>2016-06-14T12:33:12+09:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;h1 id="はじめに"&gt;はじめに&lt;/h1&gt;

&lt;hr&gt;

&lt;p&gt;AWS S3に作成したバケットに対して独自ドメインの割り当てを行います。&lt;/p&gt;

&lt;p&gt;これによって静的サイトであればS3のみで完結するため、そこら辺のサーバーを動かすよりも低コストで高安定なサイト運営が可能となります。&lt;/p&gt;

&lt;h2 id="前提条件"&gt;前提条件&lt;/h2&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;今回利用する独自ドメインがRoute53にてドメイン管理できることを前提に行います。
また、今回割り当てるドメインは「hogehoge.hengjiu.jp」で行います。
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h1 id="バケットの作成---s3"&gt;バケットの作成 - S3&lt;/h1&gt;

&lt;hr&gt;

&lt;p&gt;・S3の「バケットを作成」で新規にバケットを作成します。&lt;br&gt;
&lt;img alt="s3_01.png" src="https://qiita-image-store.s3.amazonaws.com/0/82090/72f93b5a-c551-b7bc-7bb9-bf2423206291.png" /&gt;&lt;/p&gt;

&lt;p&gt;・作成したバケットのプロパティで「ウェブサイトのホスティングを有効にする」に変更して保存します。&lt;br&gt;
&lt;img alt="s3_02.png" src="https://qiita-image-store.s3.amazonaws.com/0/82090/1251fb2c-2e53-a280-36c8-77361267f69f.png" /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h1 id="ドメイン登録---route53"&gt;ドメイン登録 - Route53&lt;/h1&gt;

&lt;p&gt;・Route 53のHosted zones で対象のDomain Nameをクリックします。&lt;br&gt;
&lt;img alt="route53_01.png" src="https://qiita-image-store.s3.amazonaws.com/0/82090/1214fea9-685d-02f7-5fd5-8c249b676388.png" /&gt;&lt;/p&gt;

&lt;p&gt;・Create Record Setをクリックします。&lt;br&gt;
&lt;img alt="route53_02.png" src="https://qiita-image-store.s3.amazonaws.com/0/82090/ea7ff1e8-4f73-dd82-360f-007c955afd1e.png" /&gt;&lt;/p&gt;

&lt;p&gt;・Nameにサブドメイン(hogehoge)を入力し、AliasをYesにしてAlias Target入力状態にするとS3で作成したバケット名「hogehoge.hengjiu.jp」が表示されるので、それを選択して「Create」をします。&lt;br&gt;
&lt;img alt="route53_03.png" src="https://qiita-image-store.s3.amazonaws.com/0/82090/a6859d8d-4df8-a564-f4f2-939aee13ba24.png" /&gt;&lt;/p&gt;

&lt;p&gt;以上で完了です。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h1 id="おわりに"&gt;おわりに&lt;/h1&gt;

&lt;hr&gt;

&lt;p&gt;S3バケットに独自ドメインを割り当てるためには「バケット名は割り当てるドメイン名と同じにする」ということに注意が必要です。&lt;/p&gt;

&lt;p&gt;もし、レコード作成時に作成したバケットが表示されない(&lt;em&gt;No Targets Available&lt;/em&gt;)場合は、&lt;/p&gt;

&lt;p&gt;・作成したバケットの名前間が違う。&lt;br&gt;
・ウェブサイトホストティングが有効になっていない。&lt;/p&gt;

&lt;p&gt;などが考えられるのでもう一度確認してみてください。&lt;/p&gt;

&lt;p&gt;また、割り当てる際の作業手順は今回説明したように（S3でバケット作成 → Route53でレコード登録）で行うが良いと思います。&lt;br&gt;
ですが、どうしても先にレコード登録をする必要がある場合は、Alias Targetに「s3-website-ap-northeast-1.amazonaws.com.」を入力すれば事前に作成しておくことが可能です。&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>IDCFクラウドのコマンドラインツールをインストールする。 - MacOSX</title>
    <link rel="alternate" href="http://blog.url.com/2016/05/30/how-to-install-the-idcf-command-line-tool-for-macosx.html"/>
    <id>http://blog.url.com/2016/05/30/how-to-install-the-idcf-command-line-tool-for-macosx.html</id>
    <published>2016-05-30T09:00:00+09:00</published>
    <updated>2016-06-14T12:33:12+09:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;h1 id="はじめに"&gt;はじめに&lt;/h1&gt;

&lt;hr&gt;

&lt;p&gt;MacOSからIDCFクラウドに対してコマンドラインツールを利用して操作できるようにします。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h1 id="事前準備"&gt;事前準備&lt;/h1&gt;

&lt;hr&gt;

&lt;p&gt;今回インストールするにあたって、gitとpipの２つのコマンドが必要となります。&lt;br&gt;
なので、まだインストールしていない場合は以下のコマンドでインストールしておいてください。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ sudo brew install git
&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ curl -kL https://raw.github.com/saghul/pythonz/master/pythonz-install | bash
$ sudo easy_install pip
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h1 id="インストール"&gt;インストール&lt;/h1&gt;

&lt;hr&gt;

&lt;p&gt;事前準備が完了したら、いよいよコマンドのインストールを行います。&lt;br&gt;
インストールはidcfのgithubリポジトリにあるcloudstack-apiをします。&lt;br&gt;
&lt;a href="https://github.com/idcf/cloudstack-api"&gt;https://github.com/idcf/cloudstack-api&lt;/a&gt;&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ sudo pip install git+https://github.com/idcf/cloudstack-api

・・・
    cc -fno-strict-aliasing -fno-common -dynamic -arch i386 -arch x86_64 -g -Os -pipe -fno-common -fno-strict-aliasing -fwrapv -DENABLE_DTRACE -DMACOSX -DNDEBUG -Wall -Wstrict-prototypes -Wshorten-64-to-32 -DNDEBUG -g -fwrapv -Os -Wall -Wstrict-prototypes -DENABLE_DTRACE -arch i386 -arch x86_64 -pipe -I/usr/include/libxml2 -Isrc/lxml/includes -I/System/Library/Frameworks/Python.framework/Versions/2.7/include/python2.7 -c src/lxml/lxml.etree.c -o build/temp.macosx-10.11-intel-2.7/src/lxml/lxml.etree.o -w -flat_namespace
    In file included from src/lxml/lxml.etree.c:320:
    src/lxml/includes/etree_defs.h:14:10: fatal error: 'libxml/xmlversion.h' file not found
    #include "libxml/xmlversion.h"
             ^
    1 error generated.
    Compile failed: command 'cc' failed with exit status 1
    creating tmp
    cc -I/usr/include/libxml2 -I/usr/include/libxml2 -c /tmp/xmlXPathInit3sJd9Z.c -o tmp/xmlXPathInit3sJd9Z.o
    /tmp/xmlXPathInit3sJd9Z.c:1:10: fatal error: 'libxml/xpath.h' file not found
    #include "libxml/xpath.h"
             ^
    1 error generated.
    *********************************************************************************
    Could not find function xmlCheckVersion in library libxml2. Is libxml2 installed?
    Perhaps try: xcode-select --install
    *********************************************************************************
    error: command 'cc' failed with exit status 1

    ----------------------------------------
Command "/usr/bin/python -u -c "import setuptools, tokenize;__file__='/private/tmp/pip-build-GIuK3z/lxml/setup.py';exec(compile(getattr(tokenize, 'open', open)(__file__).read().replace('\r\n', '\n'), __file__, 'exec'))" install --record /tmp/pip-Mmw1r6-record/install-record.txt --single-version-externally-managed --compile" failed with error code 1 in /private/tmp/pip-build-GIuK3z/lxml
You are using pip version 8.0.2, however version 8.1.1 is available.
You should consider upgrading via the 'pip install --upgrade pip' command.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;なにやらインストールが失敗してしまったみたいです。。。&lt;br&gt;
でもよく見ると、&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;*********************************************************************************
    Could not find function xmlCheckVersion in library libxml2. Is libxml2 installed?
    Perhaps try: xcode-select --install
    *********************************************************************************
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;という表示が出ています。&lt;br&gt;
インストールに必要な関数(xmlCheckVersion)が見つからないみたいです。Perhaps tryという箇所でインストール方法も教えてくれているので、とりあえずその通りに実行します。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ xcode-select --install
xcode-select: note: install requested for command line developer tools
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;再度インストールを実行します。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ sudo pip install git+https://github.com/idcf/cloudstack-api

The directory '/Users/kohei/Library/Caches/pip/http' or its parent directory is not owned by the current user and the cache has been disabled. Please check the permissions and owner of that directory. If executing pip with sudo, you may want sudo's -H flag.
The directory '/Users/kohei/Library/Caches/pip' or its parent directory is not owned by the current user and caching wheels has been disabled. check the permissions and owner of that directory. If executing pip with sudo, you may want sudo's -H flag.
Collecting git+https://github.com/idcf/cloudstack-api
  Cloning https://github.com/idcf/cloudstack-api to /tmp/pip-FkXf1Z-build
Requirement already satisfied (use --upgrade to upgrade): setuptools in /System/Library/Frameworks/Python.framework/Versions/2.7/Extras/lib/python (from cloudstack.compute==0.10.2)
Requirement already satisfied (use --upgrade to upgrade): httplib2 in /Library/Python/2.7/site-packages (from cloudstack.compute==0.10.2)
Requirement already satisfied (use --upgrade to upgrade): simplejson in /Library/Python/2.7/site-packages (from cloudstack.compute==0.10.2)
Requirement already satisfied (use --upgrade to upgrade): argparse in /Library/Python/2.7/site-packages (from cloudstack.compute==0.10.2)
Requirement already satisfied (use --upgrade to upgrade): prettytable==0.5 in /Library/Python/2.7/site-packages (from cloudstack.compute==0.10.2)
Requirement already satisfied (use --upgrade to upgrade): parsedatetime==0.8.7 in /Library/Python/2.7/site-packages (from cloudstack.compute==0.10.2)
Collecting lxml (from cloudstack.compute==0.10.2)
  Downloading lxml-3.6.0.tar.gz (3.7MB)
    100% |████████████████████████████████| 3.7MB 151kB/s
Installing collected packages: lxml, cloudstack.compute
  Running setup.py install for lxml ... done
  Running setup.py install for cloudstack.compute ... done
Successfully installed cloudstack.compute-0.10.2 lxml-3.6.0
You are using pip version 8.0.2, however version 8.1.1 is available.
You should consider upgrading via the 'pip install --upgrade pip' command.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;今度はインストールできたみたいです。&lt;br&gt;
一応試しにコマンドを実行してみると、&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ cloudstack-api --version
cloudstack-api v0.10.2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ちゃんとバージョン情報の確認ができました。&lt;/p&gt;

&lt;p&gt;ただ、このままではインストールしただけなので、次は環境へアクセスできるように設定を行います。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h1 id="環境設定"&gt;環境設定&lt;/h1&gt;

&lt;hr&gt;

&lt;p&gt;idcfヘアクセスできるようにするには&lt;code&gt;.idcfrc&lt;/code&gt;というファイルを作成し、そこに必要な情報を記載してあげる必要があります。&lt;/p&gt;

&lt;p&gt;ということではじめに必要な情報の取得です。&lt;br&gt;
情報は管理コンソールの「仮想マシン」&amp;gt;「API」から確認できます。&lt;/p&gt;

&lt;p&gt;まずは、API KeyとSecret Keyは画面の「API」の項目から取得できます。ボードクリップアイコンをクリックするとコピーできます。&lt;br&gt;
&lt;img alt="20160517-01.png" src="https://qiita-image-store.s3.amazonaws.com/0/82090/145b8cb9-2357-ee5d-f9ae-c78043f9bad0.png" /&gt;&lt;/p&gt;

&lt;p&gt;次にエンドポイント情報を取得します。今回は「東日本リージョン」ということで進めたいと思うので、先ほどと同じように東日本の箇所にあるクリップボードアイコンをクリックしてコピーします。&lt;br&gt;
&lt;img alt="20160517-02.png" src="https://qiita-image-store.s3.amazonaws.com/0/82090/904688ef-7cc6-e705-77c1-e69dc420fb91.png" /&gt;&lt;/p&gt;

&lt;p&gt;３つの情報が取得できたらいよいよ「.idcfrc」ファイルを作成します。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ vi ~/.idcfrc

[account]
host=https://compute.jp-east.idcfcloud.com/client/api
api_key=***********************************
secret_key=***********************************
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;hostにはエンドポイントが入ります。&lt;br&gt;
また、アクセス権限をユーザーだけが読み書きできるように変更もしておきます。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ chmod 600 ~/.idcfrc
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;以上で環境へアクセスできるところまで準備ができました。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h1 id="確認"&gt;確認&lt;/h1&gt;

&lt;hr&gt;

&lt;p&gt;環境設定まで完了したので実際にアクセスできるか確認してみましょう。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ cloudstack-api listZones
{
  "listzonesresponse": {
    "count": 5,
    "zone": [
      {
        "allocationstate": "Enabled",
・・・
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;レスポンス内容は割愛しますが、ずらっとJSON形式でゾーン情報が表示されればOKです。&lt;/p&gt;

&lt;p&gt;補足ですが、もし環境設定の情報が間違っていたりすると、&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ cloudstack-api listZones
No option 'api_key' in section: 'account'
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;といった内容が表示されます。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h1 id="おわりに"&gt;おわりに&lt;/h1&gt;

&lt;hr&gt;

&lt;p&gt;今回はIDCFクラウドをAPIコマンドで操作できるようにするためのセットアップを行いました。&lt;br&gt;
これによって仮想マシンを作成するたびに管理コンソールへいちいちログインするのではなく、コマンドで一発作成が可能となります。また、スクリプトなどを組んでおけば仮想マシンの作成からグローバルIPの付与といった一連の処理も可能です。&lt;/p&gt;

&lt;p&gt;ただ、現在使えるcloudstack-apiコマンドは限られています。&lt;br&gt;
詳しい内容は&lt;a href="http://docs.idcf.jp/cloud/api/"&gt;IDCFのAPI References&lt;/a&gt;に一覧があるので参考にしてください。&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>jQuery Validationを使ってフォームチェックをしてみる</title>
    <link rel="alternate" href="http://blog.url.com/2016/05/27/jQuery-validation-1.html"/>
    <id>http://blog.url.com/2016/05/27/jQuery-validation-1.html</id>
    <published>2016-05-27T09:00:00+09:00</published>
    <updated>2016-05-30T20:15:50+09:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;h1 id="はじめに"&gt;はじめに&lt;/h1&gt;

&lt;hr&gt;

&lt;p&gt;フォーム入力をする際、必須項目を未入力のまますっ飛ばすとフォームが赤くなって「必須記入項目です」なんて言われてしまったことありませんか？&lt;br&gt;
今回、その動作をプラウディットHPに実装することになりました。&lt;/p&gt;

&lt;p&gt;プロの方なら簡単なことなんだと思いますが、なんせ無知なので...&lt;br&gt;
とっても時間がかかりました。&lt;/p&gt;

&lt;p&gt;ちなみに、本番実装はまだです。&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h1 id="jqueryって？validationって？"&gt;jQueryって？Validationって？&lt;/h1&gt;

&lt;hr&gt;

&lt;p&gt;まずここからです。&lt;br&gt;
jQueryは聞いたことあるなー。Validationに関しては全く初めましてです！&lt;/p&gt;

&lt;p&gt;詳しい説明は省きますが、jQueryとはJavaScriptのライブラリのこと。&lt;br&gt;
そしてValidationとは、&lt;br&gt;
入力フォームのバリデーション（チェック）を簡単に実装することが出来るjQueryプラグイン。&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h1 id="まずサンプルを実装してみる"&gt;まずサンプルを実装してみる&lt;/h1&gt;

&lt;hr&gt;

&lt;p&gt;いろんなサイトにValidationの実装の仕方が載っているので、調べて手頃なものを引っ張ってきました。&lt;/p&gt;

&lt;p&gt;今回参考にしたのは&lt;br&gt;
&lt;a href="http://www.webdesign-fan.com/jquery-validation-engine"&gt;http://www.webdesign-fan.com/jquery-validation-engine&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;一旦ローカルで実装するため、必要なファイルをダウンロードして、&lt;br&gt;
サイト内にあったhtmlファイルを設置。&lt;/p&gt;

&lt;p&gt;してみましたが、なぜか動きません。&lt;/p&gt;

&lt;p&gt;jquery.validationEngine-ja.jsのファイルのパスが間違っていました。&lt;br&gt;
js配下のlaguageフォルダの下にjquery.validationEngine-ja.jsが入ってしまっていて、&lt;br&gt;
ファイルの読み込みができていませんでした。&lt;br&gt;
その他のファイルと同じ階層に移動。&lt;/p&gt;

&lt;p&gt;&lt;img alt="スクリーンショット" src="/images/./2016/0527_validation/validation_test_1.png" /&gt;&lt;/p&gt;

&lt;p&gt;これで解決。&lt;br&gt;
無事に動作確認できました。&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h1 id="既存のhtmlにvalidationを追加"&gt;既存のHTMLにValidationを追加&lt;/h1&gt;

&lt;hr&gt;

&lt;p&gt;サンプルと同じように、ファイルを設置、コードを追加してみました！&lt;/p&gt;

&lt;p&gt;あら？validation動いてない...&lt;/p&gt;

&lt;p&gt;既存のhtmlには既に他のjavascriptも使われているので、何かが影響して動かないのか、&lt;br&gt;
パスが違うのか...&lt;/p&gt;

&lt;p&gt;今回追加したファイルは&lt;/p&gt;

&lt;p&gt;・jquery-1.8.2.min.js (jQueryの本体)&lt;br&gt;
・jquery.validationEngine.js (プラグインの本体)&lt;br&gt;
・languages/jquery.validationEngine-ja.js (日本語ファイル)&lt;br&gt;
・validationEngine.jquery.css (スタイルシート)&lt;/p&gt;

&lt;p&gt;head要素内で上記ファイルが読み込めるようコードを記述。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    &amp;lt;!-- ▼jQuery本体 --&amp;gt;
    &amp;lt;script src="https://ajax.googleapis.com/ajax/libs/jquery/1.9.1/jquery.min.js"&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;!-- ▼バリデーション --&amp;gt;
    &amp;lt;link rel="stylesheet" href="css/validationEngine.jquery.css"&amp;gt;
    &amp;lt;script src="js/jquery.validationEngine.js"&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;script src="js/jquery.validationEngine-ja.js"&amp;gt;&amp;lt;/script&amp;gt;

    &amp;lt;script&amp;gt;
      $(function(){
        jQuery("#form").validationEngine();
      });
    &amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;フォームタグ内のチェックをしたいclass要素にvalidate[]という要素を追加&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;form fole="form"&amp;gt;
&amp;lt;div class="container"&amp;gt;
            &amp;lt;div class="col-xs-8 col-xs-offset-2"&amp;gt;
                &amp;lt;div class="row"&amp;gt;
                    &amp;lt;div class="col-sm-2"&amp;gt;&amp;lt;label for="name"&amp;gt;NAME&amp;lt;/label&amp;gt;&amp;lt;/div&amp;gt;
                        &amp;lt;div class="col-sm-10 form-group"&amp;gt;
                            &amp;lt;input type="text" class="validate[required] form-control input_per70" name="name"  id="name" placeholder="プラウド 太郎"&amp;gt;
                        &amp;lt;/div&amp;gt;

            ----------以下省略----------

             &amp;lt;div class="form-group text-center"&amp;gt;
                     &amp;lt;!-- &amp;lt;button onClick="uploadFile();" type="submit" class="btn btn-dark"&amp;gt;Send Inquiry&amp;lt;/button&amp;gt; --&amp;gt;
                     &amp;lt;input onClick="uploadFile();" type="button" value="Send Inquiry"  class="btn btn-dark" /&amp;gt;
                &amp;lt;/div&amp;gt;
        &amp;lt;/form&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h1 id="今回はまってしまった原因"&gt;今回はまってしまった原因&lt;/h1&gt;

&lt;hr&gt;

&lt;p&gt;①フォームチェックを行いたい対象のフォームIDがきちんと指定できていなかった&lt;/p&gt;

&lt;p&gt;既存のファイルではform fole=&amp;quot;form&amp;quot;という記述になっていました。&lt;br&gt;
ここをform id=&amp;quot;form&amp;quot;に変更しました。&lt;/p&gt;

&lt;p&gt;②jQueryファイルを２つ読みこもうとしていた&lt;/p&gt;

&lt;p&gt;設定を加える前に、すでにjquery.jsというフィルが存在しているところへ、&lt;br&gt;
jquery-1.8.2.min.jsを読み込もうとしていました。&lt;/p&gt;

&lt;p&gt;そのため、jquery.jsを削除。&lt;br&gt;
こちらを削除したことで、その他の動作に影響もなさそうでした。&lt;/p&gt;

&lt;p&gt;上記2点を行ったところ、しっかり動いてくれました。&lt;/p&gt;

&lt;p&gt;&lt;img alt="スクリーンショット" src="/images/./2016/0527_validation/validation_test_2.png" /&gt;&lt;/p&gt;

&lt;p&gt;※ちなみに、jquery.jsとjquery.min.jsの違いとして、ファイルサイズの大きさ、&lt;br&gt;
コードの見やすさがあるようです。&lt;br&gt;
.minの方がサイズを小さくするために改行も削除され変数名も簡略化されていて読みにくく&lt;br&gt;
なっているようですが。&lt;/p&gt;

&lt;p&gt;自分でカスタマイズしたい人には圧縮されていない方がおすすめ、とのこと。&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h1 id="おわりに"&gt;おわりに&lt;/h1&gt;

&lt;p&gt;簡単にまとめましたが、ここに辿り着くまでコードを何度も読んだり、コードの順番を変えてみたり、ファイルの階層を変えてみたり、、&lt;br&gt;
解決する気が全くしない...なんて思いながら。&lt;br&gt;
本当に根気のいる作業だなと思いましたが、自分で解決できると楽しいですね！&lt;/p&gt;

&lt;p&gt;ただ、まだこれで終わりではありません。&lt;br&gt;
現在のままだと、必須項目ですというチェックをすることはできてもフォームが未入力でもフォームの送信ができてしまうんです...&lt;/p&gt;

&lt;p&gt;この部分についてはまた調べてみようと思います。&lt;/p&gt;
</content>
  </entry>
</feed>
