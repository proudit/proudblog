<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Blog Name</title>
  <subtitle>Blog subtitle</subtitle>
  <id>http://blog.url.com/</id>
  <link href="http://blog.url.com/"/>
  <link href="http://blog.url.com/feed.xml" rel="self"/>
  <updated>2016-05-02T09:00:00+09:00</updated>
  <author>
    <name>Blog Author</name>
  </author>
  <entry>
    <title>第１回 AWSとIDCFをVPN接続する - IDCF準備編（全４回）</title>
    <link rel="alternate" href="http://blog.url.com/2016/05/02/how-the-vpn-connection-to-AWS-and-IDCF.html"/>
    <id>http://blog.url.com/2016/05/02/how-the-vpn-connection-to-AWS-and-IDCF.html</id>
    <published>2016-05-02T09:00:00+09:00</published>
    <updated>2016-05-02T13:51:10+09:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;h1 id="はじめに"&gt;はじめに&lt;/h1&gt;

&lt;hr&gt;

&lt;p&gt;IDCFクラウドにVyOSで仮想マシンを作成して、IDCFクラウドとAWSをVPNで接続する設定を説明します。&lt;br&gt;
&lt;img alt="idcf-vpn-1.png" src="https://qiita-image-store.s3.amazonaws.com/0/82090/9b15d672-f654-ab05-fb61-57cf8951b58e.png" /&gt;&lt;br&gt;
できるだけ行っていることが意識しやすいように作業ポイントごとに回を区切っています。&lt;br&gt;
今回はIDCFクラウドで仮想マシンを作成し、グローバルIPアドレスを付与しFWの設定まで行います。&lt;br&gt;
&lt;img alt="idcf-vpn-2.png" src="https://qiita-image-store.s3.amazonaws.com/0/82090/903a6791-fb65-6fd3-5ecd-566c1a605c52.png" /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h1 id="ゲートウェイの作成---idcf"&gt;ゲートウェイの作成 - IDCF&lt;/h1&gt;

&lt;hr&gt;

&lt;p&gt;IDCFクラウドでは仮想マシンでVyOSが選択できるのでそれを利用します。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h2 id="仮想マシンの作成"&gt;仮想マシンの作成&lt;/h2&gt;

&lt;hr&gt;

&lt;p&gt;・IDCF クラウドにログインします。&lt;br&gt;
&lt;a href="https://account.idcfcloud.com/"&gt;https://account.idcfcloud.com/&lt;/a&gt;&lt;br&gt;
&lt;img alt="idcf-vpn_1-1_00.png" src="https://qiita-image-store.s3.amazonaws.com/0/82090/14be8274-6b3c-bc32-5a40-2260daa2f051.png" /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;
・「コンピューティング」をクリックします。&lt;br&gt;
&lt;img alt="idcf-vpn_1-1_01.png" src="https://qiita-image-store.s3.amazonaws.com/0/82090/43a362af-8f77-5bea-0cf8-c800b7c81e52.png" /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;
・「仮想マシンの作成」をクリックします。（左右どちらでもOKです。）&lt;br&gt;
&lt;img alt="idcf-vpn_1-1_02.png" src="https://qiita-image-store.s3.amazonaws.com/0/82090/7f671fe5-d7a5-a66c-f352-b7d9ba5762c9.png" /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;
・以下の情報を入力し「確認画面へ」をクリックします。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;マシンタイプ：Light（light.S1）
イメージ：その他（VyOS  1.1.3 64-bit）
ボリューム： -
SSH Key：SSH Key選択（今回は事前に用意していたのを利用）
仮想マシン台数：1
ネットワークインターフェース：radian-network1（今回はデフォルトで用意されているNWを選択）
詳細情報：マシン名１ VPN-ToAWS
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img alt="idcf-vpn_1-1_03.png" src="https://qiita-image-store.s3.amazonaws.com/0/82090/7e55e559-412e-9d0f-ca87-98c2b62e8e16.png" /&gt;&lt;br&gt;
&lt;img alt="idcf-vpn_1-1_04.png" src="https://qiita-image-store.s3.amazonaws.com/0/82090/ae2d311f-62cb-c581-8ae2-63b7856eb8a0.png" /&gt;&lt;br&gt;
&lt;img alt="idcf-vpn_1-1_05.png" src="https://qiita-image-store.s3.amazonaws.com/0/82090/be27ebf2-83f0-c239-2d23-3498f472958d.png" /&gt;&lt;br&gt;
&lt;img alt="idcf-vpn_1-1_06.png" src="https://qiita-image-store.s3.amazonaws.com/0/82090/5c87f2c9-e073-7e61-bf83-019821763867.png" /&gt;&lt;br&gt;
&lt;img alt="idcf-vpn_1-1_07.png" src="https://qiita-image-store.s3.amazonaws.com/0/82090/e2c47ce6-7fd8-9fcf-c779-c58193a27ef8.png" /&gt;&lt;br&gt;
&lt;img alt="idcf-vpn_1-1_08.png" src="https://qiita-image-store.s3.amazonaws.com/0/82090/bf3cfa22-1e05-e24d-ce78-1fe15b58cf14.png" /&gt;&lt;br&gt;
&lt;img alt="idcf-vpn_1-1_09.png" src="https://qiita-image-store.s3.amazonaws.com/0/82090/e86ed5a9-f660-a71d-2135-6f32f675215f.png" /&gt;&lt;br&gt;
&lt;img alt="idcf-vpn_1-1_10.png" src="https://qiita-image-store.s3.amazonaws.com/0/82090/5d6a9ff8-9214-969e-efc1-b6cb8492ac0d.png" /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;
・内容を確認しOKであれば「作成」をクリックします。&lt;br&gt;
&lt;img alt="idcf-vpn_1-1_11.png" src="https://qiita-image-store.s3.amazonaws.com/0/82090/a64b4ce0-4892-6887-9f29-ecd829841090.png" /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h2 id="ipアドレスの設定"&gt;IPアドレスの設定&lt;/h2&gt;

&lt;hr&gt;

&lt;p&gt;・「IPアドレス &amp;gt; IPアドレスの取得」をクリックします。&lt;br&gt;
&lt;img alt="idcf-vpn_1-2_01.png" src="https://qiita-image-store.s3.amazonaws.com/0/82090/07d6794b-b879-f36a-4785-2e0bb94174a3.png" /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;
・IPアドレス名の入力、ゾーンとネットワークを選択し「取得する」をクリックします。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;IPアドレス名：VPN-IDCF
ゾーン：radian
ネットワーク：radian-network1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img alt="idcf-vpn_1-2_02.png" src="https://qiita-image-store.s3.amazonaws.com/0/82090/8645e217-5952-842e-1d63-f9654c9d8b69.png" /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;
・「はい」をクリックします。&lt;br&gt;
&lt;img alt="idcf-vpn_1-2_03.png" src="https://qiita-image-store.s3.amazonaws.com/0/82090/942402b6-bd04-f810-dcc6-97d4cb56b371.png" /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;
・取得した「IPアドレス」をクリックします。&lt;br&gt;
&lt;img alt="idcf-vpn_1-2_04.png" src="https://qiita-image-store.s3.amazonaws.com/0/82090/70c9d053-4532-86de-192f-f06392d4348a.png" /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;
・「NAT」をクリックし、先ほど作成した仮想マシンを選択して「有効化」をクリックします。&lt;br&gt;
&lt;img alt="idcf-vpn_1-2_05.png" src="https://qiita-image-store.s3.amazonaws.com/0/82090/4d02ded3-ac82-4b4b-ff71-c8aa409886ae.png" /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;
・「はい」をクリックします。&lt;br&gt;
&lt;img alt="idcf-vpn_1-2_06.png" src="https://qiita-image-store.s3.amazonaws.com/0/82090/820ca11d-cbf1-254a-ca5c-fb2cfab98a17.png" /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h2 id="fwの設定"&gt;FWの設定&lt;/h2&gt;

&lt;hr&gt;

&lt;p&gt;・「ファイアウォール」でポートの許可を設定します。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[コメント]        [ソースCIDR]  [タイプ]  [ポートレンジ]
NAT Traversal  0.0.0.0/0    UDP      4500
NAT Traversal  0.0.0.0/0    UDP      500
SSH            接続元IP      TCP      22
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img alt="idcf-vpn_1-3_02.png" src="https://qiita-image-store.s3.amazonaws.com/0/82090/2037ff02-908e-afe1-06de-fafa1f985985.png" /&gt;&lt;/p&gt;

&lt;p&gt;ここでSSHを許可していますが、これは作業するための設定です。全て(全４回)が完了したら削除しましょう。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h1 id="おわりに"&gt;おわりに&lt;/h1&gt;

&lt;hr&gt;

&lt;p&gt;今回は基本的にIDCFクラウドで仮想マシンを作成するための作業と同じです。&lt;br&gt;
VyOSでFWでポート4500(UDP)とポート500(UDP)を許可しているのがVPN特有の設定です。&lt;/p&gt;

&lt;p&gt;次回はAWS側でゲートウェイを準備します。&lt;br&gt;
&lt;a href="http://qiita.com/kooohei/items/fbc6b32f5a70bf3cfa20"&gt;&amp;gt;&amp;gt; 第２回 AWSとIDCFをVPN接続する（全４回）&lt;/a&gt;&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>dockerのインストール for MacOS</title>
    <link rel="alternate" href="http://blog.url.com/2016/04/25/docker-how-to-install.html"/>
    <id>http://blog.url.com/2016/04/25/docker-how-to-install.html</id>
    <published>2016-04-25T09:00:00+09:00</published>
    <updated>2016-04-25T17:47:04+09:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;Docker ToolboxでMac OS Xにdockerをインストールを行います。&lt;/p&gt;

&lt;p&gt;1.まずDocker Toolboxのページへ行きます。&lt;br&gt;&lt;br&gt;
&lt;a href="https://www.docker.com/docker-toolbox"&gt;https://www.docker.com/docker-toolbox&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;2.Download(Mac)ボタンを押してダウンロードをします。&lt;br&gt;&lt;br&gt;
&lt;img alt="docker-toolbox1-300x249.png" src="https://qiita-image-store.s3.amazonaws.com/0/82090/71cea7b3-8213-7410-c8c6-ff2ce6ec9a99.png" /&gt;&lt;/p&gt;

&lt;p&gt;3.ダウンロードしたパッケージをクリックしてインストーラーを起動させます。&lt;/p&gt;

&lt;p&gt;4.起動したらナビゲーションに従い進みます。&lt;br&gt;
&lt;img alt="docker-toolbox2-300x211.png" src="https://qiita-image-store.s3.amazonaws.com/0/82090/95a753cc-9409-efe1-3c97-e3141dc88a00.png" /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img alt="docker-toolbox3-300x211.png" src="https://qiita-image-store.s3.amazonaws.com/0/82090/44be53e3-4788-3ae3-def9-2439c60aa2b2.png" /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img alt="docker-toolbox4-300x214.png" src="https://qiita-image-store.s3.amazonaws.com/0/82090/3f808694-d676-1ce8-aba2-2ff6d0940ac5.png" /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img alt="docker-toolbox6-300x214.png" src="https://qiita-image-store.s3.amazonaws.com/0/82090/fac6e78a-5e39-c63f-4449-6bfc3633d2f2.png" /&gt;&lt;/p&gt;

&lt;p&gt;5.インストールが完了するとLaunchpadに「Docker Quickstart Terminal」「Kitematic」「VirtualBox」の３つがインストールされます。&lt;br&gt;
&lt;img alt="docker-toolbox7-300x83.png" src="https://qiita-image-store.s3.amazonaws.com/0/82090/0a4784c9-dff8-7d7c-ed16-37bd7db04a17.png" /&gt;&lt;/p&gt;

&lt;p&gt;6.「Docker Quickstart Terminal」をクリックするとTerminalが立ち上がり、VirtualBox上にDocker環境が構築されます。&lt;br&gt;
&lt;img alt="docker-toolbox8-300x233.png" src="https://qiita-image-store.s3.amazonaws.com/0/82090/d2ed5332-439f-35eb-7730-1e1da9251b9d.png" /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img alt="docker-toolbox9-300x235.png" src="https://qiita-image-store.s3.amazonaws.com/0/82090/bd9974f9-dae7-122d-8385-38b80193e584.png" /&gt;&lt;/p&gt;

&lt;p&gt;以上、dockerのインストールが完了です。&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>opensslコマンドでCSRを作成する</title>
    <link rel="alternate" href="http://blog.url.com/2016/04/22/create-csr-openssl.html"/>
    <id>http://blog.url.com/2016/04/22/create-csr-openssl.html</id>
    <published>2016-04-22T09:00:00+09:00</published>
    <updated>2016-04-25T17:36:33+09:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;h1 id="はじめに"&gt;はじめに&lt;/h1&gt;

&lt;hr&gt;

&lt;p&gt;&lt;font size=2&gt;&lt;br&gt;
以前からCSRの作成はやったことがありますが、opensslコマンドでの作成は初めて。&lt;br&gt;
(今までは用意されていたシェルを利用していました。)&lt;br&gt;
備忘録として一連の作業内容を記録したいと思います。&lt;/p&gt;

&lt;p&gt;unix系のOSでは標準で利用できるようですが、windows上で利用する場合はアプリケーションのインストールが必要となるようです。&lt;br&gt;
&lt;a href="https://jp.globalsign.com/support/faq/177.html"&gt;https://jp.globalsign.com/support/faq/177.html&lt;/a&gt;&lt;br&gt;
&lt;/font&gt;&lt;/p&gt;

&lt;h2 id="事前準備"&gt;事前準備&lt;/h2&gt;

&lt;hr&gt;

&lt;p&gt;　・サーバキーペア用パスフレーズ&lt;br&gt;
　・DN情報&lt;/p&gt;

&lt;p&gt;※今回bit数は2048bitを指定、アルゴリズムはsha-2で作成します。&lt;/p&gt;

&lt;h1 id="さっそく作成"&gt;さっそく作成&lt;/h1&gt;

&lt;hr&gt;

&lt;p&gt;まずopensslがちゃんと利用できるのかコマンドを入れてみました。&lt;br&gt;
試しにダウンロードされているバージョンを確認。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ openssl version
OpenSSL 0.9.8zg 14 July 2015
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;font size=2&gt;　&lt;br&gt;
今回、普段使っているMAC上で作成を行ったので、デスクトップに&lt;a href="http://www.proudit.jpというディレクトリを作り、そこで作業をしました。"&gt;www.proudit.jpというディレクトリを作り、そこで作業をしました。&lt;/a&gt;&lt;br&gt;
&lt;/font&gt;&lt;/p&gt;

&lt;p&gt;まずキーペアの作成を行います。&lt;/p&gt;

&lt;p&gt;※2048bitを指定&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ openssl genrsa -des3 2048 &amp;gt; www.proudit.jp.key

Generating RSA private key, 2048 bit long modulus
...............................................+++
......................+++
e is 65537 (0x10001)
Enter pass phrase:
Verifying - Enter pass phrase:
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;続いてCSRの作成です。&lt;br&gt;
コマンド入力後、DN情報を入力します。&lt;/p&gt;

&lt;p&gt;※アルゴリズムはsha-2としますので、-sha256と記述します&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
$ openssl req -new -key www.proudit.jp.key -sha256 -out www.proudit.jp.csr
Enter pass phrase for www.proudit.jp.key:
You are about to be asked to enter information that will be incorporated
into your certificate request.
What you are about to enter is what is called a Distinguished Name or a DN.
There are quite a few fields but you can leave some blank
For some fields there will be a default value,
If you enter '.', the field will be left blank.
-----
Country Name (2 letter code) [AU]:JP
State or Province Name (full name) [Some-State]:Tokyo
Locality Name (eg, city) []:Shinjuku-ku
Organization Name (eg, company) [Internet Widgits Pty Ltd]:Proudit Inc.
Organizational Unit Name (eg, section) []:
Common Name (e.g. server FQDN or YOUR name) []:www.proudit.jp
Email Address []:

Please enter the following 'extra' attributes
to be sent with your certificate request
A challenge password []:
An optional company name []:
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;CSRの内容を確認。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
$ openssl req -text -noout -in /Users/ayako/Desktop/www.proudit.jp/www.proudit.jp.csr

Certificate Request:
    Data:
        Version: 0 (0x0)
        Subject: C=JP, ST=Tokyo, L=Shinjuku-ku, O=Proudit Inc., CN=www.proudit.jp
        Subject Public Key Info:
            Public Key Algorithm: rsaEncryption
            RSA Public Key: (2048 bit)
                Modulus (2048 bit):

　　　　　　　　　　　　　※�略※     
      Signature Algorithm: sha256WithRSAEncryption 
　　　　　　　　　　　　　※略※       
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;DN情報、bit数、アルゴリズム、指定通りで作成されていることが確認できました！&lt;/p&gt;

&lt;h1 id="おわりに"&gt;おわりに&lt;/h1&gt;

&lt;hr&gt;

&lt;p&gt;opensslでCSRを作るの案外簡単でした。&lt;/p&gt;

&lt;p&gt;とは言え、参考資料からコマンドをコピペしてるのに、unknown optionと言われてしまい、手打ちしなきゃならなかったり、&lt;br&gt;
手打ちしたらしたで一文字抜けてたり、。資料どおりにやっているのにスムーズにはいかないという・・・。&lt;/p&gt;

&lt;p&gt;エラーが出る度、「なぜだーー？！」とぐるぐる考えたり。&lt;/p&gt;

&lt;p&gt;難しいですよね。ほんと。&lt;br&gt;
素人からしたらもうこれだけで精一杯です。&lt;/p&gt;

&lt;p&gt;周りに助けられながら無事に終わりました。&lt;br&gt;
次回からはもうこれで大丈夫！！&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>s3cmdをインストールしてIDCFクラウドのオブジェクトストレージにバケットを作成する。</title>
    <link rel="alternate" href="http://blog.url.com/2016/04/20/make-bucket-by-s3cmd.html"/>
    <id>http://blog.url.com/2016/04/20/make-bucket-by-s3cmd.html</id>
    <published>2016-04-20T09:00:00+09:00</published>
    <updated>2016-04-25T17:38:14+09:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;h1 id="はじめに"&gt;はじめに&lt;/h1&gt;

&lt;hr&gt;

&lt;p&gt;コマンドを利用してIDCFクラウドのオブジェクトストレージへアクセスするにはs3cmdを利用するのが一般的のようです。&lt;br&gt;
一応、IDCフロンティアのサイトにも載ってました。&lt;br&gt;
&lt;a href="http://www.idcf.jp/help/storage/guide/s3cmd_guide.html"&gt;IDCF - [Linux]サードパーティのツールご利用ガイド s3cmd のご利用方法&lt;/a&gt;&lt;br&gt;
とはいえ、動作保証やサポートはされていないみたいですが。。。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h1 id="オブジェクトストレージとは"&gt;オブジェクトストレージとは&lt;/h1&gt;

&lt;hr&gt;

&lt;p&gt;ファイルシステムのようにデータをファイルやブロック単位で扱うのではなく、オブジェクトという単位で扱うストレージです。&lt;br&gt;
また、ファイルシステムではないので階層構造がなく、オブジェクト同士はフラットな関係になっています。&lt;br&gt;
基本的にデータサイズや保存数に制限がないため、大容量のデータを扱うことに適しています。&lt;br&gt;
今回は&lt;a href="http://www.idcf.jp/cloud/storage/"&gt;IDCFクラウドのオブジェクトストレージ&lt;/a&gt;ですが、他にも&lt;a href="https://aws.amazon.com/jp/s3/"&gt;AWSのAmazon S3&lt;/a&gt;や&lt;a href="https://azure.microsoft.com/ja-jp/services/storage/"&gt;MicrosoftのAzure Storage&lt;/a&gt;などが有名です。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h1 id="s3cmdインストール"&gt;s3cmdインストール&lt;/h1&gt;

&lt;hr&gt;

&lt;p&gt;とりあえず今回はMacOSとUbuntuのインストールを行いました。&lt;br&gt;
&lt;strong&gt;・MacOSの場合&lt;/strong&gt;&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ sudo brew install s3cmd
==&amp;gt; Downloading https://homebrew.bintray.com/bottles/s3cmd-1.6.0.el_capitan.bottle.tar.gz
######################################################################## 100.0%
==&amp;gt; Pouring s3cmd-1.6.0.el_capitan.bottle.tar.gz
🍺  /usr/local/Cellar/s3cmd/1.6.0: 55 files, 738.3K
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;
&lt;strong&gt;・Ubuntuの場合&lt;/strong&gt;&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ apt-get install s3cmd
Reading package lists... Done
Building dependency tree
Reading state information... Done
The following NEW packages will be installed:
  s3cmd
0 upgraded, 1 newly installed, 0 to remove and 202 not upgraded.
Need to get 67.6 kB of archives.
After this operation, 295 kB of additional disk space will be used.
Get:1 http://jp.archive.ubuntu.com/ubuntu/ trusty/universe s3cmd all 1.1.0~beta3-2 [67.6 kB]
Fetched 67.6 kB in 0s (1,018 kB/s)
Selecting previously unselected package s3cmd.
(Reading database ... 91433 files and directories currently installed.)
Preparing to unpack .../s3cmd_1.1.0~beta3-2_all.deb ...
Unpacking s3cmd (1.1.0~beta3-2) ...
Processing triggers for man-db (2.6.7.1-1) ...
Setting up s3cmd (1.1.0~beta3-2) ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h1 id=".s3cfgの作成"&gt;.s3cfgの作成&lt;/h1&gt;

&lt;hr&gt;

&lt;p&gt;インストールができたので、次はs3cmdの設定ファイルとなる.s3cfgを作成します。&lt;br&gt;
作成は以下のコマンドで行います。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ s3cmd --configure

Enter new values or accept defaults in brackets with Enter.
Refer to user manual for detailed description of all options.

Access key and Secret key are your identifiers for Amazon S3
Access Key: ********************
Secret Key: ****************************************

Encryption password is used to protect your files from reading
by unauthorized persons while in transfer to S3
Encryption password:
Path to GPG program [/usr/bin/gpg]:

When using secure HTTPS protocol all communication with Amazon S3
servers is protected from 3rd party eavesdropping. This method is
slower than plain HTTP and can't be used if you're behind a proxy
Use HTTPS protocol [No]:

On some networks all internet access must go through a HTTP proxy.
Try setting it here if you can't conect to S3 directly
HTTP Proxy server name:

New settings:
  Access Key: ********************
  Secret Key: ****************************************
  Encryption password:
  Path to GPG program: /usr/bin/gpg
  Use HTTPS protocol: False
  HTTP Proxy server name:
  HTTP Proxy server port: 0

Test access with supplied credentials? [Y/n] n

Save settings? [y/N] y
Configuration saved to '/hogehoge/.s3cfg'
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h1 id="設定の修正"&gt;設定の修正&lt;/h1&gt;

&lt;hr&gt;

&lt;p&gt;.s3cfgのhost_baseとhost_bucketの値をIDCFのエンドポイントに変更します。&lt;br&gt;
エンドポイントは&lt;br&gt;
「IDCF管理画面 &amp;gt; オブジェクトストレージ &amp;gt; APIユーザー」で対象となるAPIユーザー名をクリックすると確認できます。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ cd ~/
$ vi .s3cfg
&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[変更前]
host_base = s3.amazonaws.com
host_bucket = %(bucket)s.s3.amazonaws.com

[変更後]
host_base = ds.jp-east.idcfcloud.com
host_bucket = %(bucket)s.ds.jp-east.idcfcloud.com
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;また、プライベートコネクトを利用する場合はhost_bucketのエンドポイントの最後を「.local」にする必要があります。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;host_bucket = %(bucket)s.ds.jp-east.idcfcloud.local
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;*実際にプライベートコネクトを利用する場合は他にも申請やサーバー設定などが必要となります。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h1 id="バケット参照"&gt;バケット参照&lt;/h1&gt;

&lt;hr&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ s3cmd ls
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;はじめはバケットがないため、コマンドを実行しても何も返ってきません。&lt;br&gt;
ただ、もし.s3cfgを変更せずにバケット参照すると以下のようにERRORとなります。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ s3cmd ls
ERROR: S3 error: 403 (InvalidAccessKeyId): The AWS Access Key Id you provided does not exist in our records.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h1 id="バケットの作成"&gt;バケットの作成&lt;/h1&gt;

&lt;hr&gt;

&lt;p&gt;ということで、バケットを作成してみます。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ s3cmd mb s3://proudit-test
Bucket 's3://proudit-test/' created
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;再度バケットを参照すると作成できているのが確認できます。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ s3cmd ls
2016-04-13 05:01  s3://proudit-test
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h1 id="バケットの削除"&gt;バケットの削除&lt;/h1&gt;

&lt;hr&gt;

&lt;p&gt;とりあえず今回は作成まで確認できたので削除します。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ s3cmd rb s3://proudit-test
Bucket 's3://proudit-test/' removed
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;参照すると何も返ってこないので削除されたのが確認できます。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ s3cmd ls
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;以上で完了です。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h1 id="おわりに"&gt;おわりに&lt;/h1&gt;

&lt;hr&gt;

&lt;p&gt;とりあえず、今回はs3cmdをインストールしてバケットの作成・削除だけ行いました。&lt;br&gt;
s3cmdのコマンドについてIDCフロンティアのサイトに載っていますので、その他のコマンドについて知りたい方はそちらを参照していただければと思います。&lt;br&gt;
&lt;a href="https://www.faq.idcf.jp/app/answers/detail/a_id/360/~/s3cmdのコマンド一覧"&gt;IDCF - s3cmdのコマンド一覧&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;また、awsコマンドを利用してもオブジェクトストレージにアクセスできるみたいです。&lt;br&gt;
&lt;a href="http://inaba-serverdesign.jp/blog/20151212/s3cmd_awscli_s3_idcf.html"&gt;s3cmdじゃなくてawscli s3を使おう～IDCFクラウドオブジェクトストレージでも&lt;/a&gt;&lt;br&gt;
しかも検証によるとそっちの方が早いという結果が出たとのこと。&lt;br&gt;
そこについては今度自分でも検証しようと思います。&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>今話題のサーバレスとは？</title>
    <link rel="alternate" href="http://blog.url.com/2016/04/15/server-less-toha.html"/>
    <id>http://blog.url.com/2016/04/15/server-less-toha.html</id>
    <published>2016-04-15T09:00:00+09:00</published>
    <updated>2016-04-18T12:34:53+09:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;h1 id="はじめに"&gt;はじめに&lt;/h1&gt;

&lt;p&gt;&lt;font size=2&gt;&lt;br&gt;
最近話題になってきているサーバレス、我が社でも熱いトピックです。&lt;br&gt;
ただ、インフラ知識ほぼゼロに等しいわたしからしてみると、&lt;br&gt;
サーバレスという言葉を聞いた時、『？？？？』。&lt;br&gt;
サーバレスってことはサーバがいらないってこと！？じゃあどうやってシステム動くの？&lt;br&gt;
分からないことだらけです。&lt;/p&gt;

&lt;p&gt;ということで調べてみました。&lt;br&gt;
素人目線の見解なので、ツッコミポイントも多いと思いますが...ご容赦ください。&lt;br&gt;
&lt;/font&gt;&lt;/p&gt;

&lt;h1 id="サーバレスとは"&gt;サーバレスとは&lt;/h1&gt;

&lt;p&gt;特に決まった定義は今のところ存在しないようです。&lt;/p&gt;

&lt;p&gt;色々と調べていく中で一番しっくり来たのがこれ。&lt;br&gt;
&lt;br&gt;&lt;br&gt;
&lt;em&gt;オンプレミスで運用していた時代から基盤の主がクラウドへ移り、システムのメンテナンス性や拡張性を柔軟にするために、クラウドの管理までなくしてしまう、サーバレスアーキテクチャという考え方が注目されています。&lt;br&gt;
&lt;a href="http://www.kobelcosys.co.jp/column/itwords/20160401/"&gt;http://www.kobelcosys.co.jp/column/itwords/20160401/&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;
実際、”レス”といってもサーバ自体が全く無いわけではないです。&lt;br&gt;
&lt;br&gt;&lt;br&gt;
例えばサーバレスを実現するために&lt;/p&gt;

&lt;p&gt;&amp;quot;AWS S3＋API Gateway ＋ Lambda&amp;quot;&lt;/p&gt;

&lt;p&gt;を利用したとします。&lt;/p&gt;

&lt;p&gt;これらは全てAWSのサービスなのでサーバの管理はAWS側でやってくれます。&lt;/p&gt;

&lt;p&gt;サーバ自体は存在していますが、管理が不要なのでサーバの存在を意識せずに運用をすることができます。&lt;br&gt;
この”存在を意識しない”というところがサーバレスのポイントなのかな、と思います。&lt;br&gt;
&lt;br&gt;&lt;br&gt;
※AWSを使ったサーバレスとは上記のようなサービスを使う、ということの他にEC2やRDSを使わ無い。という考え方もあるようです。&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h1 id="サーバレスのメリット"&gt;サーバレスのメリット&lt;/h1&gt;

&lt;p&gt;・サーバの管理が不要&lt;br&gt;
セキュリティのアップデートやバックアップ、容量可変など、サーバ保守が不要になる。&lt;br&gt;
もちろん構築も不要。&lt;/p&gt;

&lt;p&gt;・コストパフォーマンスに優れている&lt;br&gt;
管理が不要になる分、人件費もその分カットされ、尚且つサーバレスはプログラムの処理が必要な時だけ動作させることができます。AWSなども利用料で課金されるので必要な時だけ動作するこの仕組みは非常にコストパフォーマンスに優れていると言えます。&lt;br&gt;
&lt;br&gt;&lt;br&gt;
これだけ見ていると、サーバレスってインフラ屋さんがいなくても大丈夫なのでは？と思ってしまうのですが。&lt;br&gt;
&lt;br&gt;&lt;br&gt;
例えば、短期的なキャンペーンサイトを作らなければならないとなった場合。&lt;br&gt;
まずサーバの手配をしなければなりません。&lt;br&gt;
ほぼ静的なサイトなので、サーバレス程度の基盤で十分。時間もコストもかけずに環境を用意したい。&lt;br&gt;
サーバレスなんてどうだろう？&lt;br&gt;
でも一体サーバレスな環境ってどうやって用意するの？&lt;br&gt;
&lt;br&gt;&lt;br&gt;
といった時に何も気にせずサーバレスの環境を提供してもらえたら嬉しいですよね。&lt;br&gt;
こういうサービスを提供するのもインフラ屋さんのお仕事だと思っています。&lt;br&gt;
&lt;br&gt;&lt;br&gt;
もちろんサーバレスを提供する上でのコストも抑えられているので、お客様にも低価格で&lt;br&gt;
サーバレス環境を素早く提供することが可能になります。&lt;br&gt;
また、実際利用してみるとサーバレスでは不十分という場合にも、他のサービスを組み合わせて最適な環境を作り出すお手伝いができます。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h1 id="所感"&gt;所感&lt;/h1&gt;

&lt;p&gt;この記事を書くまでも色々なサイトを調べ、やっとまとまってきた感じなのですが、それでもまだほわーーんとしている状態です(笑)&lt;/p&gt;

&lt;p&gt;どの方も述べられているのが、サーバレスとはまだ未発達の分野であり、決まった定義がないということ。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;
オンプレミス→クラウド→サーバレス&lt;/p&gt;

&lt;p&gt;と時代はどんどん変化していますが、変化する一番の要因はより時間とコストをかけず、&lt;br&gt;
いかに楽に柔軟に運用できるか、ということ。&lt;br&gt;
そしてその変化のスピードが速いのもこの業界ならでは。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;
インフラってあるのが当たり前であり、動いているのが当たり前。&lt;br&gt;
はっきり言ってエンドユーザにとっては全く意識されていない裏の世界。&lt;br&gt;
だからこそそこに従事しているエンジニアが少しでも楽をして、尚且つ更に＋αのサービスを作り出すことができるようになればいいですよね。&lt;br&gt;
その上でサーバレスアーキテクチャというものが今注目されているのかな、と。&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>子供の写真保管方法〜便利なフォトブックサービス〜</title>
    <link rel="alternate" href="http://blog.url.com/2016/04/12/photobook-service.html"/>
    <id>http://blog.url.com/2016/04/12/photobook-service.html</id>
    <published>2016-04-12T09:00:00+09:00</published>
    <updated>2016-04-18T12:34:53+09:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;h1 id="写真の保管どうしてますか？"&gt;写真の保管どうしてますか？&lt;/h1&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;
スマートフォンで手軽に写真が撮れてしまう時代。&lt;br&gt;
ついつい撮った写真は保存したまま溜まっていて、容量も増えて整理が追いつかずにどうしよう？と思うこともしばしば。&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;p&gt;特に子供の写真データってなかなか消せないんですよね(汗)&lt;br&gt;
我が家は定期的に、外付けHDDやCD-Rにデータを移して保管しています。&lt;br&gt;
ただ、別媒体に移してしまったデータってなかなか見る機会ないですよね。&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h1 id="手軽に作れるフォトブックとは？"&gt;手軽に作れるフォトブックとは？&lt;/h1&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;
こんな時に便利なのが、フォトブック！&lt;/p&gt;

&lt;p&gt;ネットで検索するとフォトブックを扱っているサイトはたくさんあります。&lt;br&gt;
我が家で利用しているのは、今の所２つ。&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;★TOLOT&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="http://tolot.com/lp/cost/?acc=ga&amp;gclid=CPGemdbXhcwCFVMIvAod11YECA" target="_blank"&gt;&lt;a href="http://tolot.com/lp/cost/?acc=ga&amp;amp;gclid=CPGemdbXhcwCFVMIvAod11YECA"&gt;http://tolot.com/lp/cost/?acc=ga&amp;amp;gclid=CPGemdbXhcwCFVMIvAod11YECA&lt;/a&gt;&lt;/a&gt;&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;p&gt;ページ数64ページで500円！&lt;br&gt;
ワンコインで作れます。&lt;/p&gt;

&lt;p&gt;スマートフォンアプリで作成も可能で手軽に作れる一冊。&lt;br&gt;
PCを開かずにできちゃいます！&lt;/p&gt;

&lt;p&gt;本のサイズやページ数などパターンは限られいますが、コンパクトな作りで何と言っても安くて手軽なので、&lt;br&gt;
生後すぐのお子さんの一ヶ月ごとの記録を残しておきたい、遠く離れたおじいちゃんおばあちゃんへの定期的な子供の成長報告なんかにもおすすめです。&lt;/p&gt;

&lt;p&gt;また写真入りのスケジュール張やお薬手帳なんかも作ることができちゃいます！&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;p&gt;利用したことはありませんが、[&lt;a href="http://nohana.jp/" target="_blank"&gt;ノハナ&lt;/a&gt;]では毎月一冊無料(送料別)で作れちゃうサービスもあるようです。&lt;br&gt;
これもTOLOTと同じようにとても手軽なサービスだと思います。&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;★しまうまプリント&lt;/strong&gt;&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.n-pri.jp/photobook/" target="_blank"&gt;&lt;a href="https://www.n-pri.jp/photobook/"&gt;https://www.n-pri.jp/photobook/&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;本サイズやページ数にいくつか種類があり、ページレイアウトデザインも複数から選択できます。&lt;/p&gt;

&lt;p&gt;我が家は年間の総まとめとしてこちらを利用しています。&lt;br&gt;
こちらの場合は、表紙としてカバーがつく、文字フォントもいくつか選べるなど、TOLOTより自由度があります。&lt;br&gt;
ちょうど先月息子が２歳の誕生日を迎えたので、近々２冊目を作る予定です。&lt;/p&gt;

&lt;p&gt;両者ともに値段も良心的でクオリティも十分です。&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h1 id="最後に"&gt;最後に&lt;/h1&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;上記2つ以外にもフォトブックを作成できるサービスはたくさんあります！&lt;/p&gt;

&lt;p&gt;もちろんお子さんの成長記録だけでなく、友人への贈り物、旅行の記録、色々な用途で利用できるフォトブックサービス。&lt;/p&gt;

&lt;p&gt;値段も手頃なものが多いので、写真をプリントしてアルバムを整理して、というのが面倒だな、苦手だなという人にはおすすめ。&lt;/p&gt;

&lt;p&gt;スマートフォンやPCの中で眠ったままの写真を是非フォトブックにしてみてください！&lt;br&gt;
&lt;div style="text-align:center"&gt;&lt;br&gt;
&lt;font size="2"&gt;&lt;br&gt;
&lt;img alt="jawsdays" src="/images/./2016/0412_photobook/20160412_photobook_01.jpg" /&gt;&lt;br&gt;
1歳の誕生日記念に作ったフォトブックを眺める息子。&lt;br&gt;
&lt;/font&gt;&lt;br&gt;
&lt;/div&gt;&lt;/p&gt;
</content>
  </entry>
</feed>
