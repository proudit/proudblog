<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Blog Name</title>
  <subtitle>Blog subtitle</subtitle>
  <id>http://blog.url.com/</id>
  <link href="http://blog.url.com/"/>
  <link href="http://blog.url.com/feed.xml" rel="self"/>
  <updated>2016-02-15T09:00:00+09:00</updated>
  <author>
    <name>Blog Author</name>
  </author>
  <entry>
    <title>Redmineのバージョンを確認する。</title>
    <link rel="alternate" href="http://blog.url.com/2016/02/15/comfirm-a-version-of-redmine.html"/>
    <id>http://blog.url.com/2016/02/15/comfirm-a-version-of-redmine.html</id>
    <published>2016-02-15T09:00:00+09:00</published>
    <updated>2016-02-15T12:10:43+09:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;Redmineのバージョンを確認する方法です。&lt;/p&gt;

&lt;p&gt;方法としては「1.管理画面で確認」「2.コマンドで確認」「3.ソースコードで確認」の３通り紹介します。&lt;/p&gt;

&lt;h1 id="1.管理画面で確認"&gt;1.管理画面で確認&lt;/h1&gt;

&lt;h5 id="1-1.管理者権限のあるアカウントでredmineへログインします。"&gt;1-1.管理者権限のあるアカウントでRedmineへログインします。&lt;/h5&gt;

&lt;h5 id="1-2.「管理」をクリックします。"&gt;1-2.「管理」をクリックします。&lt;/h5&gt;

&lt;p&gt;&lt;img width="332" alt="20160112_redmine01.png" src="https://qiita-image-store.s3.amazonaws.com/0/82090/df5492e0-2af2-5c90-4946-9db76e5d44ab.png"&gt;&lt;/p&gt;

&lt;h5 id="1-3.「情報」をクリックします。"&gt;1-3.「情報」をクリックします。&lt;/h5&gt;

&lt;p&gt;&lt;img width="202" alt="20160112_redmine02.png" src="https://qiita-image-store.s3.amazonaws.com/0/82090/84d8540b-d699-5aa6-382b-ba8baeeac291.png"&gt;&lt;/p&gt;

&lt;h5 id="1-4.画面上部に表示されます。"&gt;1-4.画面上部に表示されます。&lt;/h5&gt;

&lt;p&gt;&lt;img width="995" alt="20160112_redmine03.png" src="https://qiita-image-store.s3.amazonaws.com/0/82090/ee8ee97a-9344-6619-97d5-78f4e01f30a7.png"&gt;&lt;/p&gt;

&lt;p&gt;バージョンの他にも、&lt;br&gt;
・Redmineのインストールの正常性&lt;br&gt;
・データベースの種類&lt;br&gt;
・Rdmineの実行環境&lt;br&gt;
などが確認できます。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h1 id="2.コマンドで確認"&gt;2.コマンドで確認&lt;/h1&gt;

&lt;h5 id="2-1.サーバへログインし、redmineをインストールしたディレクトリへ移動します。"&gt;2-1.サーバへログインし、Redmineをインストールしたディレクトリへ移動します。&lt;/h5&gt;

&lt;h5 id="2-2.以下のコマンドを実行します。"&gt;2-2.以下のコマンドを実行します。&lt;/h5&gt;

&lt;p&gt;※旧バージョンだとscript/aboutの場合があります。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ ruby bin/about 
&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Environment:
  Redmine version                3.2.0.stable
  Ruby version                   2.0.0-p647 (2015-08-18) [x86_64-linux]
  Rails version                  4.2.5
  Environment                    production
  Database adapter               Mysql2
SCM:
  Subversion                     1.8.13
  Git                            2.4.3
  Filesystem                     
Redmine plugins:
  no plugin installed
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;管理画面で表示されているものと同等の内容が確認できます。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h1 id="3.ソースコードで確認"&gt;3.ソースコードで確認&lt;/h1&gt;

&lt;h5 id="3-1.サーバへログインし、redmineをインストールしたディレクトリへ移動します。"&gt;3-1.サーバへログインし、Redmineをインストールしたディレクトリへ移動します。&lt;/h5&gt;

&lt;p&gt;lib/redmine/version.rbの冒頭にバージョンを表す数値が定義されています。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ cat lib/redmine/version.rb 
require 'rexml/document'

module Redmine
  module VERSION #:nodoc:
    MAJOR = 3
    MINOR = 2
    TINY  = 0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;以上の３つの方法がありますが。&lt;br&gt;
管理権限付きのユーザーを持っているのであれば「1.管理画面で確認」を行うのが一番良さそうです。&lt;br&gt;
もし、管理画面へログインするアカウントがい場合は「2.コマンドで確認」が有効です。&lt;br&gt;
また、「3.ソースコードで確認」は一応紹介しましたが、これを行うのであれば、「2.コマンドで確認」を行う方が良いです。&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Jawsdays2016 ハンズオンブースのスピーカーやります！</title>
    <link rel="alternate" href="http://blog.url.com/2016/02/14/jawsdays2016-workshop-speker.html"/>
    <id>http://blog.url.com/2016/02/14/jawsdays2016-workshop-speker.html</id>
    <published>2016-02-14T09:00:00+09:00</published>
    <updated>2016-02-15T11:47:09+09:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;来たる、2016/3/12(土)に今年も&lt;a href="http://jawsdays2016.jaws-ug.jp/"&gt;JawsDays2016&lt;/a&gt;が開催されます。&lt;/p&gt;

&lt;p&gt;AWSの成長とともに、年々参加者、規模も大きくなっているJawsdays、毎年1ユーザとして楽しみに参加させて頂いておりまししたが、今年はなんと、私小熊がスピーカーの一人として参加する機会を頂きました！&lt;/p&gt;

&lt;p&gt;&lt;img alt="jawsdays2016" src="/images/jawsdays2016-bg.png" /&gt;&lt;/p&gt;

&lt;p&gt;以下、私のセッションの紹介ページ抜粋です。&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;hr&gt;

&lt;h3 id="11時10分--静的html公開フローをサーバレスでdevops！"&gt;11時10分- 静的HTML公開フローをサーバレスでDevOps！&lt;/h3&gt;

&lt;hr&gt;

&lt;p&gt;株式会社プラウディットの小熊さんがお届けする「静的HTML公開フローをサーバレスでDevOps！」は、ほぼ絶対落ちないコーポレートサイトを、Github + CircleCi + AWSのS3というストレージサービスを利用して、サーバレスで構築するハンズオンです。 このセッションに参加すれば、あなたのサイトも簡単にYahoo砲に耐えられるようになります！&lt;/p&gt;

&lt;p&gt;&lt;a href="http://jawsdays2016.jaws-ug.jp/speaker/259"&gt;スピーカー紹介ページ&lt;/a&gt;&lt;br&gt;
&lt;img alt="スピーカー" src="/images/speaker01.png" /&gt;&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;セッションブースは「workshop」＝いわゆるハンズオンブースの１コマとなります。&lt;/p&gt;

&lt;p&gt;もちろん、元ネタは同Blogの同名記事&lt;a href="http://blog.proudit.jp/2015/11/27/github-circleci-s3.html"&gt;静的HTML公開フローをサーバレスでDevOps！&lt;/a&gt;がベースとなっておりますが、ハンズオン用にブラッシュアップしましたので、この記事ではよく分からなかった、うまく行かなかった、などの方にも分かりやすく、試しやすい形となっております。&lt;/p&gt;

&lt;p&gt;1コマ=50分の短いセッションですが、AWS S3と各種SaaSを連携したDevOpsの要素満載のセッションとなります。&lt;/p&gt;

&lt;p&gt;みなさまお誘い合わせの上、受講頂ければと思います！&lt;/p&gt;

&lt;p&gt;まだチケット間に合いますよーw&lt;/p&gt;

&lt;p&gt;&lt;a href="https://jaws-days.doorkeeper.jp/events/36835"&gt;JawsDaysチケット販売ページ&lt;/a&gt;&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>GitHubとCircleCIを連携させよう！！</title>
    <link rel="alternate" href="http://blog.url.com/2016/02/09/connect-github-to-circleci.html"/>
    <id>http://blog.url.com/2016/02/09/connect-github-to-circleci.html</id>
    <published>2016-02-09T09:00:00+09:00</published>
    <updated>2016-02-15T11:46:48+09:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;h1 id="はじめに"&gt;はじめに&lt;/h1&gt;

&lt;p&gt;CircleCIは継続的インテグレーション(Continuous Integration)を行うためのWebサービスです。&lt;br&gt;
指定したGitHubリポジトリをウォッチし、更新があると自動でビルド〜デプロイを行える仕組みを作れます。&lt;br&gt;
とりあえず今回は初めのGitHubとCircleCIを連携させるところを行います。&lt;/p&gt;

&lt;h1 id="事前準備"&gt;事前準備&lt;/h1&gt;

&lt;p&gt;・&lt;a href="../../../2016/02/01/regist-gihub.html"&gt;GitHubアカウントの取得&lt;/a&gt;&lt;br&gt;
CircleCIを利用するにはGitHubアカウントが必要となります。&lt;/p&gt;

&lt;h1 id="連携設定"&gt;連携設定&lt;/h1&gt;

&lt;h4 id="1.ログイン"&gt;1.ログイン&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://circleci.com/"&gt;Circleci&lt;/a&gt;へアクセスし「Sign in」をクリックします。&lt;br&gt;
&lt;img alt="20160125_circleci01.png" src="https://qiita-image-store.s3.amazonaws.com/0/82090/7dfec881-aa24-9e8c-05d0-1102f5e1fe38.png" /&gt;&lt;/p&gt;

&lt;h4 id="2.githubログイン"&gt;2.GitHubログイン&lt;/h4&gt;

&lt;p&gt;ログイン画面が表示されるので事前に準備したGitHubアカウントへログインします。&lt;br&gt;
&lt;img alt="20160125_circleci02.png" src="https://qiita-image-store.s3.amazonaws.com/0/82090/f592d016-db70-bb23-13cd-ff4fa87dc3f7.png" /&gt;&lt;/p&gt;

&lt;h4 id="3.認証"&gt;3.認証&lt;/h4&gt;

&lt;p&gt;認証画面が表示されるため、「Authorize application」をクリックします。&lt;br&gt;
&lt;img alt="20160125_circleci03.png" src="https://qiita-image-store.s3.amazonaws.com/0/82090/e216dafa-2cdb-ed89-37c3-e959ce58a43e.png" /&gt;&lt;/p&gt;

&lt;h4 id="4.アカウントの選択"&gt;4.アカウントの選択&lt;/h4&gt;

&lt;p&gt;CircleCIと連携するGitHubアカウントを指定します。&lt;br&gt;
&lt;img alt="20160125_circleci04.png" src="https://qiita-image-store.s3.amazonaws.com/0/82090/26c3a9d3-a7c8-8260-d2fe-407f3c8ef8ed.png" /&gt;&lt;/p&gt;

&lt;h4 id="5.リポジトリの選択"&gt;5.リポジトリの選択&lt;/h4&gt;

&lt;p&gt;アカウントを指定すると、リポジトリがリストされるので連携したいリポジトリの「Build project」をクリックします。&lt;br&gt;
&lt;img alt="20160125_circleci05.png" src="https://qiita-image-store.s3.amazonaws.com/0/82090/73519472-6b06-00d4-10f5-9154aa2a8836.png" /&gt;&lt;/p&gt;

&lt;h4 id="6.プランの選択"&gt;6.プランの選択&lt;/h4&gt;

&lt;p&gt;利用するプランを指定します。&lt;br&gt;
&lt;img alt="20160125_circleci07.png" src="https://qiita-image-store.s3.amazonaws.com/0/82090/b7b01720-8410-392c-1a1c-5ccdd2f992af.png" /&gt;&lt;/p&gt;

&lt;h4 id="7.完了"&gt;7.完了&lt;/h4&gt;

&lt;p&gt;以上で連携が完了です。&lt;br&gt;
&lt;img alt="20160125_circleci08.png" src="https://qiita-image-store.s3.amazonaws.com/0/82090/bcd9bede-56ab-605d-7a93-8ba705802215.png" /&gt;&lt;/p&gt;

&lt;h1 id="最後に"&gt;最後に&lt;/h1&gt;

&lt;p&gt;以上、今回はGitHubとCircleCIを連携させる部分だけ行いました。&lt;br&gt;
実際にデプロイまで行うには&lt;em&gt;circle.yml&lt;/em&gt;というファイルを使って管理する必要があります。&lt;br&gt;
そこについては、また時間があるときに書ければと思います。&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>GitHubアカウント作成とリポジトリの作成手順</title>
    <link rel="alternate" href="http://blog.url.com/2016/02/01/regist-gihub.html"/>
    <id>http://blog.url.com/2016/02/01/regist-gihub.html</id>
    <published>2016-02-01T09:00:00+09:00</published>
    <updated>2016-02-02T10:51:14+09:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;新規にGitHubアカウントを作成し、リポジトリを作成するための手順です。&lt;/p&gt;

&lt;h1 id="1.-githubアカウントの作成"&gt;1. GitHubアカウントの作成&lt;/h1&gt;

&lt;h2 id="1-1.-サイトへアクセス"&gt;1-1. サイトへアクセス&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://github.com"&gt;GitHub&lt;/a&gt;のサイトにアクセスします。&lt;/p&gt;

&lt;h2 id="1-2.-必要事項の入力"&gt;1-2. 必要事項の入力&lt;/h2&gt;

&lt;p&gt;ユーザ名、メアド、パスワードを入力して「Sign up for Github」のボタンを押します。&lt;br&gt;
&lt;img alt="20160122_github-regist01.png" src="https://qiita-image-store.s3.amazonaws.com/0/82090/e6ae5b0e-69cc-b29f-d5ee-bab2fdc2da67.png" /&gt;&lt;/p&gt;

&lt;h2 id="1-3.-プランの選択"&gt;1-3. プランの選択&lt;/h2&gt;

&lt;p&gt;Freeプランが選択されているのを確認して「Finish sign up」のボタンを押します。&lt;br&gt;
&lt;img alt="20160122_github-regist02.png" src="https://qiita-image-store.s3.amazonaws.com/0/82090/e52091b2-94eb-65e7-06d8-a4678d846c82.png" /&gt;&lt;/p&gt;

&lt;h2 id="1-4.-確認メール"&gt;1-4. 確認メール&lt;/h2&gt;

&lt;p&gt;登録したメールアドレスにGitHubから確認メールが来ます。&lt;br&gt;
そのメール内にある「Verify email address」ボタンを押します。&lt;br&gt;
&lt;img alt="20160122_github-regist04.png" src="https://qiita-image-store.s3.amazonaws.com/0/82090/dda5bc7f-7039-aac4-5c15-972140365cd7.png" /&gt;&lt;/p&gt;

&lt;h2 id="1-5.-登録完了メール"&gt;1-5. 登録完了メール&lt;/h2&gt;

&lt;p&gt;「Welcome to GitHub!」というメールが届いたら登録が完了です。&lt;br&gt;
&lt;img alt="20160122_github-regist08.png" src="https://qiita-image-store.s3.amazonaws.com/0/82090/ada3aecd-1d22-b4b9-c8ca-458cfd1b10e7.png" /&gt;&lt;/p&gt;

&lt;h1 id="2.-リポジトリの作成"&gt;2. リポジトリの作成&lt;/h1&gt;

&lt;h2 id="2-1.-ログイン"&gt;2-1. ログイン&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://github.com"&gt;GitHub&lt;/a&gt;にログインします。&lt;/p&gt;

&lt;h2 id="2-2.-新規リポジトリの作成①"&gt;2-2. 新規リポジトリの作成①&lt;/h2&gt;

&lt;p&gt;「+ New repository」をクリックします。&lt;br&gt;
&lt;img alt="20160122_github-regist03.png" src="https://qiita-image-store.s3.amazonaws.com/0/82090/1144cf43-4c43-179e-f06c-f80d6bd10ce2.png" /&gt;&lt;/p&gt;

&lt;h2 id="2-3.-新規リポジトリの作成②"&gt;2-3. 新規リポジトリの作成②&lt;/h2&gt;

&lt;p&gt;リポジトリ名を入力して「Create repository」ボタンを押します。&lt;br&gt;
&lt;img alt="20160122_github-regist05.png" src="https://qiita-image-store.s3.amazonaws.com/0/82090/27012d17-a4ca-a869-c83c-dfffb34755d8.png" /&gt;&lt;/p&gt;

&lt;h2 id="2-4.-確認"&gt;2-4. 確認&lt;/h2&gt;

&lt;p&gt;作成が完了するとリポジトリのURLが表示されます。&lt;br&gt;
&lt;img alt="20160122_github-regist06.png" src="https://qiita-image-store.s3.amazonaws.com/0/82090/b123c18b-7f76-73a8-8769-c88f38f6c26b.png" /&gt;&lt;/p&gt;

&lt;p&gt;以上でGitHubのアカウントとリポジトリの作成が完了です。&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>moCloudでHubotを動かそう！！</title>
    <link rel="alternate" href="http://blog.url.com/2016/01/25/talk-with-hubot-on-mocloud.html"/>
    <id>http://blog.url.com/2016/01/25/talk-with-hubot-on-mocloud.html</id>
    <published>2016-01-25T09:00:00+09:00</published>
    <updated>2016-02-02T10:51:14+09:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;先日、「Mobingi moCloud ハンズオン」に行ってきました。&lt;br&gt;
&lt;a href="https://mobingi.doorkeeper.jp/events/37092"&gt;https://mobingi.doorkeeper.jp/events/37092&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;内容としては「moCloudの説明から実際にアプリケーションを作成する」を前半で行い、後半では「作成したアプリケーションを利用してサービスをデプロイする」を行いました。moCloudというのをまったく知らずに参加したこのハンズオンでしたが、とてもわかりやすかったです。&lt;/p&gt;

&lt;p&gt;そこでMobingiの吉田真吾さんが「moCloudを使ってHubotを動かす」という内容のハンズオンをしてくださったのでその内容(手順)をまとめてみました。&lt;/p&gt;

&lt;h1 id="概要"&gt;概要&lt;/h1&gt;

&lt;p&gt;moCloud上のアプリケーションにHubotを動かすスクリプトをデプロイし、Slackと連携させてHubotと会話をする。&lt;br&gt;
※Hubotを動かすスクリプトはあらかじめ用意されています。&lt;/p&gt;

&lt;h1 id="0.事前準備"&gt;0.事前準備&lt;/h1&gt;

&lt;p&gt;・&lt;a href="../../../2016/02/01/regist-gihub.html"&gt;GitHubアカウントの作成&lt;/a&gt;&lt;br&gt;
・Slackのインストールとアカウント作成&lt;/p&gt;

&lt;h1 id="1.-リポジトリのfork(github)"&gt;1. リポジトリのfork(GitHub)&lt;/h1&gt;

&lt;h4 id="1-1.ログイン"&gt;1-1.ログイン&lt;/h4&gt;

&lt;p&gt;GitHubにログインします。&lt;br&gt;
&lt;a href="https://github.com"&gt;https://github.com&lt;/a&gt;&lt;/p&gt;

&lt;h4 id="1-2.リポジトリのfork"&gt;1-2.リポジトリのfork&lt;/h4&gt;

&lt;p&gt;以下のリポジトリへアクセスし、forkします。&lt;br&gt;
&lt;a href="https://github.com/yoshidashingo/hubot-mocloud"&gt;https://github.com/yoshidashingo/hubot-mocloud&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img alt="20160124_github01.png" src="https://qiita-image-store.s3.amazonaws.com/0/82090/88696f9e-d46a-c9a0-2091-0f7965637488.png" /&gt;&lt;/p&gt;

&lt;p&gt;複数の組織に所属している場合は以下のように聞かれるので、forkするリポジトリを指定します。&lt;br&gt;
&lt;img alt="20160124_github02.png" src="https://qiita-image-store.s3.amazonaws.com/0/82090/dac20449-57ca-cbd3-0cd7-543a50096ef0.png" /&gt;&lt;/p&gt;

&lt;p&gt;forkすると自分のリポジトリのリストに表示されます。&lt;br&gt;
&lt;img alt="20160124_github03.png" src="https://qiita-image-store.s3.amazonaws.com/0/82090/6fc1b47e-3d2a-2b86-527d-3d62c0fddc7e.png" /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img alt="20160124_github04.png" src="https://qiita-image-store.s3.amazonaws.com/0/82090/65f412e5-cb6d-33e0-31e9-405ee923d8ef.png" /&gt;&lt;/p&gt;

&lt;h1 id="2.hubotのインストール(slack)"&gt;2.Hubotのインストール(Slack)&lt;/h1&gt;

&lt;h4 id="2-1.ログイン"&gt;2-1.ログイン&lt;/h4&gt;

&lt;p&gt;ブラウザからSlackにログインし、Hubotページにアクセスします。&lt;br&gt;
&lt;a href="https://slack.com/apps/A0F7XDU93-hubot"&gt;https://slack.com/apps/A0F7XDU93-hubot&lt;/a&gt;&lt;/p&gt;

&lt;h4 id="2-2.hubotのインストール"&gt;2-2.Hubotのインストール&lt;/h4&gt;

&lt;p&gt;「Install」をクリックします。&lt;br&gt;
&lt;img alt="20160123_slack-hubot01.png" src="https://qiita-image-store.s3.amazonaws.com/0/82090/c99fc360-55f8-d21d-b1f3-0886ec171cb4.png" /&gt;&lt;/p&gt;

&lt;h4 id="2-3.usernameの設定"&gt;2-3.Usernameの設定&lt;/h4&gt;

&lt;p&gt;「Username」を入力して「Add Hubot Integration」をクリックします。&lt;br&gt;
ここで入力した「Username」がHubotの名前となりSlack上で表示されます。&lt;br&gt;
&lt;img alt="20160123_slack-hubot02.png" src="https://qiita-image-store.s3.amazonaws.com/0/82090/1dace3c2-1129-9706-f2d6-0ff224293f49.png" /&gt;&lt;/p&gt;

&lt;h4 id="2-4.環境変数の確認"&gt;2-4.環境変数の確認&lt;/h4&gt;

&lt;p&gt;環境変数が表示されていることを確認して完了です。&lt;br&gt;
&lt;img alt="20160123_slack-hubot03.png" src="https://qiita-image-store.s3.amazonaws.com/0/82090/a161860e-f033-844e-7270-0f3916df403a.png" /&gt;&lt;br&gt;
※この環境変数は後で利用します。&lt;/p&gt;

&lt;h1 id="3.アプリケーションの作成(mocloud)"&gt;3.アプリケーションの作成(moCloud)&lt;/h1&gt;

&lt;h4 id="3-1.ログイン"&gt;3-1.ログイン&lt;/h4&gt;

&lt;p&gt;moCloudにログインします。&lt;br&gt;
&lt;a href="https://mocloud.io/"&gt;https://mocloud.io/&lt;/a&gt;&lt;/p&gt;

&lt;h4 id="3-2.アプリケーションの作成"&gt;3-2.アプリケーションの作成&lt;/h4&gt;

&lt;p&gt;左サイドにある「+ アプリケーションの作成」をクリックします。&lt;br&gt;
&lt;img alt="20160122_mobingi01.png" src="https://qiita-image-store.s3.amazonaws.com/0/82090/989d2273-b9b0-5711-2722-4fe44668be07.png" /&gt;&lt;/p&gt;

&lt;h4 id="3-3.アプリケーション情報の設定"&gt;3-3.アプリケーション情報の設定&lt;/h4&gt;

&lt;p&gt;任意のアプリケーション名とドメインを入力し、利用するリージョンとインスタンスを選択します。&lt;br&gt;
&lt;img alt="20160122_mobingi02.png" src="https://qiita-image-store.s3.amazonaws.com/0/82090/72b79a30-d65b-a284-fcae-89f15eec38eb.png" /&gt;&lt;/p&gt;

&lt;h4 id="3-4.イメージ設定①"&gt;3-4.イメージ設定①&lt;/h4&gt;

&lt;p&gt;作成するアプリケーションのイメージを選択します。&lt;br&gt;
今回は「PHP Stack Ubuntu 14.04, php 5.6, Apache」を選択します。&lt;br&gt;
&lt;img alt="20160122_mobingi03.png" src="https://qiita-image-store.s3.amazonaws.com/0/82090/ae30c714-2084-7696-c45c-8482569aacc3.png" /&gt;&lt;/p&gt;

&lt;h4 id="3-5.イメージ設定②"&gt;3-5.イメージ設定②&lt;/h4&gt;

&lt;p&gt;「4.イメージの設定①」で選択したイメージをクリックすると「Extra PHP Configuration」の設定画面がポップアップされます。&lt;br&gt;
今回はデフォルト設定のままで「実行」をクリックします。&lt;br&gt;
&lt;img alt="20160122_mobingi04.png" src="https://qiita-image-store.s3.amazonaws.com/0/82090/7b7417d7-b002-d8c5-6450-0996ccaee629.png" /&gt;&lt;/p&gt;

&lt;p&gt;すると、選択したイメージがブルーの色になります。&lt;br&gt;
&lt;img alt="20160122_mobingi05.png" src="https://qiita-image-store.s3.amazonaws.com/0/82090/a85fb6b8-7012-2d79-42dc-f4f8f0a3484e.png" /&gt;&lt;/p&gt;

&lt;h4 id="3-6.アプリケーションの作成"&gt;3-6.アプリケーションの作成&lt;/h4&gt;

&lt;p&gt;以上の設定を行ったら「アプリケーションの作成」をクリックします。&lt;br&gt;
&lt;img alt="20160122_mobingi06.png" src="https://qiita-image-store.s3.amazonaws.com/0/82090/373a026e-93df-1fbc-4011-b7f64dc5cabe.png" /&gt;&lt;/p&gt;

&lt;p&gt;すると、「既存アプリケーション」に画面が切り替わり、アプリケーションの作成が始まります。&lt;br&gt;
&lt;img alt="20160122_mobingi07.png" src="https://qiita-image-store.s3.amazonaws.com/0/82090/21903528-14c1-516d-77e8-6dcb95af02df.png" /&gt;&lt;/p&gt;

&lt;p&gt;ステータスが「初期化中」→「実行中」になったら作成完了です。&lt;br&gt;
※ちなみに自分は実行中になるまで7分ほどかかりました。&lt;br&gt;
&lt;img alt="20160122_mobingi09.png" src="https://qiita-image-store.s3.amazonaws.com/0/82090/491fa8c6-5a5f-2336-2027-13a6ac67754f.png" /&gt;&lt;/p&gt;

&lt;h1 id="4.コードのデプロイ"&gt;4.コードのデプロイ&lt;/h1&gt;

&lt;h4 id="4-1.アプリケーションの選択"&gt;4-1.アプリケーションの選択&lt;/h4&gt;

&lt;p&gt;作成したアプリケーション名をクリックします。&lt;br&gt;
&lt;img alt="20160122_mobingi10.png" src="https://qiita-image-store.s3.amazonaws.com/0/82090/07d72860-26f3-4ee4-15d2-4b812e59b285.png" /&gt;&lt;/p&gt;

&lt;h4 id="4-2.リポジトリの選択"&gt;4-2.リポジトリの選択&lt;/h4&gt;

&lt;p&gt;「コード」タブをクリックするとGitリポジトリ設定が表示されるので、そこで「GitHub」の「パブリックリポジトリ」を選択します。&lt;br&gt;
&lt;img alt="20160122_mobingi11.png" src="https://qiita-image-store.s3.amazonaws.com/0/82090/e76dfb22-99ce-eeec-00ee-c666dfe117da.png" /&gt;&lt;/p&gt;

&lt;h4 id="4-3.リポジトリとの接続"&gt;4-3.リポジトリとの接続&lt;/h4&gt;

&lt;p&gt;フォークした「自分のリポジトリ/hubot-mocloud」の「master」リポジトリを選択し、「接続」をクリックします。&lt;/p&gt;

&lt;p&gt;「成功」と出れば接続が完了です。&lt;br&gt;
&lt;img alt="20160122_mobingi12.png" src="https://qiita-image-store.s3.amazonaws.com/0/82090/864c944e-125f-13a7-b70c-fdfe7aa0ce64.png" /&gt;&lt;/p&gt;

&lt;h4 id="4-4.環境変数の設定①"&gt;4-4.環境変数の設定①&lt;/h4&gt;

&lt;p&gt;「設定」タブをクリックします。&lt;br&gt;
&lt;img alt="20160122_mobingi13.png" src="https://qiita-image-store.s3.amazonaws.com/0/82090/3ad10dcb-4d6f-667b-22d0-2bf33d9a923b.png" /&gt;&lt;/p&gt;

&lt;h4 id="4-5.環境変数の設定②"&gt;4-5.環境変数の設定②&lt;/h4&gt;

&lt;p&gt;「Browse Apps &amp;gt; Hubot &amp;gt; Configurations on Proudit Inc &amp;gt; Edit configuration」に記載されている環境変数を入力して「+」で追加します。&lt;br&gt;
&lt;img alt="20160123_slack-hubot03.png" src="https://qiita-image-store.s3.amazonaws.com/0/82090/8debffbc-a0d8-62c0-d374-190b7e349af6.png" /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img alt="20160122_mobingi14.png" src="https://qiita-image-store.s3.amazonaws.com/0/82090/debfd4f9-b845-0c4a-926f-cf0bfa24ad7a.png" /&gt;&lt;/p&gt;

&lt;h4 id="4-6.環境変数の設定③"&gt;4-6.環境変数の設定③&lt;/h4&gt;

&lt;p&gt;変数が追加されたのを確認したら「変更を保存」をクリックして保存します。&lt;br&gt;
&lt;img alt="20160122_mobingi15.png" src="https://qiita-image-store.s3.amazonaws.com/0/82090/41cb683a-aefe-c78d-40f3-02be06d84b86.png" /&gt;&lt;/p&gt;

&lt;p&gt;緑でSuccessが表示されれば設定完了です。&lt;br&gt;
&lt;img alt="20160122_mobingi16.png" src="https://qiita-image-store.s3.amazonaws.com/0/82090/6fa27ffa-91c1-bbdc-08cc-5f957b530fd3.png" /&gt;&lt;/p&gt;

&lt;p&gt;しばらく待つとslackに表示されているhubotのランプが緑になります。&lt;br&gt;
&lt;img alt="20160122_mobingi17.png" src="https://qiita-image-store.s3.amazonaws.com/0/82090/d3d7a7a0-4799-4020-3f3d-d9b7d1532f28.png" /&gt;&lt;/p&gt;

&lt;h1 id="5.let&amp;#39;s-hubot!!"&gt;5.Let&amp;#39;s Hubot!!&lt;/h1&gt;

&lt;p&gt;以上で準備が整いました。それでは話しかけてみましょう。&lt;br&gt;
「hello」と話しかけると「hello!」を返事をしてくれます。&lt;br&gt;
&lt;img alt="20160122_mobingi18.png" src="https://qiita-image-store.s3.amazonaws.com/0/82090/6f7d0594-7f9d-5011-8851-55b9b281463f.png" /&gt;&lt;/p&gt;

&lt;p&gt;ここではあらかじめ準備してくださったリポジトリをforkしてデプロイしています。&lt;br&gt;
もし他にもいろいろ試したいということであれば、今回forkしたソースを編集してみてください。「hello」以外にも会話ができるようになります。&lt;/p&gt;

&lt;h1 id="最後に"&gt;最後に&lt;/h1&gt;

&lt;p&gt;今回はハンズオンの第一回だったみたいです。今回のハンズオンを通じてmoCloudというのを知り、とても興味深いサービスだと感じました。なので今後もハンズオンとかがあったら参加しようと思います。&lt;/p&gt;

&lt;p&gt;/&amp;gt; Mobingi 吉田真吾さん&lt;br&gt;
わかりやすいハンズオンありがとうございました。&lt;/p&gt;

&lt;p&gt;また、より詳しく知りたい方は吉田さんが書いたブログ「&lt;a href="http://yoshidashingo.hatenablog.com/entry/2015/12/15/105841"&gt;moCloudでHubotを動かしてSlack上で遊ぼう&lt;/a&gt;」の記事を参照してみてください。&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Redmine 3.2をAmazon Linux(release 2015.09)にインストールしてみた。</title>
    <link rel="alternate" href="http://blog.url.com/2016/01/18/installation-method-of-redmine.html"/>
    <id>http://blog.url.com/2016/01/18/installation-method-of-redmine.html</id>
    <published>2016-01-18T09:00:00+09:00</published>
    <updated>2016-01-25T12:17:29+09:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;今回はAmazon Linux(release 2015.09)にRedmine 3.2をインストールする手順をまとめてみました。&lt;/p&gt;

&lt;p&gt;方針としてはシンプルにしたいので、できるだけyumやインストール済みのパッケージを利用していきます。&lt;/p&gt;

&lt;h1 id="必要なパッケージ等の準備"&gt;必要なパッケージ等の準備&lt;/h1&gt;

&lt;h4 id="1.開発ツールのインストール"&gt;1.開発ツールのインストール&lt;/h4&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# yum groupinstall "Development Tools"
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id="2.rubyのセットアップ"&gt;2.rubyのセットアップ&lt;/h4&gt;

&lt;p&gt;Amazon Linuxではデフォルトでrubyがインストールされています。今回はインストール済みのを利用し、追加で必要なライブラリのみをインストールします。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# ruby -v
# gem -v
# yum install ruby-devel
# gem install io-console
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id="3.bundlerのインストール"&gt;3.bundlerのインストール&lt;/h4&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# gem install bundler --no-rdoc --no-ri
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id="データベースの準備"&gt;データベースの準備&lt;/h1&gt;

&lt;h4 id="1.mysqlのインストール"&gt;1.MySQLのインストール&lt;/h4&gt;

&lt;p&gt;今回のデータベースはRDSを利用するため、クライアントをインストールします。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# yum install mysql mysql-devel
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id="2.データベースとユーザーの作成"&gt;2.データベースとユーザーの作成&lt;/h4&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# mysql -h &amp;lt;ホスト名&amp;gt; -u &amp;lt;ユーザー&amp;gt; -p &amp;lt;パスワード&amp;gt;
mysql&amp;gt; create database db_redmine default character set utf8;
mysql&amp;gt; grant all on db_redmine.* to user_redmine@localhost identified by '********';
mysql&amp;gt; flush privileges;
mysql&amp;gt; exit;
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id="apacheのインストール"&gt;apacheのインストール&lt;/h1&gt;

&lt;h4 id="1.apacheのインストール"&gt;1.apacheのインストール&lt;/h4&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# yum install httpd httpd-devel
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id="2.confファイルの修正---その１"&gt;2.confファイルの修正 - その１&lt;/h4&gt;

&lt;p&gt;&amp;quot;/etc/httpd/conf/httpd.conf&amp;quot;の以下のコメントアウトを外します。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# vim /etc/httpd/conf/httpd.conf
修正前：# NameVirtualHost *:80 → 修正後：NameVirtualHost *:80

# diff /etc/httpd/conf/httpd.conf /etc/httpd/conf/httpd.conf_org
991c991
&amp;lt; NameVirtualHost *:80
---
&amp;gt; #NameVirtualHost *:80
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id="3.confファイルの修正---その２"&gt;3.confファイルの修正 - その２&lt;/h4&gt;

&lt;p&gt;&amp;quot;/etc/httpd/conf.d/redmine.conf&amp;quot;を作成する。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# vim /etc/httpd/conf.d/redmine.conf
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;confの内容は適宜修正してください。以下は例となります。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;VirtualHost *:80&amp;gt;
    ServerName www.example.com

    DocumentRoot /var/www/redmine/public

    ErrorLog  "|/usr/sbin/rotatelogs /var/log/httpd/redmine/error_log.%Y%m%d 86400 540"
    CustomLog "|/usr/sbin/rotatelogs /var/log/httpd/redmine/access_log.%Y%m%d 86400 540" combined

&amp;lt;/VirtualHost&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id="redmineの設定"&gt;Redmineの設定&lt;/h1&gt;

&lt;h4 id="1.必要なパッケージのインストール"&gt;1.必要なパッケージのインストール&lt;/h4&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# yum -y install openssl-devel readline-devel zlib-devel curl-devel libyaml-devel libffi-devel
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id="2.imagemagickと日本語フォントのインストール"&gt;2.ImageMagickと日本語フォントのインストール&lt;/h4&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# yum install ImageMagick ImageMagick-devel ipa-pgothic-fonts
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id="3.redmineのダウンロード"&gt;3.Redmineのダウンロード&lt;/h4&gt;

&lt;p&gt;下記のURLからRedmine 3.2のtarball(.tar.gz)をダウンロードします。&lt;br&gt;
&lt;a href="http://www.redmine.org/projects/redmine/wiki/Download"&gt;http://www.redmine.org/projects/redmine/wiki/Download&lt;/a&gt;&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# wget http://www.redmine.org/releases/redmine-3.2.0.tar.gz
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ダウンロードしたら展開・配置します。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# tar zxvf redmine-3.2.0.tar.gz
# mv redmine-3.2.0 /var/www/redmine
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;また、apacheからアクセスできるようにオーナーの変更をします。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# chown -R apache.apache /var/www/redmine/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;配置したredmineディレクトリ配下のconfigディレクトリに&amp;quot;database.yml&amp;quot;と&amp;quot;configuration.yml&amp;quot;を作成します。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;production:
  adapter: mysql2
  database: db_redmine
  host: &amp;lt;RDSのエンドポイント名&amp;gt;
  username: ユーザー
  password: "パスワード"
  encoding: utf8
&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;production:
  email_delivery:
    delivery_method: :smtp
    smtp_settings:
      address: "127.0.0.1"
      port: 25
      domain: 'ドメイン'

  rmagick_font_path: /usr/share/fonts/ipa-gothic/ipag.ttf
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id="4.redmine用gemパッケージの一括インストール"&gt;4.Redmine用Gemパッケージの一括インストール&lt;/h4&gt;

&lt;p&gt;bandlerを使ってRedmineが使用するGemを一括でインストールします。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# bundle install --without development test --path vendor/bundle
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id="5.redmineの初期設定とデータベースのテーブル作成"&gt;5.Redmineの初期設定とデータベースのテーブル作成&lt;/h4&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# bundle exec rake generate_secret_token
# RAILS_ENV=production bundle exec rake db:migrate
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id="passengerインストール"&gt;passengerインストール&lt;/h1&gt;

&lt;h4 id="1.passengerのインストール"&gt;1.passengerのインストール&lt;/h4&gt;

&lt;p&gt;Railsアプリケーションを実行するためのApacheモジュールであるpassengerをインストールします。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# gem install passenger --no-rdoc --no-ri
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id="2.apache用モジュールのインストール"&gt;2.Apache用モジュールのインストール&lt;/h4&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# passenger-install-apache2-module
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;以下のコマンドを実行することで、apacheに組み込む設定が確認できます。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# passenger-install-apache2-module --snippet
LoadModule passenger_module /usr/local/share/ruby/gems/2.0/gems/passenger-5.0.22/buildout/apache2/mod_passenger.so
&amp;lt;IfModule mod_passenger.c&amp;gt;
  PassengerRoot /usr/local/share/ruby/gems/2.0/gems/passenger-5.0.22
  PassengerDefaultRuby /usr/bin/ruby2.0
&amp;lt;/IfModule&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&amp;quot;/etc/httpd/conf.d/&amp;quot;にpassengerの設定ファイルを作成します。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# vim /etc/httpd/conf.d/passenger.conf
&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# Passengerの基本設定。
# passenger-install-apache2-module --snippet を実行して表示される設定を使用。
# 環境によって設定値が異なりますので以下の5行はそのまま転記しないでください。
#
LoadModule passenger_module /usr/local/share/ruby/gems/2.0/gems/passenger-5.0.22/buildout/apache2/mod_passenger.so
&amp;lt;IfModule mod_passenger.c&amp;gt;
  PassengerRoot /usr/local/share/ruby/gems/2.0/gems/passenger-5.0.22
  PassengerDefaultRuby /usr/bin/ruby2.0
&amp;lt;/IfModule&amp;gt;

# Passengerが追加するHTTPヘッダを削除するための設定（任意）。
#
Header always unset "X-Powered-By"
Header always unset "X-Rack-Cache"
Header always unset "X-Content-Digest"
Header always unset "X-Runtime"

# 必要に応じてPassengerのチューニングのための設定を追加（任意）。
# 詳しくはPhusion Passenger users guide(http://www.modrails.com/documentation/Users%20guide%20Apache.html)をご覧ください。
PassengerMaxPoolSize 20
PassengerMaxInstancesPerApp 4
PassengerPoolIdleTime 3600
PassengerHighPerformance on
PassengerStatThrottleRate 10
PassengerSpawnMethod smart
RailsAppSpawnerIdleTime 86400
PassengerMaxPreloaderIdleTime 0
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id="3.apache起動"&gt;3.apache起動&lt;/h4&gt;

&lt;p&gt;最後にapacheを起動します。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# service httpd start
# chkconfig httpd on
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;以上でRedmineのインストールが完了しました。&lt;/p&gt;
</content>
  </entry>
</feed>
