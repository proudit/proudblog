<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Blog Name</title>
  <subtitle>Blog subtitle</subtitle>
  <id>http://blog.url.com/</id>
  <link href="http://blog.url.com/"/>
  <link href="http://blog.url.com/feed.xml" rel="self"/>
  <updated>2016-03-14T09:00:00+09:00</updated>
  <author>
    <name>Blog Author</name>
  </author>
  <entry>
    <title>JAWSDAYS2016に参加してきました！</title>
    <link rel="alternate" href="http://blog.url.com/2016/03/14/jawsdays2016.html"/>
    <id>http://blog.url.com/2016/03/14/jawsdays2016.html</id>
    <published>2016-03-14T09:00:00+09:00</published>
    <updated>2016-03-14T17:03:12+09:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;div style="text-align:center"&gt;
&lt;img src="../../../images/2016/0314_jawsdays/20160314_jawsdays2016.png"&gt;
&lt;/div&gt;

&lt;p&gt;先日行われた「&lt;a href="http://jawsdays2016.jaws-ug.jp" target="_blank"&gt;JAWSDAYS2016&lt;/a&gt;」で、代表の小熊がスピーカーとして登壇させていただきましたー！&lt;br&gt;
&lt;div style="text-align:center"&gt;&lt;br&gt;
&lt;font size="2"&gt;&lt;br&gt;
&lt;img alt="jawsdays" src="/images/./2016/0314_jawsdays/20160314_jawsdays2016_01.jpg" /&gt;&lt;br&gt;
会場には顔ハメも用意♪&lt;br&gt;
&lt;/font&gt;&lt;br&gt;
&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;今回担当させていただいたのは「Workshop」ブースの１コマで「静的HTML公開フローをサーバレスでDevOps！」という内容で、簡単に言うと「HTMLやCSSなどで作成された静的サイトをサーバを利用しないで動かしちゃいましょう」という内容です。&lt;br&gt;
&lt;div style="text-align:center"&gt;&lt;br&gt;
&lt;font size="2"&gt;&lt;br&gt;
&lt;img alt="jawsdays" src="/images/./2016/0314_jawsdays/20160314_jawsdays2016_02.jpg" /&gt;&lt;br&gt;
なんと出番はトップバッター!&lt;br&gt;
&lt;/font&gt;&lt;br&gt;
&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;今まで登壇することがなかったのに、初めての場所が「JAWSDAYS2016」という参加者1,000人越えのビックイベント！！！どきどきですね。。。&lt;br&gt;
&lt;div style="text-align:center"&gt;&lt;br&gt;
&lt;font size="2"&gt;&lt;br&gt;
&lt;img alt="jawsdays" src="/images/./2016/0314_jawsdays/20160314_jawsdays2016_04.jpg" /&gt;&lt;br&gt;
土曜の朝からこの数。。。しかも9割ほど初参加だそうです。&lt;br&gt;
&lt;/font&gt;&lt;br&gt;
&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;そしていざ、開始ということだったのですが、、、、ネットワークが繋がらない！？&lt;br&gt;
&lt;div style="text-align:center"&gt;&lt;br&gt;
&lt;font size="2"&gt;&lt;br&gt;
&lt;img alt="jawsdays" src="/images/./2016/0314_jawsdays/20160314_jawsdays2016_03.jpg" /&gt;&lt;br&gt;
さっきまで繋がってたのに。。。トップバッターならではの障害ですね。。。&lt;br&gt;
&lt;/font&gt;&lt;br&gt;
&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;Workshop参加者用に用意していたネットワークがあったのですが、みんなが一斉に繋いだせいか回線がダウン。。。すぐに復旧しそうもないのでハンズオン形式は仕方なく諦めて、小熊さん実演を見てもらう形式に急遽変更。&lt;br&gt;
&lt;div style="text-align:center"&gt;&lt;br&gt;
&lt;font size="2"&gt;&lt;br&gt;
&lt;img alt="jawsdays" src="/images/./2016/0314_jawsdays/20160314_jawsdays2016_05.jpg" /&gt;&lt;br&gt;
&lt;img alt="jawsdays" src="/images/./2016/0314_jawsdays/20160314_jawsdays2016_06.jpg" /&gt;&lt;br&gt;
それでもすぐに気持ちを切り替えて対応！&lt;br&gt;
&lt;/font&gt;&lt;br&gt;
&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;初っ端のトラブルはありつつも、なんとか時間通り無事終了。参加してくださった方々もみんな真剣に最後まで聴いてくれていました。つくづくハンズオンできなくてすみません。。。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h1 id="最後に"&gt;最後に&lt;/h1&gt;

&lt;p&gt;今回イベントに参加してくださった皆様、登壇の機会を与えてくださった西島さん、Workshopを手伝ってくださった神さん、多田さん及び運営スタッフの皆様。&lt;br&gt;
本当にありがとうございました！これからもどんどん参加して行こうと思いますので、これからも宜しくお願い致します!!&lt;br&gt;
&lt;div style="text-align:center"&gt;&lt;br&gt;
&lt;font size="2"&gt;&lt;br&gt;
&lt;img alt="jawsdays" src="/images/./2016/0314_jawsdays/20160314_jawsdays2016_07.jpg" /&gt;&lt;br&gt;
左からサーバーワークス多田さんGENOVA神さん、プラウディット小熊、プラウディット山田&lt;br&gt;
&lt;/font&gt;&lt;br&gt;
&lt;/div&gt;&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>移転しました！</title>
    <link rel="alternate" href="http://blog.url.com/2016/03/11/itenosirase.html"/>
    <id>http://blog.url.com/2016/03/11/itenosirase.html</id>
    <published>2016-03-11T09:00:00+09:00</published>
    <updated>2016-03-14T17:05:05+09:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;3月よりオフィスを渋谷から新宿へ移転致しました。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;〒160-0022
東京都新宿区新宿6-7-22
エルプリメント新宿158号室
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href="https://www.directorz.co.jp/" target="_blank"&gt;ディレクターズ様&lt;/a&gt;から移転のお祝いを頂きました。&lt;br&gt;
執務机です！！&lt;/p&gt;

&lt;p&gt;&lt;img alt="机" src="/images/./2016/0311_iten/shitumudesk.jpg" /&gt;&lt;/p&gt;

&lt;p&gt;素敵な贈り物、ありがとうございました。&lt;br&gt;
大切に使わせて頂きます！&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>vnstatで手軽にtrafiicをモニタリング</title>
    <link rel="alternate" href="http://blog.url.com/2016/03/08/to-monitor-the-traffic-using-the-vnstat.html"/>
    <id>http://blog.url.com/2016/03/08/to-monitor-the-traffic-using-the-vnstat.html</id>
    <published>2016-03-08T09:00:00+09:00</published>
    <updated>2016-03-08T12:49:19+09:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;h1 id="はじめに"&gt;はじめに&lt;/h1&gt;

&lt;hr&gt;

&lt;p&gt;vnstatはコマンドベースのネットワークtrafficモニターです。&lt;br&gt;
trafficというとcactiとかmrtgといったのが最初に思い浮かぶと思いますが、それだとわざわざWebサーバを立てなくてはいけません。&lt;br&gt;
もっと手軽に導入できるのがvnstatです。&lt;br&gt;
また、時間別や日別など、様々なパターンでモニタリングができます。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h1 id="1.インストール"&gt;1.インストール&lt;/h1&gt;

&lt;hr&gt;

&lt;p&gt;ということでまず、インストール。&lt;/p&gt;

&lt;p&gt;今回利用するサーバはAmazon Linuxです。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ sudo yum install --enablerepo=epel vnstat
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;redhat系のインストールはepelリポジトリからyumインストールで可能ですが、ubuntu系はaptで以下の方法でインストールできます。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ sudo apt-get install vnstat vnstati
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;また、vnstatに関する設定は&lt;em&gt;/etc/vnstat.conf&lt;/em&gt;に記載され、データの保存場所やdata保存間隔などが設定できます。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h1 id="2.コマンド実行"&gt;2.コマンド実行&lt;/h1&gt;

&lt;hr&gt;

&lt;p&gt;それではコマンドを実行してみましょう。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ vnstat
No database found, nothing to do. Use --help for help.

A new database can be created with the following command:
vnstat -u -i eth0

Replace 'eth0' with the interface that should be monitored.

The following interfaces are currently available:
eth0 lo
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;“No database found …”&lt;/em&gt;と表示されました。&lt;br&gt;
インストールしたてで「まだデータベースが何もないよ！」と言っているみたいです。&lt;br&gt;
続きを読むと&lt;em&gt;”vnstat -u -i eth0”&lt;/em&gt;でデータベースが作成できると書いてあります。&lt;br&gt;
ということで、作成してみます。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h2 id="2.1.-db作成"&gt;2.1. DB作成&lt;/h2&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ vnstat -u -i eth0
Error: Unable to read database "/var/lib/vnstat/eth0".
Info: -&amp;gt; A new database has been created.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;一行目には”Error”とありますが、二行目には”Info”でデータベースが作成されたと記載があります。&lt;br&gt;
これでデータベースが新規に作成されました。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ ls /var/lib/vnstat/
eth0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ということで再度コマンドを実行します。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ vnstat
eth0: Not enough data available yet.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;まだ有効なデータがないと言われてしまいました。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h2 id="2.2-データの更新"&gt;2.2 データの更新&lt;/h2&gt;

&lt;p&gt;ということで、データを更新します。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ vnstat -u -i eth0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h2 id="2.3-データの確認"&gt;2.3 データの確認&lt;/h2&gt;

&lt;p&gt;では改めて確認してみましょう。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ vnstat
Database updated: Tue Jul 7 15:16:40 2015

eth0 since 07/07/15

rx: 25 KiB tx: 13 KiB total: 38 KiB

monthly
rx | tx | total | avg. rate
------------------------+-------------+-------------+---------------
Jul '15 25 KiB | 13 KiB | 38 KiB | 0.00 kbit/s
------------------------+-------------+-------------+---------------
estimated -- | -- | -- |

daily
rx | tx | total | avg. rate
------------------------+-------------+-------------+---------------
today 25 KiB | 13 KiB | 38 KiB | 0.01 kbit/s
------------------------+-------------+-------------+---------------
estimated -- | -- | -- |
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;デフォルトだと&lt;em&gt;monthly&lt;/em&gt;と&lt;em&gt;daily&lt;/em&gt;の2種類が表示されますが、オプションによって&lt;em&gt;weekly&lt;/em&gt;表示にすることも可能です。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ vnstat -w

eth0 / weekly

rx | tx | total | avg. rate
---------------------------+-------------+-------------+---------------
last 7 days 25 KiB | 13 KiB | 38 KiB | 0.00 kbit/s
current week 25 KiB | 13 KiB | 38 KiB | 0.00 kbit/s
---------------------------+-------------+-------------+---------------
estimated -- | -- | -- |
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h2 id="2.4.-オプションの確認"&gt;2.4. オプションの確認&lt;/h2&gt;

&lt;p&gt;どのような出力方法が可能かは、”--help”オプションで確認ができます。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ vnstat --help
vnStat 1.11 by Teemu Toivola &amp;lt;tst at iki dot fi&amp;gt;

-q, --query query database
-h, --hours show hours
-d, --days show days
-m, --months show months
-w, --weeks show weeks
-t, --top10 show top10
-s, --short use short output
-u, --update update database
-i, --iface select interface (default: eth0)
-?, --help short help
-v, --version show version
-tr, --traffic calculate traffic
-ru, --rateunit swap configured rate unit
-l, --live show transfer rate in real time

See also "--longhelp" for complete options list and "man vnstat".
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h2 id="2.5.-自動取得設定(daemonの起動)"&gt;2.5. 自動取得設定(daemonの起動)&lt;/h2&gt;

&lt;p&gt;また、この&lt;em&gt;vnstat&lt;/em&gt;は&lt;em&gt;daemon&lt;/em&gt;が用意されているので、起動するだけで自動で情報が取得できます。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ sudo service vnstat start
vnstatd を起動中: [ OK ]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h1 id="3.グラフの作成"&gt;3.グラフの作成&lt;/h1&gt;

&lt;hr&gt;

&lt;p&gt;また、&lt;em&gt;vnstati&lt;/em&gt;で取得したデータからpngのグラフも作成できます。&lt;br&gt;
rx：受信&lt;br&gt;
tx：送信&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h3 id="[月別(-m)]"&gt;[月別(-m)]&lt;/h3&gt;

&lt;p&gt;&lt;img alt="20160121_monthly.png" src="https://qiita-image-store.s3.amazonaws.com/0/82090/d2a7989b-8f62-4b63-8024-2ce3bbb9b7e4.png" /&gt;&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ vnstati -m -o ./monthly.png
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h3 id="[日別(-d)]"&gt;[日別(-d)]&lt;/h3&gt;

&lt;p&gt;&lt;img alt="20160121_daily.png" src="https://qiita-image-store.s3.amazonaws.com/0/82090/877feab1-5f7e-d49f-df81-1c3d5e6d1331.png" /&gt;&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ vnstati -d -o ./daily.png
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h3 id="[時間別(-h)]"&gt;[時間別(-h)]&lt;/h3&gt;

&lt;p&gt;&lt;img alt="20160121_hourly.png" src="https://qiita-image-store.s3.amazonaws.com/0/82090/0ce83c1b-8f71-d524-bf1c-92793bc9de7a.png" /&gt;&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ vnstati -h -o ./houly.png
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h3 id="[時間別サマリ(-vs)]"&gt;[時間別サマリ(-vs)]&lt;/h3&gt;

&lt;p&gt;&lt;img alt="20160121_hsum.png" src="https://qiita-image-store.s3.amazonaws.com/0/82090/e361b0b8-e3a9-958b-e086-eb2dd93c94d8.png" /&gt;&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ vnstati -vs -o ./hsum.png
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;以上のように、気軽に導入できグラフ化も可能なのがとても便利です。&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>S3の特定バケットへのアクセスを特定のCloudFrontからのみ許可する。</title>
    <link rel="alternate" href="http://blog.url.com/2016/02/29/a-s3bucket-is-allowed-access-only-from-cloudfront.html"/>
    <id>http://blog.url.com/2016/02/29/a-s3bucket-is-allowed-access-only-from-cloudfront.html</id>
    <published>2016-02-29T09:00:00+09:00</published>
    <updated>2016-02-29T12:31:09+09:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;h1 id="はじめに"&gt;はじめに&lt;/h1&gt;

&lt;hr&gt;

&lt;p&gt;S3内のコンテンツをCloudFrontを使って配信する際に、直接外部からS3へアクセスすることは制限しつつ、CloudFrontを通してはアクセスができるという設定をしてみました。&lt;br&gt;
&lt;img alt="cloudfront.png" src="https://qiita-image-store.s3.amazonaws.com/0/82090/fe714aba-8e94-9770-a027-363c8df5c887.png" /&gt;&lt;/p&gt;

&lt;p&gt;今回は拡張子が「.png」のアクセスがあった場合にS3へ振り分ける設定を入れ、さらにCloudFrontからのみしかそのバケットへはアクセスできないようにします。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h1 id="設定"&gt;設定&lt;/h1&gt;

&lt;hr&gt;

&lt;h1 id="1.s3の設定"&gt;1.S3の設定&lt;/h1&gt;

&lt;h2 id="1-1.バケットを作成しコンテンツをアップロードします。"&gt;1-1.バケットを作成しコンテンツをアップロードします。&lt;/h2&gt;

&lt;p&gt;今回はバケット名を「from-cloudfront-to-s3-test」とし、コンテンツには「&lt;a href="https://qiita-image-store.s3.amazonaws.com/0/82090/a5df31b8-3ffc-c3f6-1c0a-cc8f417d5595.png"&gt;test.png&lt;/a&gt;&lt;br&gt;
」を利用します。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h2 id="1-2.アップロードしたコンテンツへブラウザからアクセスし、閲覧できないことを確認します。"&gt;1-2.アップロードしたコンテンツへブラウザからアクセスし、閲覧できないことを確認します。&lt;/h2&gt;

&lt;p&gt;&lt;img alt="20151127_S3_Object-2-URL.png" src="https://qiita-image-store.s3.amazonaws.com/0/82090/824af88a-474f-ca3c-3ae5-04dbbe844822.png" /&gt;&lt;/p&gt;

&lt;p&gt;それでは設定をしてみます。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h1 id="2.サービス画面の表示"&gt;2.サービス画面の表示&lt;/h1&gt;

&lt;h2 id="2-1.コントロールパネルの「services」から「cloudfront」を選択します。"&gt;2-1.コントロールパネルの「Services」から「CloudFront」を選択します。&lt;/h2&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h1 id="3.originの作成"&gt;3.Originの作成&lt;/h1&gt;

&lt;h2 id="3-1.対象の「distribution」にチェックをし「distribution-settings」を選択します。"&gt;3-1.対象の「Distribution」にチェックをし「Distribution Settings」を選択します。&lt;/h2&gt;

&lt;p&gt;&lt;img alt="20151127_CloudFront_Distributions-1-1.png" src="https://qiita-image-store.s3.amazonaws.com/0/82090/74d6f3e6-470a-dacc-ab61-f3de4cda5167.png" /&gt;&lt;/p&gt;

&lt;p&gt;または対象のIDをクリックでもOKです。&lt;br&gt;
&lt;img alt="20151127_CloudFront_Distributions-1-2.png" src="https://qiita-image-store.s3.amazonaws.com/0/82090/ff0c0667-2658-a7b7-1e70-0197841330d0.png" /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h2 id="3-2.タブ「origins」を選択し「create-origin」をクリックします。"&gt;3-2.タブ「Origins」を選択し「Create Origin」をクリックします。&lt;/h2&gt;

&lt;p&gt;&lt;img alt="20151127_CloudFront_Distributions-2-1.png" src="https://qiita-image-store.s3.amazonaws.com/0/82090/6123ef8c-4733-c858-8af3-96de868854de.png" /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h2 id="3-3.「origin-domain-name」を今回準備したs3バケット(from-cloudfront-to-s3-test)に設定します。"&gt;3-3.「Origin Domain Name」を今回準備したS3バケット(from-cloudfront-to-s3-test)に設定します。&lt;/h2&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h2 id="3-4.「restrict-bucket-access」を[yes]を選択します。"&gt;3-4.「Restrict Bucket Access」を[Yes]を選択します。&lt;/h2&gt;

&lt;p&gt;　すると「Origin Access Identity」、「Comment」、「Grant Read Permission on Bucket」の項目が現れます。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h2 id="3-5.現れた項目に対し以下の内容を選択または入力します。"&gt;3-5.現れた項目に対し以下の内容を選択または入力します。&lt;/h2&gt;

&lt;p&gt;　・「Origin Access Identity」→「Create a New Identity」を選択。&lt;br&gt;
　・「Comment」→「access-idenntity-s3-access-test」と入力。&lt;br&gt;
　・「Grant Read Permission on Bucket」→「Yes,Update Bucket Policy」を選択。&lt;br&gt;
&lt;img alt="20151127_CloudFront_Distributions-2.png" src="https://qiita-image-store.s3.amazonaws.com/0/82090/08f33b7c-2600-3119-a6d5-7ed4d9451479.png" /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h2 id="3-6.「create」をクリックすると一覧に作成した「origin」がリストされます。"&gt;3-6.「Create」をクリックすると一覧に作成した「Origin」がリストされます。&lt;/h2&gt;

&lt;p&gt;&lt;img alt="20151127_CloudFront_Distributions-3.png" src="https://qiita-image-store.s3.amazonaws.com/0/82090/3dce78d7-147c-4c21-47fc-def1d8221c22.png" /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h1 id="4.behaviorの作成"&gt;4.Behaviorの作成&lt;/h1&gt;

&lt;h2 id="4-1.タブ「behaviors」を選択し、「create-behavior」をクリックします。"&gt;4-1.タブ「Behaviors」を選択し、「Create Behavior」をクリックします。&lt;/h2&gt;

&lt;p&gt;&lt;img alt="20151127_CloudFront_Distributions-4.png" src="https://qiita-image-store.s3.amazonaws.com/0/82090/9ba8b1d0-2272-8910-46ef-1f48b4dd416a.png" /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h2 id="4-2.「path-pattern」を「/*.png」と入力し、「origin」は「s3-from-cloudfront-to-s3-test」を選択します。(今回はその他はデフォルトのままにします。)"&gt;4-2.「Path Pattern」を「/*.png」と入力し、「Origin」は「S3-from-cloudfront-to-s3-test」を選択します。(今回はその他はデフォルトのままにします。)&lt;/h2&gt;

&lt;p&gt;&lt;img alt="20151127_CloudFront_Distributions-5.png" src="https://qiita-image-store.s3.amazonaws.com/0/82090/1acb3e83-61e7-f08a-ccbe-8e63c649ba63.png" /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h2 id="4-3.「create」をクリックすると一覧に「behavior」がリストされます。"&gt;4-3.「Create」をクリックすると一覧に「Behavior」がリストされます。&lt;/h2&gt;

&lt;p&gt;&lt;img alt="20151127_CloudFront_Distributions-6.png" src="https://qiita-image-store.s3.amazonaws.com/0/82090/35529fce-f03e-79f4-3934-7f7ceeee8a61.png" /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h1 id="5.反映確認"&gt;5.反映確認&lt;/h1&gt;

&lt;h2 id="5-1.左サイドばーの「distributions」または中央画面上部の「cloudfront-distributions」をクリックします。"&gt;5-1.左サイドばーの「Distributions」または中央画面上部の「CloudFront Distributions」をクリックします。&lt;/h2&gt;

&lt;p&gt;&lt;img alt="20151127_CloudFront_Distributions-8.png" src="https://qiita-image-store.s3.amazonaws.com/0/82090/cd0f808c-7707-81bf-5c6b-7dbe57b02344.png" /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h2 id="5-2.「status」項目が「in-progress」となっているのが確認できます。"&gt;5-2.「Status」項目が「In Progress」となっているのが確認できます。&lt;/h2&gt;

&lt;p&gt;&lt;img alt="20151127_CloudFront_Distributions-7.png" src="https://qiita-image-store.s3.amazonaws.com/0/82090/a49a403e-f9dd-24e7-dc9d-90ba733f40f7.png" /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h2 id="5-3.しばらく時間が経つと「status」項目が「deployed」となったら反映完了です。"&gt;5-3.しばらく時間が経つと「Status」項目が「Deployed」となったら反映完了です。&lt;/h2&gt;

&lt;p&gt;&lt;img alt="20151127_CloudFront_Distributions-9.png" src="https://qiita-image-store.s3.amazonaws.com/0/82090/44969d00-4da2-7b18-8b37-5b5af8ad623a.png" /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h2 id="5-4.cloudfront経由で「/test.png」へアクセスするとs3にアップ画像が表示されます。"&gt;5-4.CloudFront経由で「/test.png」へアクセスするとS3にアップ画像が表示されます。&lt;/h2&gt;

&lt;p&gt;&lt;img alt="20151127_CloudFront_Distributions-10.png" src="https://qiita-image-store.s3.amazonaws.com/0/82090/8e699ee8-3d5e-a60a-2b78-5969d5db10bc.png" /&gt;&lt;br&gt;
「CloudFront Distribution」画面からタブ「General」をクリックすると「Domain Name」が確認できるので、今回の場合はそれに続けて「/test.png」を入力してあげればOKです。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h1 id="おまけ"&gt;おまけ&lt;/h1&gt;

&lt;hr&gt;

&lt;p&gt;念のため、アップした際のS3の「Link」をアクセスすると「AccessDenied」の画面が表示されます。&lt;br&gt;
&lt;img alt="20151127_S3_AccessDenied.png" src="https://qiita-image-store.s3.amazonaws.com/0/82090/f4bea7a8-eac1-b675-5aba-113a087cd7ad.png" /&gt;&lt;/p&gt;

&lt;p&gt;また、バケットのPermissionについても確認してみます。&lt;br&gt;
&lt;img alt="20151127_S3_Object-3.png" src="https://qiita-image-store.s3.amazonaws.com/0/82090/6a189140-e7dc-f8cd-eb53-df868a4fc5fc.png" /&gt;&lt;br&gt;
「Edit bucket policy」をクリック。&lt;br&gt;
&lt;img alt="20151127_S3_Object-4.png" src="https://qiita-image-store.s3.amazonaws.com/0/82090/76320baf-0338-33c5-cb50-3149af4f5b5b.png" /&gt;&lt;br&gt;
CloudFrontの「from-cloudfront-to-s3-test」からアクセスができる設定が入っているのを確認できます。この設定はCloudFrontの「Origin」作成時に、「Grant Read Permission on Bucket」を[Yes]にすると追加されます。&lt;/p&gt;

&lt;p&gt;また、「from-cloudfront-to-s3-test」はCloudFrontの「Origin Access Identity」で確認できます。&lt;br&gt;
&lt;img alt="20151127_CloudFront_AccessIdentity-5.png" src="https://qiita-image-store.s3.amazonaws.com/0/82090/ed3ccb5d-d4f6-9a9a-0ab9-a9b318dc8e30.png" /&gt;&lt;br&gt;
これもCloudFrontの「Origin」作成時に「Origin Access Identity」を[Create a New Identity]にすることで今回は新規に作成しています。&lt;/p&gt;

&lt;p&gt;ということでアクセス許可設定が完了しました。&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>lsofを使ってプロセスが利用しているポートを確認する。</title>
    <link rel="alternate" href="http://blog.url.com/2016/02/22/how-to-use-lsof.html"/>
    <id>http://blog.url.com/2016/02/22/how-to-use-lsof.html</id>
    <published>2016-02-22T09:00:00+09:00</published>
    <updated>2016-02-23T13:17:38+09:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;&lt;code&gt;lsof&lt;/code&gt;を使ってプロセスが利用しているポートを確認します。&lt;/p&gt;

&lt;p&gt;利用シーンとして、自分はzabbixなどでポートやプロセスの監視設定をするときの確認で使ったりします。&lt;/p&gt;

&lt;h1 id="利用されているポートを表示する"&gt;利用されているポートを表示する&lt;/h1&gt;

&lt;p&gt;まずは、現在利用されているポートの一覧を表示します。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# lsof -i
COMMAND    PID     USER   FD   TYPE  DEVICE SIZE/OFF NODE NAME
dhclient  1254     root    5u  IPv4    6837      0t0  UDP *:bootpc
sshd      1440     root    3u  IPv4    7378      0t0  TCP *:ssh (LISTEN)
sshd      1440     root    4u  IPv6    7380      0t0  TCP *:ssh (LISTEN)
mysqld    2055    mysql   17u  IPv4    8001      0t0  TCP *:mysql (LISTEN)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;このコマンドにパイプ( | )でgrep LISTENなどを付け加えてあげると&lt;br&gt;
LISTENしているプロセスのみが表示させることができます。&lt;/p&gt;

&lt;h1 id="あるポートを利用しているプロセスを調べる"&gt;あるポートを利用しているプロセスを調べる&lt;/h1&gt;

&lt;p&gt;オプション&lt;code&gt;-i:ポート番号&lt;/code&gt;でそのポートを利用しているプロセスを調べることができます。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# lsof -i:80
COMMAND   PID  USER   FD   TYPE  DEVICE SIZE/OFF NODE NAME
nginx   27576  root   10u  IPv4 3025923      0t0  TCP *:http (LISTEN)
nginx   27578 nginx   10u  IPv4 3025923      0t0  TCP *:http (LISTEN)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ここでは&lt;em&gt;80&lt;/em&gt;番ポートはnginxが利用しているというのがわかります。&lt;/p&gt;

&lt;p&gt;カンマ区切りで番号をしていると、複数ポートを同時に調べることもできます。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# lsof -i:22,80
COMMAND   PID     USER   FD   TYPE  DEVICE SIZE/OFF NODE NAME
sshd     1440     root    3u  IPv4    7378      0t0  TCP *:ssh (LISTEN)
sshd     1440     root    4u  IPv6    7380      0t0  TCP *:ssh (LISTEN)
sshd    27402     root    3u  IPv4 3024720      0t0  TCP 10.0.0.229:ssh-&amp;gt;s225.HtokyoFL3.vectant.ne.jp:50596 (ESTABLISHED)
sshd    27404 ec2-user    3u  IPv4 3024720      0t0  TCP 10.0.0.229:ssh-&amp;gt;s225.HtokyoFL3.vectant.ne.jp:50596 (ESTABLISHED)
nginx   27576     root   10u  IPv4 3025923      0t0  TCP *:http (LISTEN)
nginx   27578    nginx   10u  IPv4 3025923      0t0  TCP *:http (LISTEN)
nginx   27578    nginx   15u  IPv4 3058872      0t0  TCP 10.0.0.229:http-&amp;gt;s225.HtokyoFL3.vectant.ne.jp:54589 (ESTABLISHED)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;さらに&lt;code&gt;-iTCP&lt;/code&gt;や&lt;code&gt;-iUDP&lt;/code&gt;でTCPやUDPの指定をすることも可能です。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# lsof -iTCP:22
COMMAND   PID     USER   FD   TYPE  DEVICE SIZE/OFF NODE NAME
sshd     1440     root    3u  IPv4    7378      0t0  TCP *:ssh (LISTEN)
sshd     1440     root    4u  IPv6    7380      0t0  TCP *:ssh (LISTEN)
sshd    27402     root    3u  IPv4 3024720      0t0  TCP 10.0.0.229:ssh-&amp;gt;s225.HtokyoFL3.vectant.ne.jp:50596 (ESTABLISHED)
sshd    27404 ec2-user    3u  IPv4 3024720      0t0  TCP 10.0.0.229:ssh-&amp;gt;s225.HtokyoFL3.vectant.ne.jp:50596 (ESTABLISHED)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;【項目について】&lt;br&gt;
COMMAND : 実行プログラム&lt;br&gt;
PID : プロセスID&lt;br&gt;
USER : 実行ユーザ&lt;br&gt;
NODE : プロトコル&lt;br&gt;
NAME : ポート&lt;br&gt;
(LISTEN) : 待ち受け状態&lt;/p&gt;

&lt;p&gt;今回はポートを利用しているプロセスの表示ですが、せっかくなので他の用途も載せておきます。&lt;/p&gt;

&lt;h1 id="特定のpidを持つプロセスが開いているファイルを表示"&gt;特定のPIDを持つプロセスが開いているファイルを表示&lt;/h1&gt;

&lt;p&gt;&lt;code&gt;-p&lt;/code&gt;オプションはプロセスIDを元に、そのプロセスが利用しているファイルなどを表示します。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# lsof -p 1440
COMMAND  PID USER   FD   TYPE DEVICE SIZE/OFF NODE NAME
sshd    1440 root  cwd    DIR  202,1     4096    2 /
sshd    1440 root  rtd    DIR  202,1     4096    2 /
sshd    1440 root  txt    REG  202,1   617128 7432 /usr/sbin/sshd
sshd    1440 root  mem    REG  202,1    62864 3764 /lib64/libnss_files-2.17.so
sshd    1440 root  mem    REG  202,1    44224 3776 /lib64/librt-2.17.so
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id="特定のプロセスが開いているファイルを表示"&gt;特定のプロセスが開いているファイルを表示&lt;/h1&gt;

&lt;p&gt;&lt;code&gt;-c&lt;/code&gt;オプションは特定のプロセスが利用しているファイルなどを表示します。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# lsof -c nginx
COMMAND   PID  USER   FD   TYPE             DEVICE SIZE/OFF    NODE NAME
nginx   27576  root  cwd    DIR              202,1     4096  272412 /etc/nginx/conf.d
nginx   27576  root  rtd    DIR              202,1     4096       2 /
nginx   27576  root  txt    REG              202,1   964976   18099 /usr/sbin/nginx
nginx   27576  root  DEL    REG                0,4          3025922 /dev/zero
nginx   27576  root  mem    REG              202,1    22096  272808　/usr/lib64/perl5/vendor_perl/auto/nginx/nginx.so
nginx   27576  root  mem    REG              202,1    62864    3764 /lib64/libnss_files-2.17.so
nginx   27576  root  mem    REG              202,1    10856    6562 /usr/lib64/libXau.so.6.0.0
nginx   27576  root  mem    REG              202,1   126288    3886 /usr/lib64/libselinux.so.1
nginx   27576  root  mem    REG              202,1   165264    4092 /lib64/libexpat.so.1.5.2
nginx   27576  root  mem    REG              202,1   122312    6606 /usr/lib64/libxcb.so.1.1.0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;以上。&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Redmineのバージョンを確認する。</title>
    <link rel="alternate" href="http://blog.url.com/2016/02/15/comfirm-a-version-of-redmine.html"/>
    <id>http://blog.url.com/2016/02/15/comfirm-a-version-of-redmine.html</id>
    <published>2016-02-15T09:00:00+09:00</published>
    <updated>2016-02-15T17:31:59+09:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;Redmineのバージョンを確認する方法です。&lt;/p&gt;

&lt;p&gt;方法としては「1.管理画面で確認」「2.コマンドで確認」「3.ソースコードで確認」の３通り紹介します。&lt;/p&gt;

&lt;h1 id="1.管理画面で確認"&gt;1.管理画面で確認&lt;/h1&gt;

&lt;h5 id="1-1.管理者権限のあるアカウントでredmineへログインします。"&gt;1-1.管理者権限のあるアカウントでRedmineへログインします。&lt;/h5&gt;

&lt;h5 id="1-2.「管理」をクリックします。"&gt;1-2.「管理」をクリックします。&lt;/h5&gt;

&lt;p&gt;&lt;img width="332" alt="20160112_redmine01.png" src="https://qiita-image-store.s3.amazonaws.com/0/82090/df5492e0-2af2-5c90-4946-9db76e5d44ab.png"&gt;&lt;/p&gt;

&lt;h5 id="1-3.「情報」をクリックします。"&gt;1-3.「情報」をクリックします。&lt;/h5&gt;

&lt;p&gt;&lt;img width="202" alt="20160112_redmine02.png" src="https://qiita-image-store.s3.amazonaws.com/0/82090/84d8540b-d699-5aa6-382b-ba8baeeac291.png"&gt;&lt;/p&gt;

&lt;h5 id="1-4.画面上部に表示されます。"&gt;1-4.画面上部に表示されます。&lt;/h5&gt;

&lt;p&gt;&lt;img width="995" alt="20160112_redmine03.png" src="https://qiita-image-store.s3.amazonaws.com/0/82090/ee8ee97a-9344-6619-97d5-78f4e01f30a7.png"&gt;&lt;/p&gt;

&lt;p&gt;バージョンの他にも、&lt;br&gt;
・Redmineのインストールの正常性&lt;br&gt;
・データベースの種類&lt;br&gt;
・Rdmineの実行環境&lt;br&gt;
などが確認できます。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h1 id="2.コマンドで確認"&gt;2.コマンドで確認&lt;/h1&gt;

&lt;h5 id="2-1.サーバへログインし、redmineをインストールしたディレクトリへ移動します。"&gt;2-1.サーバへログインし、Redmineをインストールしたディレクトリへ移動します。&lt;/h5&gt;

&lt;h5 id="2-2.以下のコマンドを実行します。"&gt;2-2.以下のコマンドを実行します。&lt;/h5&gt;

&lt;p&gt;※旧バージョンだとscript/aboutの場合があります。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ ruby bin/about 
&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Environment:
  Redmine version                3.2.0.stable
  Ruby version                   2.0.0-p647 (2015-08-18) [x86_64-linux]
  Rails version                  4.2.5
  Environment                    production
  Database adapter               Mysql2
SCM:
  Subversion                     1.8.13
  Git                            2.4.3
  Filesystem                     
Redmine plugins:
  no plugin installed
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;管理画面で表示されているものと同等の内容が確認できます。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h1 id="3.ソースコードで確認"&gt;3.ソースコードで確認&lt;/h1&gt;

&lt;h5 id="3-1.サーバへログインし、redmineをインストールしたディレクトリへ移動します。"&gt;3-1.サーバへログインし、Redmineをインストールしたディレクトリへ移動します。&lt;/h5&gt;

&lt;p&gt;lib/redmine/version.rbの冒頭にバージョンを表す数値が定義されています。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ cat lib/redmine/version.rb 
require 'rexml/document'

module Redmine
  module VERSION #:nodoc:
    MAJOR = 3
    MINOR = 2
    TINY  = 0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;以上の３つの方法がありますが。&lt;br&gt;
管理権限付きのユーザーを持っているのであれば「1.管理画面で確認」を行うのが一番良さそうです。&lt;br&gt;
もし、管理画面へログインするアカウントがい場合は「2.コマンドで確認」が有効です。&lt;br&gt;
また、「3.ソースコードで確認」は一応紹介しましたが、これを行うのであれば、「2.コマンドで確認」を行う方が良いです。&lt;/p&gt;
</content>
  </entry>
</feed>
