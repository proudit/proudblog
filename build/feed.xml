<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Blog Name</title>
  <subtitle>Blog subtitle</subtitle>
  <id>http://blog.url.com/</id>
  <link href="http://blog.url.com/"/>
  <link href="http://blog.url.com/feed.xml" rel="self"/>
  <updated>2016-02-29T09:00:00+09:00</updated>
  <author>
    <name>Blog Author</name>
  </author>
  <entry>
    <title>S3の特定バケットへのアクセスを特定のCloudFrontからのみ許可する。</title>
    <link rel="alternate" href="http://blog.url.com/2016/02/29/a-s3bucket-is-allowed-access-only-from-cloudfront.html"/>
    <id>http://blog.url.com/2016/02/29/a-s3bucket-is-allowed-access-only-from-cloudfront.html</id>
    <published>2016-02-29T09:00:00+09:00</published>
    <updated>2016-02-29T11:54:18+09:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;h1 id="はじめに"&gt;はじめに&lt;/h1&gt;

&lt;hr&gt;

&lt;p&gt;S3内のコンテンツをCloudFrontを使って配信する際に、直接外部からS3へアクセスすることは制限しつつ、CloudFrontを通してはアクセスができるという設定をしてみました。&lt;br&gt;
&lt;img alt="cloudfront.png" src="https://qiita-image-store.s3.amazonaws.com/0/82090/fe714aba-8e94-9770-a027-363c8df5c887.png" /&gt;&lt;/p&gt;

&lt;p&gt;今回は拡張子が「.png」のアクセスがあった場合にS3へ振り分ける設定を入れ、さらにCloudFrontからのみしかそのバケットへはアクセスできないようにします。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h1 id="設定"&gt;設定&lt;/h1&gt;

&lt;hr&gt;

&lt;h1 id="1.s3の設定"&gt;1.S3の設定&lt;/h1&gt;

&lt;h2 id="1-1.バケットを作成しコンテンツをアップロードします。"&gt;1-1.バケットを作成しコンテンツをアップロードします。&lt;/h2&gt;

&lt;p&gt;今回はバケット名を「from-cloudfront-to-s3-test」とし、コンテンツには「&lt;a href="https://qiita-image-store.s3.amazonaws.com/0/82090/a5df31b8-3ffc-c3f6-1c0a-cc8f417d5595.png"&gt;test.png&lt;/a&gt;&lt;br&gt;
」を利用します。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h2 id="1-2.アップロードしたコンテンツへブラウザからアクセスし、閲覧できないことを確認します。"&gt;1-2.アップロードしたコンテンツへブラウザからアクセスし、閲覧できないことを確認します。&lt;/h2&gt;

&lt;p&gt;&lt;img alt="20151127_S3_Object-2-URL.png" src="https://qiita-image-store.s3.amazonaws.com/0/82090/824af88a-474f-ca3c-3ae5-04dbbe844822.png" /&gt;&lt;/p&gt;

&lt;p&gt;それでは設定をしてみます。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h1 id="2.サービス画面の表示"&gt;2.サービス画面の表示&lt;/h1&gt;

&lt;h2 id="2-1.コントロールパネルの「services」から「cloudfront」を選択します。"&gt;2-1.コントロールパネルの「Services」から「CloudFront」を選択します。&lt;/h2&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h1 id="3.originの作成"&gt;3.Originの作成&lt;/h1&gt;

&lt;h2 id="3-1.対象の「distribution」にチェックをし「distribution-settings」を選択します。"&gt;3-1.対象の「Distribution」にチェックをし「Distribution Settings」を選択します。&lt;/h2&gt;

&lt;p&gt;&lt;img alt="20151127_CloudFront_Distributions-1-1.png" src="https://qiita-image-store.s3.amazonaws.com/0/82090/74d6f3e6-470a-dacc-ab61-f3de4cda5167.png" /&gt;&lt;/p&gt;

&lt;p&gt;または対象のIDをクリックでもOKです。&lt;br&gt;
&lt;img alt="20151127_CloudFront_Distributions-1-2.png" src="https://qiita-image-store.s3.amazonaws.com/0/82090/ff0c0667-2658-a7b7-1e70-0197841330d0.png" /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h2 id="3-2.タブ「origins」を選択し「create-origin」をクリックします。"&gt;3-2.タブ「Origins」を選択し「Create Origin」をクリックします。&lt;/h2&gt;

&lt;p&gt;&lt;img alt="20151127_CloudFront_Distributions-2-1.png" src="https://qiita-image-store.s3.amazonaws.com/0/82090/6123ef8c-4733-c858-8af3-96de868854de.png" /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h2 id="3-3.「origin-domain-name」を今回準備したs3バケット(from-cloudfront-to-s3-test)に設定します。"&gt;3-3.「Origin Domain Name」を今回準備したS3バケット(from-cloudfront-to-s3-test)に設定します。&lt;/h2&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h2 id="3-4.「restrict-bucket-access」を[yes]を選択します。"&gt;3-4.「Restrict Bucket Access」を[Yes]を選択します。&lt;/h2&gt;

&lt;p&gt;　すると「Origin Access Identity」、「Comment」、「Grant Read Permission on Bucket」の項目が現れます。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h2 id="3-5.現れた項目に対し以下の内容を選択または入力します。"&gt;3-5.現れた項目に対し以下の内容を選択または入力します。&lt;/h2&gt;

&lt;p&gt;　・「Origin Access Identity」→「Create a New Identity」を選択。&lt;br&gt;
　・「Comment」→「access-idenntity-s3-access-test」と入力。&lt;br&gt;
　・「Grant Read Permission on Bucket」→「Yes,Update Bucket Policy」を選択。&lt;br&gt;
&lt;img alt="20151127_CloudFront_Distributions-2.png" src="https://qiita-image-store.s3.amazonaws.com/0/82090/08f33b7c-2600-3119-a6d5-7ed4d9451479.png" /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h2 id="3-6.「create」をクリックすると一覧に作成した「origin」がリストされます。"&gt;3-6.「Create」をクリックすると一覧に作成した「Origin」がリストされます。&lt;/h2&gt;

&lt;p&gt;&lt;img alt="20151127_CloudFront_Distributions-3.png" src="https://qiita-image-store.s3.amazonaws.com/0/82090/3dce78d7-147c-4c21-47fc-def1d8221c22.png" /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h1 id="4.behaviorの作成"&gt;4.Behaviorの作成&lt;/h1&gt;

&lt;h2 id="4-1.タブ「behaviors」を選択し、「create-behavior」をクリックします。"&gt;4-1.タブ「Behaviors」を選択し、「Create Behavior」をクリックします。&lt;/h2&gt;

&lt;p&gt;&lt;img alt="20151127_CloudFront_Distributions-4.png" src="https://qiita-image-store.s3.amazonaws.com/0/82090/9ba8b1d0-2272-8910-46ef-1f48b4dd416a.png" /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h2 id="4-2.「path-pattern」を「/*.png」と入力し、「origin」は「s3-from-cloudfront-to-s3-test」を選択します。(今回はその他はデフォルトのままにします。)"&gt;4-2.「Path Pattern」を「/*.png」と入力し、「Origin」は「S3-from-cloudfront-to-s3-test」を選択します。(今回はその他はデフォルトのままにします。)&lt;/h2&gt;

&lt;p&gt;&lt;img alt="20151127_CloudFront_Distributions-5.png" src="https://qiita-image-store.s3.amazonaws.com/0/82090/1acb3e83-61e7-f08a-ccbe-8e63c649ba63.png" /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h2 id="4-3.「create」をクリックすると一覧に「behavior」がリストされます。"&gt;4-3.「Create」をクリックすると一覧に「Behavior」がリストされます。&lt;/h2&gt;

&lt;p&gt;&lt;img alt="20151127_CloudFront_Distributions-6.png" src="https://qiita-image-store.s3.amazonaws.com/0/82090/35529fce-f03e-79f4-3934-7f7ceeee8a61.png" /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h1 id="5.反映確認"&gt;5.反映確認&lt;/h1&gt;

&lt;h2 id="5-1.左サイドばーの「distributions」または中央画面上部の「cloudfront-distributions」をクリックします。"&gt;5-1.左サイドばーの「Distributions」または中央画面上部の「CloudFront Distributions」をクリックします。&lt;/h2&gt;

&lt;p&gt;&lt;img alt="20151127_CloudFront_Distributions-8.png" src="https://qiita-image-store.s3.amazonaws.com/0/82090/cd0f808c-7707-81bf-5c6b-7dbe57b02344.png" /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h2 id="5-2.「status」項目が「in-progress」となっているのが確認できます。"&gt;5-2.「Status」項目が「In Progress」となっているのが確認できます。&lt;/h2&gt;

&lt;p&gt;&lt;img alt="20151127_CloudFront_Distributions-7.png" src="https://qiita-image-store.s3.amazonaws.com/0/82090/a49a403e-f9dd-24e7-dc9d-90ba733f40f7.png" /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h2 id="5-3.しばらく時間が経つと「status」項目が「deployed」となったら反映完了です。"&gt;5-3.しばらく時間が経つと「Status」項目が「Deployed」となったら反映完了です。&lt;/h2&gt;

&lt;p&gt;&lt;img alt="20151127_CloudFront_Distributions-9.png" src="https://qiita-image-store.s3.amazonaws.com/0/82090/44969d00-4da2-7b18-8b37-5b5af8ad623a.png" /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h2 id="5-4.cloudfront経由で「/test.png」へアクセスするとs3にアップ画像が表示されます。"&gt;5-4.CloudFront経由で「/test.png」へアクセスするとS3にアップ画像が表示されます。&lt;/h2&gt;

&lt;p&gt;&lt;img alt="20151127_CloudFront_Distributions-10.png" src="https://qiita-image-store.s3.amazonaws.com/0/82090/8e699ee8-3d5e-a60a-2b78-5969d5db10bc.png" /&gt;&lt;br&gt;
「CloudFront Distribution」画面からタブ「General」をクリックすると「Domain Name」が確認できるので、今回の場合はそれに続けて「/test.png」を入力してあげればOKです。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h1 id="おまけ"&gt;おまけ&lt;/h1&gt;

&lt;hr&gt;

&lt;p&gt;念のため、アップした際のS3の「Link」をアクセスすると「AccessDenied」の画面が表示されます。&lt;br&gt;
&lt;img alt="20151127_S3_AccessDenied.png" src="https://qiita-image-store.s3.amazonaws.com/0/82090/f4bea7a8-eac1-b675-5aba-113a087cd7ad.png" /&gt;&lt;/p&gt;

&lt;p&gt;また、バケットのPermissionについても確認してみます。&lt;br&gt;
&lt;img alt="20151127_S3_Object-3.png" src="https://qiita-image-store.s3.amazonaws.com/0/82090/6a189140-e7dc-f8cd-eb53-df868a4fc5fc.png" /&gt;&lt;br&gt;
「Edit bucket policy」をクリック。&lt;br&gt;
&lt;img alt="20151127_S3_Object-4.png" src="https://qiita-image-store.s3.amazonaws.com/0/82090/76320baf-0338-33c5-cb50-3149af4f5b5b.png" /&gt;&lt;br&gt;
CloudFrontの「from-cloudfront-to-s3-test」からアクセスができる設定が入っているのを確認できます。この設定はCloudFrontの「Origin」作成時に、「Grant Read Permission on Bucket」を[Yes]にすると追加されます。&lt;/p&gt;

&lt;p&gt;また、「from-cloudfront-to-s3-test」はCloudFrontの「Origin Access Identity」で確認できます。&lt;br&gt;
&lt;img alt="20151127_CloudFront_AccessIdentity-5.png" src="https://qiita-image-store.s3.amazonaws.com/0/82090/ed3ccb5d-d4f6-9a9a-0ab9-a9b318dc8e30.png" /&gt;&lt;br&gt;
これもCloudFrontの「Origin」作成時に「Origin Access Identity」を[Create a New Identity]にすることで今回は新規に作成しています。&lt;/p&gt;

&lt;p&gt;ということでアクセス許可設定が完了しました。&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>lsofを使ってプロセスが利用しているポートを確認する。</title>
    <link rel="alternate" href="http://blog.url.com/2016/02/22/how-to-use-lsof.html"/>
    <id>http://blog.url.com/2016/02/22/how-to-use-lsof.html</id>
    <published>2016-02-22T09:00:00+09:00</published>
    <updated>2016-02-23T13:17:38+09:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;&lt;code&gt;lsof&lt;/code&gt;を使ってプロセスが利用しているポートを確認します。&lt;/p&gt;

&lt;p&gt;利用シーンとして、自分はzabbixなどでポートやプロセスの監視設定をするときの確認で使ったりします。&lt;/p&gt;

&lt;h1 id="利用されているポートを表示する"&gt;利用されているポートを表示する&lt;/h1&gt;

&lt;p&gt;まずは、現在利用されているポートの一覧を表示します。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# lsof -i
COMMAND    PID     USER   FD   TYPE  DEVICE SIZE/OFF NODE NAME
dhclient  1254     root    5u  IPv4    6837      0t0  UDP *:bootpc
sshd      1440     root    3u  IPv4    7378      0t0  TCP *:ssh (LISTEN)
sshd      1440     root    4u  IPv6    7380      0t0  TCP *:ssh (LISTEN)
mysqld    2055    mysql   17u  IPv4    8001      0t0  TCP *:mysql (LISTEN)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;このコマンドにパイプ( | )でgrep LISTENなどを付け加えてあげると&lt;br&gt;
LISTENしているプロセスのみが表示させることができます。&lt;/p&gt;

&lt;h1 id="あるポートを利用しているプロセスを調べる"&gt;あるポートを利用しているプロセスを調べる&lt;/h1&gt;

&lt;p&gt;オプション&lt;code&gt;-i:ポート番号&lt;/code&gt;でそのポートを利用しているプロセスを調べることができます。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# lsof -i:80
COMMAND   PID  USER   FD   TYPE  DEVICE SIZE/OFF NODE NAME
nginx   27576  root   10u  IPv4 3025923      0t0  TCP *:http (LISTEN)
nginx   27578 nginx   10u  IPv4 3025923      0t0  TCP *:http (LISTEN)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ここでは&lt;em&gt;80&lt;/em&gt;番ポートはnginxが利用しているというのがわかります。&lt;/p&gt;

&lt;p&gt;カンマ区切りで番号をしていると、複数ポートを同時に調べることもできます。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# lsof -i:22,80
COMMAND   PID     USER   FD   TYPE  DEVICE SIZE/OFF NODE NAME
sshd     1440     root    3u  IPv4    7378      0t0  TCP *:ssh (LISTEN)
sshd     1440     root    4u  IPv6    7380      0t0  TCP *:ssh (LISTEN)
sshd    27402     root    3u  IPv4 3024720      0t0  TCP 10.0.0.229:ssh-&amp;gt;s225.HtokyoFL3.vectant.ne.jp:50596 (ESTABLISHED)
sshd    27404 ec2-user    3u  IPv4 3024720      0t0  TCP 10.0.0.229:ssh-&amp;gt;s225.HtokyoFL3.vectant.ne.jp:50596 (ESTABLISHED)
nginx   27576     root   10u  IPv4 3025923      0t0  TCP *:http (LISTEN)
nginx   27578    nginx   10u  IPv4 3025923      0t0  TCP *:http (LISTEN)
nginx   27578    nginx   15u  IPv4 3058872      0t0  TCP 10.0.0.229:http-&amp;gt;s225.HtokyoFL3.vectant.ne.jp:54589 (ESTABLISHED)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;さらに&lt;code&gt;-iTCP&lt;/code&gt;や&lt;code&gt;-iUDP&lt;/code&gt;でTCPやUDPの指定をすることも可能です。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# lsof -iTCP:22
COMMAND   PID     USER   FD   TYPE  DEVICE SIZE/OFF NODE NAME
sshd     1440     root    3u  IPv4    7378      0t0  TCP *:ssh (LISTEN)
sshd     1440     root    4u  IPv6    7380      0t0  TCP *:ssh (LISTEN)
sshd    27402     root    3u  IPv4 3024720      0t0  TCP 10.0.0.229:ssh-&amp;gt;s225.HtokyoFL3.vectant.ne.jp:50596 (ESTABLISHED)
sshd    27404 ec2-user    3u  IPv4 3024720      0t0  TCP 10.0.0.229:ssh-&amp;gt;s225.HtokyoFL3.vectant.ne.jp:50596 (ESTABLISHED)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;【項目について】&lt;br&gt;
COMMAND : 実行プログラム&lt;br&gt;
PID : プロセスID&lt;br&gt;
USER : 実行ユーザ&lt;br&gt;
NODE : プロトコル&lt;br&gt;
NAME : ポート&lt;br&gt;
(LISTEN) : 待ち受け状態&lt;/p&gt;

&lt;p&gt;今回はポートを利用しているプロセスの表示ですが、せっかくなので他の用途も載せておきます。&lt;/p&gt;

&lt;h1 id="特定のpidを持つプロセスが開いているファイルを表示"&gt;特定のPIDを持つプロセスが開いているファイルを表示&lt;/h1&gt;

&lt;p&gt;&lt;code&gt;-p&lt;/code&gt;オプションはプロセスIDを元に、そのプロセスが利用しているファイルなどを表示します。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# lsof -p 1440
COMMAND  PID USER   FD   TYPE DEVICE SIZE/OFF NODE NAME
sshd    1440 root  cwd    DIR  202,1     4096    2 /
sshd    1440 root  rtd    DIR  202,1     4096    2 /
sshd    1440 root  txt    REG  202,1   617128 7432 /usr/sbin/sshd
sshd    1440 root  mem    REG  202,1    62864 3764 /lib64/libnss_files-2.17.so
sshd    1440 root  mem    REG  202,1    44224 3776 /lib64/librt-2.17.so
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id="特定のプロセスが開いているファイルを表示"&gt;特定のプロセスが開いているファイルを表示&lt;/h1&gt;

&lt;p&gt;&lt;code&gt;-c&lt;/code&gt;オプションは特定のプロセスが利用しているファイルなどを表示します。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# lsof -c nginx
COMMAND   PID  USER   FD   TYPE             DEVICE SIZE/OFF    NODE NAME
nginx   27576  root  cwd    DIR              202,1     4096  272412 /etc/nginx/conf.d
nginx   27576  root  rtd    DIR              202,1     4096       2 /
nginx   27576  root  txt    REG              202,1   964976   18099 /usr/sbin/nginx
nginx   27576  root  DEL    REG                0,4          3025922 /dev/zero
nginx   27576  root  mem    REG              202,1    22096  272808　/usr/lib64/perl5/vendor_perl/auto/nginx/nginx.so
nginx   27576  root  mem    REG              202,1    62864    3764 /lib64/libnss_files-2.17.so
nginx   27576  root  mem    REG              202,1    10856    6562 /usr/lib64/libXau.so.6.0.0
nginx   27576  root  mem    REG              202,1   126288    3886 /usr/lib64/libselinux.so.1
nginx   27576  root  mem    REG              202,1   165264    4092 /lib64/libexpat.so.1.5.2
nginx   27576  root  mem    REG              202,1   122312    6606 /usr/lib64/libxcb.so.1.1.0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;以上。&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Redmineのバージョンを確認する。</title>
    <link rel="alternate" href="http://blog.url.com/2016/02/15/comfirm-a-version-of-redmine.html"/>
    <id>http://blog.url.com/2016/02/15/comfirm-a-version-of-redmine.html</id>
    <published>2016-02-15T09:00:00+09:00</published>
    <updated>2016-02-15T17:31:59+09:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;Redmineのバージョンを確認する方法です。&lt;/p&gt;

&lt;p&gt;方法としては「1.管理画面で確認」「2.コマンドで確認」「3.ソースコードで確認」の３通り紹介します。&lt;/p&gt;

&lt;h1 id="1.管理画面で確認"&gt;1.管理画面で確認&lt;/h1&gt;

&lt;h5 id="1-1.管理者権限のあるアカウントでredmineへログインします。"&gt;1-1.管理者権限のあるアカウントでRedmineへログインします。&lt;/h5&gt;

&lt;h5 id="1-2.「管理」をクリックします。"&gt;1-2.「管理」をクリックします。&lt;/h5&gt;

&lt;p&gt;&lt;img width="332" alt="20160112_redmine01.png" src="https://qiita-image-store.s3.amazonaws.com/0/82090/df5492e0-2af2-5c90-4946-9db76e5d44ab.png"&gt;&lt;/p&gt;

&lt;h5 id="1-3.「情報」をクリックします。"&gt;1-3.「情報」をクリックします。&lt;/h5&gt;

&lt;p&gt;&lt;img width="202" alt="20160112_redmine02.png" src="https://qiita-image-store.s3.amazonaws.com/0/82090/84d8540b-d699-5aa6-382b-ba8baeeac291.png"&gt;&lt;/p&gt;

&lt;h5 id="1-4.画面上部に表示されます。"&gt;1-4.画面上部に表示されます。&lt;/h5&gt;

&lt;p&gt;&lt;img width="995" alt="20160112_redmine03.png" src="https://qiita-image-store.s3.amazonaws.com/0/82090/ee8ee97a-9344-6619-97d5-78f4e01f30a7.png"&gt;&lt;/p&gt;

&lt;p&gt;バージョンの他にも、&lt;br&gt;
・Redmineのインストールの正常性&lt;br&gt;
・データベースの種類&lt;br&gt;
・Rdmineの実行環境&lt;br&gt;
などが確認できます。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h1 id="2.コマンドで確認"&gt;2.コマンドで確認&lt;/h1&gt;

&lt;h5 id="2-1.サーバへログインし、redmineをインストールしたディレクトリへ移動します。"&gt;2-1.サーバへログインし、Redmineをインストールしたディレクトリへ移動します。&lt;/h5&gt;

&lt;h5 id="2-2.以下のコマンドを実行します。"&gt;2-2.以下のコマンドを実行します。&lt;/h5&gt;

&lt;p&gt;※旧バージョンだとscript/aboutの場合があります。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ ruby bin/about 
&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Environment:
  Redmine version                3.2.0.stable
  Ruby version                   2.0.0-p647 (2015-08-18) [x86_64-linux]
  Rails version                  4.2.5
  Environment                    production
  Database adapter               Mysql2
SCM:
  Subversion                     1.8.13
  Git                            2.4.3
  Filesystem                     
Redmine plugins:
  no plugin installed
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;管理画面で表示されているものと同等の内容が確認できます。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h1 id="3.ソースコードで確認"&gt;3.ソースコードで確認&lt;/h1&gt;

&lt;h5 id="3-1.サーバへログインし、redmineをインストールしたディレクトリへ移動します。"&gt;3-1.サーバへログインし、Redmineをインストールしたディレクトリへ移動します。&lt;/h5&gt;

&lt;p&gt;lib/redmine/version.rbの冒頭にバージョンを表す数値が定義されています。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ cat lib/redmine/version.rb 
require 'rexml/document'

module Redmine
  module VERSION #:nodoc:
    MAJOR = 3
    MINOR = 2
    TINY  = 0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;以上の３つの方法がありますが。&lt;br&gt;
管理権限付きのユーザーを持っているのであれば「1.管理画面で確認」を行うのが一番良さそうです。&lt;br&gt;
もし、管理画面へログインするアカウントがい場合は「2.コマンドで確認」が有効です。&lt;br&gt;
また、「3.ソースコードで確認」は一応紹介しましたが、これを行うのであれば、「2.コマンドで確認」を行う方が良いです。&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Jawsdays2016 ハンズオンブースのスピーカーやります！</title>
    <link rel="alternate" href="http://blog.url.com/2016/02/14/jawsdays2016-workshop-speker.html"/>
    <id>http://blog.url.com/2016/02/14/jawsdays2016-workshop-speker.html</id>
    <published>2016-02-14T09:00:00+09:00</published>
    <updated>2016-02-29T11:57:18+09:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;来たる、2016/3/12(土)に今年も&lt;a href="http://jawsdays2016.jaws-ug.jp/"&gt;JawsDays2016&lt;/a&gt;が開催されます。&lt;/p&gt;

&lt;p&gt;AWSの成長とともに、年々参加者、規模も大きくなっているJawsdays、毎年1ユーザとして楽しみに参加させて頂いておりまししたが、今年はなんと、私小熊がスピーカーの一人として参加する機会を頂きました！&lt;/p&gt;

&lt;p&gt;&lt;img alt="jawsdays2016" src="/images/jawsdays2016-bg.png" /&gt;&lt;/p&gt;

&lt;p&gt;以下、私のセッションの紹介ページ抜粋です。&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;hr&gt;

&lt;h3 id="11時10分--静的html公開フローをサーバレスでdevops！"&gt;11時10分- 静的HTML公開フローをサーバレスでDevOps！&lt;/h3&gt;

&lt;hr&gt;

&lt;p&gt;株式会社プラウディットの小熊さんがお届けする「静的HTML公開フローをサーバレスでDevOps！」は、ほぼ絶対落ちないコーポレートサイトを、Github + CircleCi + AWSのS3というストレージサービスを利用して、サーバレスで構築するハンズオンです。 このセッションに参加すれば、あなたのサイトも簡単にYahoo砲に耐えられるようになります！&lt;/p&gt;

&lt;p&gt;&lt;a href="http://jawsdays2016.jaws-ug.jp/speaker/259"&gt;スピーカー紹介ページ&lt;/a&gt;&lt;br&gt;
&lt;img alt="スピーカー" src="/images/speaker01.png" /&gt;&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;セッションブースは「workshop」＝いわゆるハンズオンブースの１コマとなります。&lt;/p&gt;

&lt;p&gt;もちろん、元ネタは同Blogの同名記事&lt;a href="http://blog.proudit.jp/2015/11/27/github-circleci-s3.html"&gt;静的HTML公開フローをサーバレスでDevOps！&lt;/a&gt;がベースとなっておりますが、ハンズオン用にブラッシュアップしましたので、この記事ではよく分からなかった、うまく行かなかった、などの方にも分かりやすく、試しやすい形となっております。&lt;/p&gt;

&lt;p&gt;1コマ=50分の短いセッションですが、AWS S3と各種SaaSを連携したDevOpsの要素満載のセッションとなります。&lt;/p&gt;

&lt;p&gt;みなさまお誘い合わせの上、受講頂ければと思います！&lt;/p&gt;

&lt;p&gt;まだチケット間に合いますよーw&lt;/p&gt;

&lt;p&gt;&lt;a href="https://jaws-days.doorkeeper.jp/events/36835"&gt;JawsDaysチケット販売ページ&lt;/a&gt;&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>GitHubとCircleCIを連携させよう！！</title>
    <link rel="alternate" href="http://blog.url.com/2016/02/09/connect-github-to-circleci.html"/>
    <id>http://blog.url.com/2016/02/09/connect-github-to-circleci.html</id>
    <published>2016-02-09T09:00:00+09:00</published>
    <updated>2016-02-15T11:46:48+09:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;h1 id="はじめに"&gt;はじめに&lt;/h1&gt;

&lt;p&gt;CircleCIは継続的インテグレーション(Continuous Integration)を行うためのWebサービスです。&lt;br&gt;
指定したGitHubリポジトリをウォッチし、更新があると自動でビルド〜デプロイを行える仕組みを作れます。&lt;br&gt;
とりあえず今回は初めのGitHubとCircleCIを連携させるところを行います。&lt;/p&gt;

&lt;h1 id="事前準備"&gt;事前準備&lt;/h1&gt;

&lt;p&gt;・&lt;a href="../../../2016/02/01/regist-gihub.html"&gt;GitHubアカウントの取得&lt;/a&gt;&lt;br&gt;
CircleCIを利用するにはGitHubアカウントが必要となります。&lt;/p&gt;

&lt;h1 id="連携設定"&gt;連携設定&lt;/h1&gt;

&lt;h4 id="1.ログイン"&gt;1.ログイン&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://circleci.com/"&gt;Circleci&lt;/a&gt;へアクセスし「Sign in」をクリックします。&lt;br&gt;
&lt;img alt="20160125_circleci01.png" src="https://qiita-image-store.s3.amazonaws.com/0/82090/7dfec881-aa24-9e8c-05d0-1102f5e1fe38.png" /&gt;&lt;/p&gt;

&lt;h4 id="2.githubログイン"&gt;2.GitHubログイン&lt;/h4&gt;

&lt;p&gt;ログイン画面が表示されるので事前に準備したGitHubアカウントへログインします。&lt;br&gt;
&lt;img alt="20160125_circleci02.png" src="https://qiita-image-store.s3.amazonaws.com/0/82090/f592d016-db70-bb23-13cd-ff4fa87dc3f7.png" /&gt;&lt;/p&gt;

&lt;h4 id="3.認証"&gt;3.認証&lt;/h4&gt;

&lt;p&gt;認証画面が表示されるため、「Authorize application」をクリックします。&lt;br&gt;
&lt;img alt="20160125_circleci03.png" src="https://qiita-image-store.s3.amazonaws.com/0/82090/e216dafa-2cdb-ed89-37c3-e959ce58a43e.png" /&gt;&lt;/p&gt;

&lt;h4 id="4.アカウントの選択"&gt;4.アカウントの選択&lt;/h4&gt;

&lt;p&gt;CircleCIと連携するGitHubアカウントを指定します。&lt;br&gt;
&lt;img alt="20160125_circleci04.png" src="https://qiita-image-store.s3.amazonaws.com/0/82090/26c3a9d3-a7c8-8260-d2fe-407f3c8ef8ed.png" /&gt;&lt;/p&gt;

&lt;h4 id="5.リポジトリの選択"&gt;5.リポジトリの選択&lt;/h4&gt;

&lt;p&gt;アカウントを指定すると、リポジトリがリストされるので連携したいリポジトリの「Build project」をクリックします。&lt;br&gt;
&lt;img alt="20160125_circleci05.png" src="https://qiita-image-store.s3.amazonaws.com/0/82090/73519472-6b06-00d4-10f5-9154aa2a8836.png" /&gt;&lt;/p&gt;

&lt;h4 id="6.プランの選択"&gt;6.プランの選択&lt;/h4&gt;

&lt;p&gt;利用するプランを指定します。&lt;br&gt;
&lt;img alt="20160125_circleci07.png" src="https://qiita-image-store.s3.amazonaws.com/0/82090/b7b01720-8410-392c-1a1c-5ccdd2f992af.png" /&gt;&lt;/p&gt;

&lt;h4 id="7.完了"&gt;7.完了&lt;/h4&gt;

&lt;p&gt;以上で連携が完了です。&lt;br&gt;
&lt;img alt="20160125_circleci08.png" src="https://qiita-image-store.s3.amazonaws.com/0/82090/bcd9bede-56ab-605d-7a93-8ba705802215.png" /&gt;&lt;/p&gt;

&lt;h1 id="最後に"&gt;最後に&lt;/h1&gt;

&lt;p&gt;以上、今回はGitHubとCircleCIを連携させる部分だけ行いました。&lt;br&gt;
実際にデプロイまで行うには&lt;em&gt;circle.yml&lt;/em&gt;というファイルを使って管理する必要があります。&lt;br&gt;
そこについては、また時間があるときに書ければと思います。&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>GitHubアカウント作成とリポジトリの作成手順</title>
    <link rel="alternate" href="http://blog.url.com/2016/02/01/regist-gihub.html"/>
    <id>http://blog.url.com/2016/02/01/regist-gihub.html</id>
    <published>2016-02-01T09:00:00+09:00</published>
    <updated>2016-02-02T10:51:14+09:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;新規にGitHubアカウントを作成し、リポジトリを作成するための手順です。&lt;/p&gt;

&lt;h1 id="1.-githubアカウントの作成"&gt;1. GitHubアカウントの作成&lt;/h1&gt;

&lt;h2 id="1-1.-サイトへアクセス"&gt;1-1. サイトへアクセス&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://github.com"&gt;GitHub&lt;/a&gt;のサイトにアクセスします。&lt;/p&gt;

&lt;h2 id="1-2.-必要事項の入力"&gt;1-2. 必要事項の入力&lt;/h2&gt;

&lt;p&gt;ユーザ名、メアド、パスワードを入力して「Sign up for Github」のボタンを押します。&lt;br&gt;
&lt;img alt="20160122_github-regist01.png" src="https://qiita-image-store.s3.amazonaws.com/0/82090/e6ae5b0e-69cc-b29f-d5ee-bab2fdc2da67.png" /&gt;&lt;/p&gt;

&lt;h2 id="1-3.-プランの選択"&gt;1-3. プランの選択&lt;/h2&gt;

&lt;p&gt;Freeプランが選択されているのを確認して「Finish sign up」のボタンを押します。&lt;br&gt;
&lt;img alt="20160122_github-regist02.png" src="https://qiita-image-store.s3.amazonaws.com/0/82090/e52091b2-94eb-65e7-06d8-a4678d846c82.png" /&gt;&lt;/p&gt;

&lt;h2 id="1-4.-確認メール"&gt;1-4. 確認メール&lt;/h2&gt;

&lt;p&gt;登録したメールアドレスにGitHubから確認メールが来ます。&lt;br&gt;
そのメール内にある「Verify email address」ボタンを押します。&lt;br&gt;
&lt;img alt="20160122_github-regist04.png" src="https://qiita-image-store.s3.amazonaws.com/0/82090/dda5bc7f-7039-aac4-5c15-972140365cd7.png" /&gt;&lt;/p&gt;

&lt;h2 id="1-5.-登録完了メール"&gt;1-5. 登録完了メール&lt;/h2&gt;

&lt;p&gt;「Welcome to GitHub!」というメールが届いたら登録が完了です。&lt;br&gt;
&lt;img alt="20160122_github-regist08.png" src="https://qiita-image-store.s3.amazonaws.com/0/82090/ada3aecd-1d22-b4b9-c8ca-458cfd1b10e7.png" /&gt;&lt;/p&gt;

&lt;h1 id="2.-リポジトリの作成"&gt;2. リポジトリの作成&lt;/h1&gt;

&lt;h2 id="2-1.-ログイン"&gt;2-1. ログイン&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://github.com"&gt;GitHub&lt;/a&gt;にログインします。&lt;/p&gt;

&lt;h2 id="2-2.-新規リポジトリの作成①"&gt;2-2. 新規リポジトリの作成①&lt;/h2&gt;

&lt;p&gt;「+ New repository」をクリックします。&lt;br&gt;
&lt;img alt="20160122_github-regist03.png" src="https://qiita-image-store.s3.amazonaws.com/0/82090/1144cf43-4c43-179e-f06c-f80d6bd10ce2.png" /&gt;&lt;/p&gt;

&lt;h2 id="2-3.-新規リポジトリの作成②"&gt;2-3. 新規リポジトリの作成②&lt;/h2&gt;

&lt;p&gt;リポジトリ名を入力して「Create repository」ボタンを押します。&lt;br&gt;
&lt;img alt="20160122_github-regist05.png" src="https://qiita-image-store.s3.amazonaws.com/0/82090/27012d17-a4ca-a869-c83c-dfffb34755d8.png" /&gt;&lt;/p&gt;

&lt;h2 id="2-4.-確認"&gt;2-4. 確認&lt;/h2&gt;

&lt;p&gt;作成が完了するとリポジトリのURLが表示されます。&lt;br&gt;
&lt;img alt="20160122_github-regist06.png" src="https://qiita-image-store.s3.amazonaws.com/0/82090/b123c18b-7f76-73a8-8769-c88f38f6c26b.png" /&gt;&lt;/p&gt;

&lt;p&gt;以上でGitHubのアカウントとリポジトリの作成が完了です。&lt;/p&gt;
</content>
  </entry>
</feed>
