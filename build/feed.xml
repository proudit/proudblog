<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Blog Name</title>
  <subtitle>Blog subtitle</subtitle>
  <id>http://blog.url.com/</id>
  <link href="http://blog.url.com/"/>
  <link href="http://blog.url.com/feed.xml" rel="self"/>
  <updated>2016-04-11T09:00:00+09:00</updated>
  <author>
    <name>Blog Author</name>
  </author>
  <entry>
    <title>AWS CLIでAWS Account IDを取得する。</title>
    <link rel="alternate" href="http://blog.url.com/2016/04/11/get-awsaccountid-by-aws-cli.html"/>
    <id>http://blog.url.com/2016/04/11/get-awsaccountid-by-aws-cli.html</id>
    <published>2016-04-11T09:00:00+09:00</published>
    <updated>2016-04-11T13:12:55+09:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;h1 id="はじめに"&gt;はじめに&lt;/h1&gt;

&lt;p&gt;今回のAWS CLIアップデートでSTSに&lt;em&gt;get-caller-identity&lt;/em&gt;というコマンドが追加されました。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;リリースノート&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://aws.amazon.com/releasenotes/1133794697823335" target="_blank"&gt;&lt;a href="https://aws.amazon.com/releasenotes/1133794697823335"&gt;https://aws.amazon.com/releasenotes/1133794697823335&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;STS(&lt;em&gt;Security Token Service&lt;/em&gt;)は&lt;a href="https://sts.amazonaws.com" target="_blank"&gt;&lt;a href="https://sts.amazonaws.com"&gt;https://sts.amazonaws.com&lt;/a&gt;&lt;/a&gt;に単一エンドポイントを持つグローバルサービスです。&lt;br&gt;
AWSの&lt;em&gt;Account&lt;/em&gt;、&lt;em&gt;UserID&lt;/em&gt;、&lt;em&gt;Arn&lt;/em&gt;が取得できます。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;コマンド&lt;/strong&gt;&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ aws sts get-caller-identity
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;それでは実際にコマンドを試してみます。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h1 id="1.バージョン確認"&gt;1.バージョン確認&lt;/h1&gt;

&lt;p&gt;とりあえず、現在インストールされているCLIのバージョンを確認します。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ aws --version
aws-cli/1.10.16 Python/2.7.10 Darwin/15.4.0 botocore/1.4.7
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;get-caller-identity&lt;/em&gt;は今回(1.10.18)から追加されたコマンドのため今のバージョンでは利用できません。&lt;br&gt;
試しに、このままのバージョン(1.10.16)でコマンドを実行してみます。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ aws sts get-caller-identity
usage: aws [options] &amp;lt;command&amp;gt; &amp;lt;subcommand&amp;gt; [&amp;lt;subcommand&amp;gt; ...] [parameters]
To see help text, you can run:

  aws help
  aws &amp;lt;command&amp;gt; help
  aws &amp;lt;command&amp;gt; &amp;lt;subcommand&amp;gt; help
aws: error: argument operation: Invalid choice, valid choices are:

assume-role                              | assume-role-with-saml
assume-role-with-web-identity            | decode-authorization-message
get-federation-token                     | get-session-token
help
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;案の定そのようなコマンドは無いと言われてしまいました。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h1 id="2.アップグレード"&gt;2.アップグレード&lt;/h1&gt;

&lt;p&gt;それでは今回のバージョンへアップグレードします。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$  sudo pip install --upgrade awscli --ignore-installed six
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;バージョンを確認します。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ aws --version
aws-cli/1.10.18 Python/2.7.10 Darwin/15.4.0 botocore/1.4.9
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;アップデートが完了しました。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h1 id="3.コマンド実行"&gt;3.コマンド実行&lt;/h1&gt;

&lt;p&gt;では、コマンドを実行します。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ aws sts get-caller-identity
{
    "Account": "123456789012",
    "UserId": "AIDA*****************",
    "Arn": "arn:aws:iam::123456789012:user/kohei"
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;無事、&lt;em&gt;AWS Account ID&lt;/em&gt;が取得できているのが確認できます。&lt;/p&gt;

&lt;p&gt;ちなみに今回取得できる値について簡単に説明しておきます。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Account&lt;/em&gt;：AWSアカウントIDは、Amazonリソースネーム(ARN)を構築するのに使用する12桁の数字。&lt;/li&gt;
&lt;li&gt;&lt;em&gt;UserID&lt;/em&gt;：現在のユーザーの一意のID。&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Arn&lt;/em&gt;：Amazonリソースネームの略で、AWSリソースを一意に識別する値。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h1 id="おわりに"&gt;おわりに&lt;/h1&gt;

&lt;p&gt;このコマンドはグローバルエンドポイントを見に行って情報を取得してくれるためリージョンの指定などをすることなく実行できます。&lt;br&gt;
これによって現在作業中のプロファイル情報がわかるので複数アカウント切り替えたりする環境ではとても役に立ちそうです。&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>auditについてインストールと簡単な利用方法のメモ。</title>
    <link rel="alternate" href="http://blog.url.com/2016/04/07/how-to-audit-install.html"/>
    <id>http://blog.url.com/2016/04/07/how-to-audit-install.html</id>
    <published>2016-04-07T09:00:00+09:00</published>
    <updated>2016-04-11T12:58:30+09:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;h1 id="はじめに"&gt;はじめに&lt;/h1&gt;

&lt;h2 id="auditとは？"&gt;auditとは？&lt;/h2&gt;

&lt;p&gt;auditとはLinuxサーバで用いる監査ツールです。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h2 id="どんなことができるの？"&gt;どんなことができるの？&lt;/h2&gt;

&lt;p&gt;SELinuxのAVC拒否、システムログイン、アカウント変更、sudoなどを使った認証結果などを監査することができます。&lt;br&gt;
・システムイベントの記録&lt;br&gt;
・監査イベントの記録&lt;br&gt;
・バックアップのチェック&lt;br&gt;
・ログファイルの切り替え&lt;br&gt;
・設定ファイルの変更チェック&lt;br&gt;
etc...&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h1 id="導入"&gt;導入&lt;/h1&gt;

&lt;p&gt;auditのインストールと設定について簡単に説明します。&lt;/p&gt;

&lt;h2 id="1.-パッケージインストール"&gt;1. パッケージインストール&lt;/h2&gt;

&lt;p&gt;RedHat系はyum、Debian系はapt-getでパッケージインストールができます。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ sudo apt-get install auditd
&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ sudo yum install audit
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;※パッケージの指定がapt-getの場合はauditd、yumの場合はauditとなるので注意してください。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h2 id="2.-構成"&gt;2. 構成&lt;/h2&gt;

&lt;p&gt;基本的にauditdは設定ファイル(auditd.conf)とルール定義ファイル(audit.rules)、ログ(audit.log)の３つから構成されます。&lt;br&gt;
またこれらのファイルは、デフォルトで以下のパスに配置されます。&lt;br&gt;
・設定ファイル：&lt;em&gt;/etc/audit/auditd.conf&lt;/em&gt;&lt;br&gt;
・ルール定義ファイル：&lt;em&gt;/etc/audit/audit.rules&lt;/em&gt;&lt;br&gt;
・ログ：&lt;em&gt;/var/log/audit.log&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;ということでインストールができたので、とにかく利用してみましょう。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h2 id="3.-ルールの確認"&gt;3. ルールの確認&lt;/h2&gt;

&lt;p&gt;まずは、ルールの確認です。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ sudo auditctl -l
No rules
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;初期は何もルールが設定されていないので&amp;quot;&lt;em&gt;No rules&lt;/em&gt;&amp;quot;となります。&lt;br&gt;
それでは何か追加してみましょう。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h2 id="4.-ルールの追加"&gt;4. ルールの追加&lt;/h2&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ sudo auditctl -a exit,always -F arch=b64 -S open -F path=/etc/resolv.conf
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;&lt;strong&gt;-a filter,action&lt;/strong&gt;&lt;/em&gt;：指定したルールを追加します。&lt;em&gt;filter&lt;/em&gt;でフィルタを指定し、&lt;em&gt;action&lt;/em&gt;で監査イベントを生成するかどうかを指定します。&lt;br&gt;
ちなみに、&lt;em&gt;-a&lt;/em&gt;でルールを末尾に追加、&lt;em&gt;-A&lt;/em&gt;でルールを先頭に追加です。&lt;br&gt;
&lt;em&gt;&lt;strong&gt;-F&lt;/strong&gt;&lt;/em&gt;：監査イベントで抜き出すための条件式を定義します。&lt;br&gt;
&lt;em&gt;&lt;strong&gt;-S&lt;/strong&gt;&lt;/em&gt;：システムコール名やシステムコール番号を指定します。allはワイルドカードです。&lt;br&gt;
&lt;em&gt;&lt;strong&gt;-k&lt;/strong&gt;&lt;/em&gt;：監査イベントにラベルを付けてログを後から検索できるようにする場合に指定します。&lt;/p&gt;

&lt;p&gt;詳しい内容はまた記載しませんが、これは&amp;quot;&lt;em&gt;/etc/resolv.conf&lt;/em&gt;&amp;quot;をopenするのをチェックしています。&lt;/p&gt;

&lt;p&gt;ルールの追加が完了したらもう一度確認コマンドを実行してみましょう。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ sudo auditctl -l
LIST_RULES: exit,always arch=3221225534 (0xc000003e) watch=/etc/resolv.conf syscall=open
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ルールが追加されたのが確認できます。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h2 id="5.-ルールの削除"&gt;5. ルールの削除&lt;/h2&gt;

&lt;p&gt;それでは追加したルールを今度は削除してみます。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ sudo auditctl -d exit,always -F arch=b64 -S open -F path=/etc/resolv.conf
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;&lt;strong&gt;-d&lt;/strong&gt;&lt;/em&gt;：指定したルールを削除します。&lt;/p&gt;

&lt;p&gt;それでは削除できているか確認します。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ sudo auditctl -l
No rules
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;一つしかルールがなかったので削除すると&amp;quot;No rules&amp;quot;になりました。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h1 id="今回のまとめ"&gt;今回のまとめ&lt;/h1&gt;

&lt;p&gt;・auditはLinuxサーバで利用する監査ツール&lt;br&gt;
・RedHat系はyum、Debian系はapt-getでパッケージインストールができる。&lt;br&gt;
・パッケージインストールの指定はyumだとaudit、apt-getだとauditdになる。&lt;br&gt;
・&lt;em&gt;auditctl -l&lt;/em&gt;でルールの確認&lt;br&gt;
・&lt;em&gt;auditctl -a&lt;/em&gt;でルールの追加&lt;br&gt;
・&lt;em&gt;auditctl -d&lt;/em&gt;でルールの削除&lt;/p&gt;

&lt;p&gt;以上です。&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>プラウディット5期目を迎えました</title>
    <link rel="alternate" href="http://blog.url.com/2016/04/04/start-daigoki.html"/>
    <id>http://blog.url.com/2016/04/04/start-daigoki.html</id>
    <published>2016-04-04T09:00:00+09:00</published>
    <updated>2016-04-07T16:24:32+09:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;4月1日より弊社プラウディットは第5期目に入りました。&lt;br&gt;
これもひとえに日頃よりご指導頂いている皆様のおかげです。&lt;br&gt;
&lt;br&gt;&lt;br&gt;
新オフィスにて迎えた今期も更に充実したサービス、そして新しいことにも挑戦すべく、&lt;br&gt;
一同頑張って参ります！&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;p&gt;実は本日4月4日はプラウディット設立記念日。&lt;br&gt;
朝からどんよりとした空模様ですが、&lt;br&gt;
オフィスでは気分が上がるよう素敵な香りと共にお仕事をしています。&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;img alt="今日のアロマ" src="/images/./2016/0404_todayofaroma/sunrhythm.jpg" /&gt;&lt;br&gt;
サンリズム：フレッシュな柑橘類(オレンジ、レモン、グレープフルーツ)とほのかなバニラの甘い香り。&lt;br&gt;
気分を明るく晴れやかにしてくれます！&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>2016年納会＆オフィスお披露目会</title>
    <link rel="alternate" href="http://blog.url.com/2016/03/29/noukai-hengiu.html"/>
    <id>http://blog.url.com/2016/03/29/noukai-hengiu.html</id>
    <published>2016-03-29T09:00:00+09:00</published>
    <updated>2016-03-30T14:42:48+09:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;先日新オフィスにお客様をお招きし、2016年度の納会＆新オフィスお披露目会をしました！&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;img alt="お披露目会" src="/images/./2016/0329_noukai/noukai1.JPG" /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;差し入れも頂きました〜。ありがとうございます。&lt;/p&gt;

&lt;p&gt;&lt;img alt="お披露目会" src="/images/./2016/0329_noukai/noukai2.JPG" /&gt;&lt;/p&gt;

&lt;p&gt;シャンパン、ビール、ラスクです。&lt;/p&gt;

&lt;p&gt;&lt;img alt="お披露目会" src="/images/./2016/0329_noukai/noukai3.JPG" /&gt;&lt;/p&gt;

&lt;p&gt;柿の葉寿司もおいしかったです〜！&lt;br&gt;
沢山食べてお腹いっぱいになりました。ごちそうさまでした。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;他にも写真には写っていませんが、沢山の差し入れを頂きました。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;
アットホームな雰囲気の中、楽しい会になりました♪&lt;br&gt;
皆様お忙しい中お越し頂き、ありがとうございました！！&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Dockerコンテナのリポジトリ管理　DockerHubへログイン、イメージの取得〜更新、コミットまで。</title>
    <link rel="alternate" href="http://blog.url.com/2016/03/28/how-to-use-docker-from-login-to-commit.html"/>
    <id>http://blog.url.com/2016/03/28/how-to-use-docker-from-login-to-commit.html</id>
    <published>2016-03-28T09:00:00+09:00</published>
    <updated>2016-03-30T14:42:48+09:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;h1 id="はじめに"&gt;はじめに&lt;/h1&gt;

&lt;p&gt;今回はDockerHubでのプライベートリポジトリ管理（手動）を想定しました。&lt;br&gt;
まずはDockerHubへログインした上でリポジトリからコンテナをpullで取得し、その後コンテナ自身を更新します。その後commit→pushでDockerHubにあるリポジトリを更新します。&lt;br&gt;
以上が「コンテナか管理」の際に行う基本的な流れになると思います。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h1 id="1.dockerhubへのログイン"&gt;1.DockerHubへのログイン&lt;/h1&gt;

&lt;p&gt;まずはリポジトリへアクセスできるようにするため、DockerHubへログインを行います。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ docker login
Username: kohei
Password:
Email: kohei@hogehoge.jp
WARNING: login credentials saved in /Users/kohei/.docker/config.json
Login Succeeded
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h1 id="2.コンテナのpull"&gt;2.コンテナのpull&lt;/h1&gt;

&lt;p&gt;ローカルリポジトリに存在するdocker imageを確認します。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ docker images
REPOSITORY          TAG                 IMAGE ID            CREATED             VIRTUAL SIZE
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;現在はローカルリポジトリにはimageが存在しないため何もリストされていません。&lt;br&gt;
確認ができたら&lt;code&gt;$ docker pull リポジトリ:タグ&lt;/code&gt;でDockerHubからimageを取得します。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ docker pull kohei/httpd:ver1.0
ver1.0: Pulling from kohei/httpd
a2c33fe967de: Pull complete
d3bf674be7aa: Pull complete
13bab7291cec: Pull complete
e87afdecef01: Pull complete
4cf71c080937: Pull complete
Digest: sha256:5b940d5b742317185db6b1d25b06e6e68060b08f8fdd53f36a6bd6d471bd7043
Status: Downloaded newer image for kohei/httpd:ver1.0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;再度&lt;code&gt;$ docker images&lt;/code&gt;を実行すると、先ほどpullしたimageが取得できているのが確認できます。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ docker images
REPOSITORY          TAG                 IMAGE ID            CREATED             VIRTUAL SIZE
kohei/httpd         ver1.0              4cf71c080937        2 days ago          264.3 MB
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h1 id="3.コンテナの更新"&gt;3.コンテナの更新&lt;/h1&gt;

&lt;p&gt;imageが取得できたのでコンテナを更新します。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ docker run -it kohei/httpd:ver1.0 /bin/bash
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;コンテナを起動してパッケージのインストールやconfの修正などを行います。&lt;br&gt;
修正が完了したらexitでコンテナから抜けて停止させます。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h1 id="4.イメージの作成"&gt;4.イメージの作成&lt;/h1&gt;

&lt;p&gt;修正したコンテナの&lt;code&gt;CONTAIER ID&lt;/code&gt;を確認します。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ docker ps -a
CONTAINER ID        IMAGE                COMMAND             CREATED             STATUS                      PORTS               NAMES
b10edb89cd05        kohei/httpd:ver1.0   "/bin/bash"         43 seconds ago      Exited (0) 12 seconds ago                       gloomy_khorana
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;確認したら、&lt;code&gt;$ docker commit -m &amp;quot;コメント&amp;quot; &amp;lt;コンテナID&amp;gt; &amp;lt;リポジトリ:タグ&amp;gt;&lt;/code&gt;でローカルリポジトリへコミットします。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ docker commit -m "edited container" b10edb89cd05 kohei/httpd:ver1.0
02607c25ed22c085a8e4964c91406baa911f194265db5d4ddfd44a2f96e799ec
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;完了したら再度&lt;code&gt;$ docker images&lt;/code&gt;で&lt;code&gt;IMAGE ID&lt;/code&gt;を確認します。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ docker images
REPOSITORY          TAG                 IMAGE ID            CREATED             VIRTUAL SIZE
kohei/httpd         ver1.0              02607c25ed22        5 seconds ago       264.3 MB
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;すぐに確認すれば&lt;code&gt;CREATED&lt;/code&gt;が数秒前という記載になっています。また、コミットする前に確認した&lt;code&gt;IMAGE ID&lt;/code&gt;は異なるIDになっています。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h1 id="5.コンテナのpush"&gt;5.コンテナのpush&lt;/h1&gt;

&lt;p&gt;ローカルリポジトリへコミットが完了したらDockerHubへpushします。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ docker push kohei/httpd:ver1.0
The push refers to a repository [docker.io/kohei/httpd] (len: 1)
02607c25ed22: Pushed
4cf71c080937: Image already exists
e87afdecef01: Image already exists
13bab7291cec: Image already exists
d3bf674be7aa: Image already exists
ver1.0: digest: sha256:fb10c3626b1fc732c314efc132a29f7ee37c52176547a076c72553a97eaee949 size: 9116
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;以上で完了です。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h1 id="おわりに"&gt;おわりに&lt;/h1&gt;

&lt;p&gt;コンテナ中身の更新方法はいろいろあるのでとりあえずrunで起動しての修正にしてます。&lt;br&gt;
ただ、この一連の流れ(login〜pull〜commit〜push)はコンテナを管理する立場の人にはルーティン作業になると思ったのでメモとしてまとめました。&lt;br&gt;
loginは一度ログインしてしまえば不要ですが、複数アカウントをまたぐ可能性がある場合はポイントになると思います。&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>aws-cliのバージョンをアップグレードする。for MacOS</title>
    <link rel="alternate" href="http://blog.url.com/2016/03/24/to-update-aws-cli.html"/>
    <id>http://blog.url.com/2016/03/24/to-update-aws-cli.html</id>
    <published>2016-03-24T09:00:00+09:00</published>
    <updated>2016-03-28T13:48:41+09:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;気がつくとバージョンが上がっているaws-cliコマンド。&lt;br&gt;
あまりにも頻繁に上がっているので、気が付いたら(向いたら？)バージョンアップを行うようにしています。&lt;br&gt;
今回見たらバージョン1.10.6となっていました。とりあえず気が向いた(付いた？)のでアップグレードを行おうと思います。&lt;br&gt;
ちなみにaws-cliのバージョンについては以下から確認できます。&lt;br&gt;
&lt;a href="https://github.com/aws/aws-cli"&gt;https://github.com/aws/aws-cli&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;また、今回行っている環境はMac OS X El Capitainです。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h1 id="①バージョンの確認"&gt;①バージョンの確認&lt;/h1&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ aws --version
aws-cli/1.9.20 Python/2.7.10 Darwin/15.3.0 botocore/1.3.20
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;aws-cli&lt;/em&gt;のところを見ると&lt;em&gt;1.9.20&lt;/em&gt;となっているのがわかります。&lt;br&gt;
現時点(&lt;em&gt;2016-02-19&lt;/em&gt;)での最新バージョンは&lt;em&gt;1.10.6&lt;/em&gt;でした。&lt;br&gt;
&lt;a href="https://github.com/aws/aws-cli"&gt;https://github.com/aws/aws-cli&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h1 id="②アップグレード"&gt;②アップグレード&lt;/h1&gt;

&lt;p&gt;それではアップグレードを行いたいと思います。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ sudo pip install --upgrade awscli
Password:
〜 省略 〜
Collecting awscli
  Downloading awscli-1.10.6-py2.py3-none-any.whl (887kB)
    100% |████████████████████████████████| 888kB 627kB/s 
Requirement already up-to-date: rsa&amp;lt;=3.3.0,&amp;gt;=3.1.2 in /Library/Python/2.7/site-packages (from awscli)
Collecting s3transfer==0.0.1 (from awscli)
  Downloading s3transfer-0.0.1-py2.py3-none-any.whl
Requirement already up-to-date: colorama&amp;lt;=0.3.3,&amp;gt;=0.2.5 in /Library/Python/2.7/site-packages (from awscli)
Collecting botocore==1.3.28 (from awscli)
  Downloading botocore-1.3.28-py2.py3-none-any.whl (2.2MB)
    100% |████████████████████████████████| 2.2MB 253kB/s 
Requirement already up-to-date: docutils&amp;gt;=0.10 in /Library/Python/2.7/site-packages (from awscli)
Requirement already up-to-date: pyasn1&amp;gt;=0.1.3 in /Library/Python/2.7/site-packages (from rsa&amp;lt;=3.3.0,&amp;gt;=3.1.2-&amp;gt;awscli)
Requirement already up-to-date: futures&amp;lt;4.0.0,&amp;gt;=2.2.0 in /Library/Python/2.7/site-packages (from s3transfer==0.0.1-&amp;gt;awscli)
Requirement already up-to-date: jmespath&amp;lt;1.0.0,&amp;gt;=0.7.1 in /Library/Python/2.7/site-packages (from botocore==1.3.28-&amp;gt;awscli)
Collecting python-dateutil&amp;lt;3.0.0,&amp;gt;=2.1 (from botocore==1.3.28-&amp;gt;awscli)
  Downloading python_dateutil-2.4.2-py2.py3-none-any.whl (188kB)
    100% |████████████████████████████████| 192kB 2.4MB/s 
Collecting six&amp;gt;=1.5 (from python-dateutil&amp;lt;3.0.0,&amp;gt;=2.1-&amp;gt;botocore==1.3.28-&amp;gt;awscli)
  Downloading six-1.10.0-py2.py3-none-any.whl
Installing collected packages: six, python-dateutil, botocore, s3transfer, awscli
  Found existing installation: six 1.4.1
    DEPRECATION: Uninstalling a distutils installed project (six) has been deprecated and will be removed in a future version. This is due to the fact that uninstalling a distutils project will only partially uninstall the project.
    Uninstalling six-1.4.1:
Exception:
Traceback (most recent call last):
  File "/Library/Python/2.7/site-packages/pip/basecommand.py", line 209, in main
    status = self.run(options, args)
  File "/Library/Python/2.7/site-packages/pip/commands/install.py", line 317, in run
    prefix=options.prefix_path,
  File "/Library/Python/2.7/site-packages/pip/req/req_set.py", line 725, in install
    requirement.uninstall(auto_confirm=True)
  File "/Library/Python/2.7/site-packages/pip/req/req_install.py", line 752, in uninstall
    paths_to_remove.remove(auto_confirm)
  File "/Library/Python/2.7/site-packages/pip/req/req_uninstall.py", line 115, in remove
    renames(path, new_path)
  File "/Library/Python/2.7/site-packages/pip/utils/__init__.py", line 266, in renames
    shutil.move(old, new)
  File "/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/shutil.py", line 302, in move
    copy2(src, real_dst)
  File "/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/shutil.py", line 131, in copy2
    copystat(src, dst)
  File "/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/shutil.py", line 103, in copystat
    os.chflags(dst, st.st_flags)
OSError: [Errno 1] Operation not permitted: '/tmp/pip-l_kdbZ-uninstall/System/Library/Frameworks/Python.framework/Versions/2.7/Extras/lib/python/six-1.4.1-py2.7.egg-info'
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;なにやらエラーが発生。。。どうやらsix 1.4.1があることが原因らしい。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  Found existing installation: six 1.4.1
    DEPRECATION: Uninstalling a distutils installed project (six) has been deprecated and will be removed in a future version. This is due to the fact that uninstalling a distutils project will only partially uninstall the project.
    Uninstalling six-1.4.1:
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;対応方法はいろいろありますが、今回はsixを無視してアップグレードする対応を行います。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ sudo pip install --upgrade awscli --ignore-installed six
〜 省略 〜
Collecting awscli
  Downloading awscli-1.10.6-py2.py3-none-any.whl (887kB)
    100% |████████████████████████████████| 888kB 657kB/s 
Collecting six
  Downloading six-1.10.0-py2.py3-none-any.whl
Collecting rsa&amp;lt;=3.3.0,&amp;gt;=3.1.2 (from awscli)
  Downloading rsa-3.3-py2.py3-none-any.whl (44kB)
    100% |████████████████████████████████| 45kB 7.0MB/s 
Collecting s3transfer==0.0.1 (from awscli)
  Downloading s3transfer-0.0.1-py2.py3-none-any.whl
Collecting colorama&amp;lt;=0.3.3,&amp;gt;=0.2.5 (from awscli)
  Downloading colorama-0.3.3.tar.gz
Collecting botocore==1.3.28 (from awscli)
  Downloading botocore-1.3.28-py2.py3-none-any.whl (2.2MB)
    100% |████████████████████████████████| 2.2MB 263kB/s 
Collecting docutils&amp;gt;=0.10 (from awscli)
  Downloading docutils-0.12.tar.gz (1.6MB)
    100% |████████████████████████████████| 1.6MB 365kB/s 
Collecting pyasn1&amp;gt;=0.1.3 (from rsa&amp;lt;=3.3.0,&amp;gt;=3.1.2-&amp;gt;awscli)
  Downloading pyasn1-0.1.9-py2.py3-none-any.whl
Collecting futures&amp;lt;4.0.0,&amp;gt;=2.2.0 (from s3transfer==0.0.1-&amp;gt;awscli)
  Downloading futures-3.0.5-py2-none-any.whl
Collecting jmespath&amp;lt;1.0.0,&amp;gt;=0.7.1 (from botocore==1.3.28-&amp;gt;awscli)
  Downloading jmespath-0.9.0-py2.py3-none-any.whl
Collecting python-dateutil&amp;lt;3.0.0,&amp;gt;=2.1 (from botocore==1.3.28-&amp;gt;awscli)
  Downloading python_dateutil-2.4.2-py2.py3-none-any.whl (188kB)
    100% |████████████████████████████████| 192kB 2.7MB/s 
Installing collected packages: pyasn1, rsa, futures, jmespath, six, python-dateutil, docutils, botocore, s3transfer, colorama, awscli
  Running setup.py install for docutils ... done
  Running setup.py install for colorama ... done
Successfully installed awscli-1.10.6 botocore-1.3.20 colorama-0.3.3 docutils-0.12 futures-3.0.5 jmespath-0.9.0 pyasn1-0.1.9 python-dateutil-1.5 rsa-3.3 s3transfer-0.0.1 six-1.4.1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;無事アップグレードできました。&lt;br&gt;
念のためawsコマンドでバージョンを表示します。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ aws --version
aws-cli/1.10.6 Python/2.7.10 Darwin/15.3.0 botocore/1.3.28
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;最新のバージョンになっているのが確認できました。&lt;/p&gt;
</content>
  </entry>
</feed>
