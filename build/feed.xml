<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Blog Name</title>
  <subtitle>Blog subtitle</subtitle>
  <id>http://blog.url.com/</id>
  <link href="http://blog.url.com/"/>
  <link href="http://blog.url.com/feed.xml" rel="self"/>
  <updated>2016-08-31T09:00:00+09:00</updated>
  <author>
    <name>Blog Author</name>
  </author>
  <entry>
    <title>AWS SDK for Ruby バージョン 2 で期限付きURLの発行</title>
    <link rel="alternate" href="http://blog.url.com/2016/08/31/issu-of-time-limited-url-in-the-aws-sdk-for-ruby-version-2.html"/>
    <id>http://blog.url.com/2016/08/31/issu-of-time-limited-url-in-the-aws-sdk-for-ruby-version-2.html</id>
    <published>2016-08-31T09:00:00+09:00</published>
    <updated>2016-08-31T14:48:03+09:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;h1 id="はじめに"&gt;はじめに&lt;/h1&gt;

&lt;p&gt;前回、&lt;a href="http://blog.proudit.jp/2016/08/23/to-upload-a-file-using-the-aws-sdk-for-ruby.html"&gt;「AWS SDK for Ruby バージョン 2 を使用したS3バケットへのオブジェクトアップロード」&lt;/a&gt;でS3へオブジェクトのアップロードを行いました。&lt;br&gt;
でも、このままではアップロードしただけで、誰もアップしたオブジェクトにアクセスができないですね。。。&lt;br&gt;
ということで、今回はアップロードしたファイルをブラウザからアクセスできるように&lt;strong&gt;期限付きURLの発行&lt;/strong&gt;をしてみたいと思います。&lt;br&gt;
ちなみに&lt;strong&gt;期限付きURL&lt;/strong&gt;とはその名の通り、URLを発行してから１0分だったり3日だったり１週間だったりと、利用できる&lt;strong&gt;期限&lt;/strong&gt;を持たせたURLです。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h1 id="1.-アクセス先の準備"&gt;1. アクセス先の準備&lt;/h1&gt;

&lt;p&gt;前回、&lt;a href="http://blog.proudit.jp/2016/08/23/to-upload-a-file-using-the-aws-sdk-for-ruby.html#1.-ファイルアップロード先の準備"&gt;「AWS SDK for Ruby バージョン 2 を使用したS3バケットへのオブジェクトアップロード」&lt;/a&gt;で作成したバケットを利用するので今回は省略します。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h1 id="2.-アクセスユーザーの用意"&gt;2. アクセスユーザーの用意&lt;/h1&gt;

&lt;p&gt;まずは、バケットへアクセスできるユーザーを準備しますが、&lt;a href="http://blog.proudit.jp/2016/08/23/to-upload-a-file-using-the-aws-sdk-for-ruby.html#2.-アップロードユーザーの用意"&gt;前回作成&lt;/a&gt;した&lt;em&gt;kohei-no-iam&lt;/em&gt;を利用したいと思います。&lt;/p&gt;

&lt;p&gt;まずは「アクセス許可」→「ポリシーのアタッチ」をクリックします。&lt;/p&gt;

&lt;p&gt;&lt;img alt="4-iam01.png" src="https://qiita-image-store.s3.amazonaws.com/0/82090/6a324b60-8cfd-05c8-a9ea-3a6450c39f25.png" /&gt;&lt;/p&gt;

&lt;p&gt;今回は &lt;strong&gt;AmazonS3ReadOnlyAccess&lt;/strong&gt; をアタッチするだけでOKです。&lt;/p&gt;

&lt;p&gt;&lt;img alt="4-iam02.png" src="https://qiita-image-store.s3.amazonaws.com/0/82090/3d1435a3-6637-f5f9-ef80-6ba87388d897.png" /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img alt="4-iam03.png" src="https://qiita-image-store.s3.amazonaws.com/0/82090/b6d48db2-01be-4bfb-0b9b-20cb21f7ff70.png" /&gt;&lt;/p&gt;

&lt;p&gt;以上でユーザーの用意は完了です。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h1 id="3.-スクリプトの作成"&gt;3. スクリプトの作成&lt;/h1&gt;

&lt;p&gt;それではスクリプトを作成します。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ vim presigned_url.rb
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ファイルを開いたら以下の内容をコピペします。&lt;br&gt;
また、その際に&lt;strong&gt;bucketname&lt;/strong&gt;、&lt;strong&gt;objectname&lt;/strong&gt;、&lt;strong&gt;uploadfile&lt;/strong&gt;と&lt;strong&gt;アクセスキーID&lt;/strong&gt;と&lt;strong&gt;シークレットアクセスキー&lt;/strong&gt;は適宜変更してください。&lt;br&gt;
バケットのリージョンをTokyoにしなかった場合も適切なリージョンに変更する必要があります。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#!/usr/bin/env ruby

require 'aws-sdk'

bucketname = "kohei-no-bucket"    # バケット名
objectname = "ceresso.png"        # オブジェクト名

Aws.config[:credentials] = Aws::Credentials.new(
  '********************',                      # アクセスキーID
  '****************************************',  # シークレットアクセスキー
)
s3 = Aws::S3::Resource.new(region:'ap-northeast-1')  # Tokyoリージョン
obj = s3.bucket(bucketname).object(objectname)
puts obj.presigned_url(:get, expires_in:60)   # expires_in:有効期限(秒)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;実行権限を追加しておきます。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ chmod +x presigned_url.rb
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;以上で準備完了です。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h1 id="4.-実践！"&gt;4. 実践！&lt;/h1&gt;

&lt;p&gt;その前に、一応現在のバケットの設定が&lt;strong&gt;「ウェブサイトのホスティングを有効にしない」&lt;/strong&gt;となっているのを確認しておきます。&lt;/p&gt;

&lt;p&gt;&lt;img alt="5-test01.png" src="https://qiita-image-store.s3.amazonaws.com/0/82090/18fb2061-a1fc-f7d5-fee6-0f8e7b15e7b8.png" /&gt;&lt;/p&gt;

&lt;p&gt;それでは実行です。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ ./presigned_url.rb
https://kohei-no-bucket.s3-ap-northeast-1.amazonaws.com/ceresso.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;amp;X-Amz-Credential=＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊%2F20160824%2Fap-northeast-1%2Fs3%2Faws4_request&amp;amp;X-Amz-Date=20160824T061832Z&amp;amp;X-Amz-Expires=60&amp;amp;X-Amz-SignedHeaders=host&amp;amp;X-Amz-Signature=26eddaaad67a9f0e5d011b110ee34e271557c5f9f8bac82c9da655d58956245e
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;発行されたURLにアクセスしてみます。&lt;/p&gt;

&lt;p&gt;&lt;img alt="5-test02.png" src="https://qiita-image-store.s3.amazonaws.com/0/82090/6d3642fe-2325-e9f2-54b3-d093f67a472b.png" /&gt;&lt;/p&gt;

&lt;p&gt;画像が表示されました。&lt;br&gt;
それでは60秒過ぎてからもう一度アクセスしてみます。&lt;/p&gt;

&lt;p&gt;&lt;img alt="5-test03.png" src="https://qiita-image-store.s3.amazonaws.com/0/82090/0a7cf754-86eb-631e-0de4-2b20b78e389f.png" /&gt;&lt;/p&gt;

&lt;p&gt;アクセスができなくなっているのが確認できました。&lt;br&gt;
以上で期限付きURLの発行の完了です。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h1 id="おわりに"&gt;おわりに&lt;/h1&gt;

&lt;p&gt;「期限付きURL」が発行できることによって、一時的なファイル共有が可能になるのでこれはとても便利なんじゃないかなと個人的には思います。&lt;br&gt;
ただ、&lt;a href="http://docs.aws.amazon.com/sdkforruby/api/Aws/S3/Object.html#presigned_url-instance_method"&gt;ドキュメント&lt;/a&gt;によるとこの期限付きURLは「１週間」を超える設定にはできないことです。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Raises:&lt;br&gt;
(ArgumentError) — Raised if :expires_in exceeds one week (604800 seconds).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h1 id="おまけ"&gt;おまけ&lt;/h1&gt;

&lt;p&gt;そこについても試してみました。&lt;/p&gt;

&lt;p&gt;●ちょうど１週間(604800秒)の場合&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ ./presigned_url.rb 
https://kohei-no-bucket.s3-ap-northeast-1.amazonaws.com/ceresso.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;amp;X-Amz-Credential=********************%2F20160825%2Fap-northeast-1%2Fs3%2Faws4_request&amp;amp;X-Amz-Date=20160825T021333Z&amp;amp;X-Amz-Expires=604800&amp;amp;X-Amz-SignedHeaders=host&amp;amp;X-Amz-Signature=709a0de7cf14bd002a9b7953da5e5c9433104ccf9743bb7fda0332bd17830043
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;●1週間+1秒(604801秒)の場合&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ ./presigned_url.rb 
/Library/Ruby/Gems/2.0.0/gems/aws-sdk-core-2.5.4/lib/aws-sdk-core/s3/presigner.rb:68:in `expires_in': expires_in value of 604801 exceeds one-week maximum (ArgumentError)
    from /Library/Ruby/Gems/2.0.0/gems/aws-sdk-core-2.5.4/lib/aws-sdk-core/s3/presigner.rb:50:in `presigned_url'
    from /Library/Ruby/Gems/2.0.0/gems/aws-sdk-resources-2.5.4/lib/aws-sdk-resources/services/s3/object.rb:189:in `presigned_url'
    from ./presigned_url.rb:14:in `&amp;lt;main&amp;gt;'
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;期限付きURLも期限付きだったんですねw&lt;/p&gt;

&lt;p&gt;参考：&lt;a href="http://docs.aws.amazon.com/sdkforruby/api/Aws/S3/Object.html#presigned_url-instance_method"&gt;&lt;strong&gt;AWS SDK for Ruby - presigned_url&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>必ずやっておきたいwordpress初期設定</title>
    <link rel="alternate" href="http://blog.url.com/2016/08/26/wordpress-how-to-get-started.html"/>
    <id>http://blog.url.com/2016/08/26/wordpress-how-to-get-started.html</id>
    <published>2016-08-26T09:00:00+09:00</published>
    <updated>2016-08-31T11:33:25+09:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;h1 id="はじめに"&gt;はじめに&lt;/h1&gt;

&lt;hr&gt;

&lt;p&gt;wordpressインストール後、サイトの中身をカスタマイズする前に、まずやっておくべき初期設定。&lt;br&gt;
今後のサイト管理をしやすくするためにもまずはじめに設定しましょう。&lt;/p&gt;

&lt;p&gt;基本的にはメニューバー下部にある、設定メニュー部分にある６項目。&lt;br&gt;
今回は★印の部分の設定をおこないました。&lt;/p&gt;

&lt;p&gt;&lt;img alt="wordpress_setting" src="/images/./2016/0826_wordpress_setting/setting_00.png" /&gt;&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;・一般 ★
・投稿設定
・表示設定
・ディスカッション
・メディア
・パーマリンク設定　★
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id="一般設定★"&gt;一般設定★&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;サイトタイトル、キャッチフレーズを入力。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;キャッチフレーズについてはテンプレートによって、タイトルタグや見出しタグにはいってしまい、&lt;br&gt;
SEO的に好ましくない設定になっているものもあるようなので、&lt;br&gt;
空白にした方が良い場合もあるようです。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;wordpressアドレス、サイトアドレスを入力。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;wordpressアドレス：実際にwordpressがインストールされているパスを入力します。&lt;/p&gt;

&lt;p&gt;サイトアドレス：ブラウザ上で表示されるサイトのトップページとなるURL&lt;/p&gt;

&lt;p&gt;�ここで注意！&lt;br&gt;
wordpressアドレスは、誤ったものを入力してしまうとそもそもサイト自体にアクセスできなくなってしまいます！&lt;/p&gt;

&lt;p&gt;今回これに引っかかってしまいました&amp;gt;&amp;lt;&lt;/p&gt;

&lt;p&gt;解決方法は2つ。&lt;/p&gt;

&lt;p&gt;・定数を定義する&lt;br&gt;
・MysQLデータの書き換え&lt;/p&gt;

&lt;p&gt;このいずれかで復旧できます！でもやはり手間なので、wordpressアドレスは&lt;br&gt;
安易に触らないことをおすすめします。&lt;/p&gt;

&lt;p&gt;また言語設定もこの一般設定からできます。&lt;br&gt;
インストール後、英語表示になっている場合はここで日本語表示へ変更&lt;br&gt;
しましょう。&lt;/p&gt;

&lt;h2 id="パーマリンク設定"&gt;パーマリンク設定&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://wpdocs.osdn.jp/%E3%83%91%E3%83%BC%E3%83%9E%E3%83%AA%E3%83%B3%E3%82%AF%E3%81%AE%E4%BD%BF%E3%81%84%E6%96%B9"&gt;パーマリンクとは？&lt;/a&gt;&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;パーマリンクとは、ブログの個々の投稿、
カテゴリーなどの投稿一覧ページへの恒久的（半永久的）な URL です。
(引用：wordpress codex　日本語版より)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;パーマリンクについては基本設定のままの場合、&lt;br&gt;
記事部分を示す値が数字と記号の組み合わせとなってしまいます。&lt;/p&gt;

&lt;p&gt;&lt;img alt="wordpress_setting" src="/images/./2016/0826_wordpress_setting/setting_02.png" /&gt;&lt;/p&gt;

&lt;p&gt;ここをなぜ変更する必要があるかというと、SEO対策としての意味合いが大きいようです。&lt;br&gt;
そして、googleの推奨する&lt;a href="https://support.google.com/webmasters/answer/76329?hl=ja"&gt;シンプルなURL構造を維持する&lt;/a&gt;という文面にも&lt;br&gt;
&lt;strong&gt;可能な場合は ID ではなく意味のある単語を使用して&lt;/strong&gt;とあります。&lt;/p&gt;

&lt;p&gt;また、URLを一目見て、どんな記事かが分かるようなURLにするとユーザビリティも良くなるのではないでしょうか。&lt;/p&gt;

&lt;p&gt;パーマリンクのおすすめを紹介しているサイトもありますが、&lt;br&gt;
運用の仕方に合わせて検討するのがよいかと思います。&lt;/p&gt;

&lt;p&gt;ただし、パーマリンクは日本語ではなく英語設定をおすすめします。&lt;br&gt;
理由は、リンクをコピーしてテキストに貼り付けた場合、リンクが長くなってしまうのです。&lt;/p&gt;

&lt;p&gt;&lt;img alt="wordpress_setting" src="/images/./2016/0826_wordpress_setting/setting_03.png" /&gt;&lt;/p&gt;

&lt;p&gt;そして、このパーマリンクの構成は必ず初期設定の段階でしっかり取り決めを&lt;br&gt;
することが必要です。&lt;br&gt;
なぜなら、途中でこのパーマリンクを変更しようとすると、今まで投稿した記事&lt;br&gt;
のリンクも全て変更されてしまうのです。&lt;/p&gt;

&lt;p&gt;リンク変更に伴い、&lt;br&gt;
リダイレクト設定に手間がかかる、SEO評価やSNSのシェア回数もリセットされて&lt;br&gt;
しまうので、結構なダメージを受ける可能性大です。&lt;br&gt;
安易に変更することはできないので、初期の段階でしっかりと設定をしておきましょう！&lt;/p&gt;

&lt;p&gt;この次はテーマの設定です。&lt;br&gt;
長くなったので、別記事にまとめます！&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>弊社お客様であるセーフィー様の「Safie LIVE」が「RIZAP KBC オーガスタゴルフトーナメント2016」の定点ネット映像配信に採用されました！！！</title>
    <link rel="alternate" href="http://blog.url.com/2016/08/25/kbc-augusta-golf-tournament-2016.html"/>
    <id>http://blog.url.com/2016/08/25/kbc-augusta-golf-tournament-2016.html</id>
    <published>2016-08-25T09:00:00+09:00</published>
    <updated>2016-08-31T11:33:25+09:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;弊社のお客様である&lt;strong&gt;&lt;a href="https://safie.link"&gt;セーフィー様&lt;/a&gt;&lt;/strong&gt;が手掛ける&lt;strong&gt;「Safie LIVE」&lt;/strong&gt;が、石川遼選手も参戦する&lt;strong&gt;「&lt;a href="http://www.kbc.co.jp/sports/augusta/"&gt;RIZAP KBC オーガスタゴルフトーナメント&lt;/a&gt;」&lt;/strong&gt;の&lt;strong&gt;定点ネットライブ映像配信&lt;/strong&gt;に採用されました！&lt;/p&gt;

&lt;p&gt;&lt;img alt="augusta2016" src="http://www.kbc.co.jp/image/bn_kbc/bn_augusta_live_474x64.gif" /&gt;&lt;/p&gt;

&lt;p&gt;弊社プラウディットではこのシステムの&lt;strong&gt;インフラ部分の設計・構築&lt;/strong&gt;をお手伝いさせていただいております。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;テレビ中継だけでは見ることのできない映像や、自分の見たい特定箇所(スタート１番ホールのティーショット・打撃練習場・上がり18番ホールのグリーン)の映像をスマートフォンやタブレット、パソコンから手軽に視聴いただければと思います！&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;「&lt;a href="http://www.kbc.co.jp/sports/augusta/"&gt;RIZAP KBC オーガスタゴルフトーナメント&lt;/a&gt;」&lt;/strong&gt;は&lt;strong&gt;本日8/25(木)〜28(日)&lt;/strong&gt;の開催ですので、ご興味のある方は是非ご視聴ください！&lt;/p&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;a href="http://www3.kbc.co.jp/live/augusta/camera_01.html#TopCamera"&gt;Live! 1番ティーショット&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;a href="http://www3.kbc.co.jp/live/augusta/camera_03.html#TopCamera"&gt;Live! 18番グリーン&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;また、弊社プラウディットへの&lt;strong&gt;お仕事のご依頼やお問い合わせ&lt;/strong&gt;は&lt;strong&gt;&lt;a href="https://www.proudit.jp/#contact"&gt;こちら&lt;/a&gt;&lt;/strong&gt;まで。&lt;/p&gt;
&lt;/blockquote&gt;
</content>
  </entry>
  <entry>
    <title>AWS SDK for Ruby バージョン 2 を使用したS3バケットへのオブジェクトアップロード</title>
    <link rel="alternate" href="http://blog.url.com/2016/08/23/to-upload-a-file-using-the-aws-sdk-for-ruby.html"/>
    <id>http://blog.url.com/2016/08/23/to-upload-a-file-using-the-aws-sdk-for-ruby.html</id>
    <published>2016-08-23T09:00:00+09:00</published>
    <updated>2016-08-31T13:10:58+09:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;h1 id="はじめに"&gt;はじめに&lt;/h1&gt;

&lt;p&gt;プログラミングのお勉強をしようと思い、AWS公式ドキュメントにある&lt;a href="https://docs.aws.amazon.com/ja_jp/AmazonS3/latest/dev/UploadObjSingleOpRuby.html"&gt;「AWS SDK for Ruby を使用したオブジェクトのアップロード」&lt;/a&gt;を参考にファイルアップロードを行うRubyスクリプトを書いてみました。&lt;br&gt;
とはいえ、そのままだとただのコピペになってしまうので、アップロードするのに必要な権限のみを持つIAMユーザーを作成し、それをスクリプト内で指定してファイルのアップロードを行いたいと思います。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h1 id="1.-ファイルアップロード先の準備"&gt;1. ファイルアップロード先の準備&lt;/h1&gt;

&lt;p&gt;「S3」→「バケットを作成」でアップロード先となるバケットを作成します。&lt;br&gt;
一応、今回はリージョンを「Tokyo」にしています。&lt;br&gt;
&lt;img alt="1-s301.png" src="https://qiita-image-store.s3.amazonaws.com/0/82090/9467a12e-d512-e23a-7c76-f9a541e1eb76.png" /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img alt="1-s302.png" src="https://qiita-image-store.s3.amazonaws.com/0/82090/bdc1e8ef-6d6e-6c06-52ab-bc384be83e02.png" /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h1 id="2.-アップロードユーザーの用意"&gt;2. アップロードユーザーの用意&lt;/h1&gt;

&lt;p&gt;「IAM」→「ユーザー」→「新規ユーザーの作成」で今回利用するアップロード用のユーザー名を入力し「作成」をクリックします。&lt;br&gt;
&lt;img alt="2-iam01.png" src="https://qiita-image-store.s3.amazonaws.com/0/82090/c3fdf8ba-b84a-b1b0-8a24-3a7302a8577b.png" /&gt;&lt;/p&gt;

&lt;p&gt;ここで、&lt;strong&gt;アクセスキーID&lt;/strong&gt;と&lt;strong&gt;シークレットアクセスキー&lt;/strong&gt;が表示されるので、メモまたはダウンロードをしてから「閉じる」をクリックしてください。後で必要になります。&lt;br&gt;
&lt;img alt="2-iam02.png" src="https://qiita-image-store.s3.amazonaws.com/0/82090/2fd87e9f-ccf7-99f9-4e0b-eeefc1f3b80a.png" /&gt;&lt;/p&gt;

&lt;p&gt;次に、先ほど作成したユーザーを選択します。&lt;br&gt;
&lt;img alt="2-iam03.png" src="https://qiita-image-store.s3.amazonaws.com/0/82090/ab0e379b-b43a-82a9-0967-137d41867186.png" /&gt;&lt;/p&gt;

&lt;p&gt;「アクセス許可」→「インラインポリシー」→「ここをクリックしてください。」をクリックします。&lt;br&gt;
&lt;img alt="2-iam04.png" src="https://qiita-image-store.s3.amazonaws.com/0/82090/f769ec9e-7b96-ffc6-64ad-39f656bdbae7.png" /&gt;&lt;/p&gt;

&lt;p&gt;「カスタムポリシー」を選んで「選択」をクリックします。&lt;br&gt;
&lt;img alt="2-iam05.png" src="https://qiita-image-store.s3.amazonaws.com/0/82090/67481f69-69f8-a042-9449-05cf19e679bf.png" /&gt;&lt;/p&gt;

&lt;p&gt;以下のポリシーを適用します。(コピペでOKです。)&lt;/p&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nt"&gt;"Version"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"2012-10-17"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nt"&gt;"Statement"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nt"&gt;"Sid"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Stmt1471591778000"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nt"&gt;"Effect"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Allow"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nt"&gt;"Action"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="s2"&gt;"s3:PutObject"&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nt"&gt;"Resource"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="s2"&gt;"*"&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img alt="2-iam06.png" src="https://qiita-image-store.s3.amazonaws.com/0/82090/f5d54ce1-971c-ead6-2948-f1c791dfb19b.png" /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img alt="2-iam07.png" src="https://qiita-image-store.s3.amazonaws.com/0/82090/93c5946d-9996-1c5c-864c-01cece33cfca.png" /&gt;&lt;/p&gt;

&lt;p&gt;以上で、ファイルアップロード用ユーザーが作成できました。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h1 id="3.-スクリプトの作成"&gt;3. スクリプトの作成&lt;/h1&gt;

&lt;p&gt;それではいよいよアップロード用のスクリプトを作成します。&lt;br&gt;
今回の作業環境はMacで行います。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ vim upload.rb
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ファイルを開いたら以下のスクリプトをコピペします。&lt;br&gt;
ただ、その際に&lt;strong&gt;bucketname&lt;/strong&gt;、&lt;strong&gt;objectname&lt;/strong&gt;、&lt;strong&gt;uploadfile&lt;/strong&gt;と&lt;strong&gt;アクセスキーID&lt;/strong&gt;と&lt;strong&gt;シークレットアクセスキー&lt;/strong&gt;は適宜変更してください。&lt;br&gt;
また、バケットのリージョンをTokyoにしなかった場合も適切なリージョンに変更する必要があります。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#!/usr/bin/env ruby

require 'aws-sdk'

bucketname = "kohei-no-bucket"  # バケット名
objectname = "ceresso.png"      # アップロード後のファイル名
uploadfile = "ceresso.png"       アップロードするファイル名

Aws.config[:credentials] = Aws::Credentials.new(
  '********************',                        # アクセスキーID
  '****************************************',    # シークレットアクセスキー
)
s3 = Aws::S3::Resource.new(region:'ap-northeast-1')  # Tokyoリージョン
obj = s3.bucket(bucketname).object(objectname)
obj.upload_file(uploadfile)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;最後に、作成したら実行権限をつけておきましょう。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ chmod +x upload.rb
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;あと、もし&lt;em&gt;aws-adk&lt;/em&gt;のインストールがまだの場合は以下のコマンドでインストールもしておいてください。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ gem install aws-sdk
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ということで、すべての準備が整いました。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h1 id="4.-実践！"&gt;4. 実践！&lt;/h1&gt;

&lt;p&gt;それではアップロードしてみます。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ ./upload.rb
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;何もエラーなくプロンプトが返って来れば無事アップロード成功です。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h1 id="5.-確認"&gt;5. 確認&lt;/h1&gt;

&lt;p&gt;それではバケットを確認してみます。&lt;/p&gt;

&lt;p&gt;&lt;img alt="3-upload01.png" src="https://qiita-image-store.s3.amazonaws.com/0/82090/62b9865a-e187-ba56-a6f1-a81c4143c754.png" /&gt;&lt;/p&gt;

&lt;p&gt;アップロードできているのが確認できました。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h1 id="おわりに"&gt;おわりに&lt;/h1&gt;

&lt;p&gt;今回は同じディレクトリ内にあるファイルをアップロードしました。&lt;br&gt;
別の場所にあるファイルをアップロードしたい場合は、スクリプト内の&lt;em&gt;uploadfile&lt;/em&gt;をパス指定すればOKです。&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>夏の川遊び＆アウトドアにおすすめのエッセンシャルオイル</title>
    <link rel="alternate" href="http://blog.url.com/2016/08/18/summer-vercation.html"/>
    <id>http://blog.url.com/2016/08/18/summer-vercation.html</id>
    <published>2016-08-18T09:00:00+09:00</published>
    <updated>2016-08-23T13:15:36+09:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;h1 id="夏の川遊び"&gt;夏の川遊び&lt;/h1&gt;

&lt;hr&gt;

&lt;p&gt;お盆休みも終わってしまいましたね〜。&lt;br&gt;
我が家にお盆休みはなかったのですが、週末を利用して&lt;br&gt;
つい先日秦野市にある&lt;strong&gt;神奈川県立秦野戸川公園&lt;/strong&gt;へ行ってきました！&lt;/p&gt;

&lt;p&gt;とても大きな公園で、丹沢の山から湧き出る水無川(みずなしがわ)が流れています。&lt;br&gt;
この水無川での川遊びが今回の目的。&lt;br&gt;
川の流れも穏やかで、水位も浅め、小さい子供の水遊びに最適です。&lt;/p&gt;

&lt;p&gt;今年は、雨が少なかったようで、川の水が干上がりそうなほど水位が浅め。&lt;br&gt;
息子の足首ほどでした。&lt;/p&gt;

&lt;p&gt;それでもお盆時期の週末、家族連れで賑わっていました！&lt;/p&gt;

&lt;p&gt;息子は川にある石をひたすら集め、工事現場を作っていました(笑)。&lt;br&gt;
あとはエンドレスでジョーロで水やり。&lt;br&gt;
計3〜4時間は川で遊んでいました。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;img alt="play_of_the_summer" src="/images/./2016/0818_play_of_the_summer/togawapark_01.jpg" /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="http://www.kanagawa-park.or.jp/hadanotokawa/"&gt;戸川公園&lt;/a&gt;、おすすめです！！&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h1 id="アウトドアにおすすめ!肌に優しい虫除けスプレー"&gt;アウトドアにおすすめ!肌に優しい虫除けスプレー&lt;/h1&gt;

&lt;hr&gt;

&lt;p&gt;小さなお子さんがいるアウトドアに虫除け対策は必須！&lt;br&gt;
お肌の弱い小さなお子さんでも安心して使える虫除けスプレーをご紹介！&lt;br&gt;
今回の川遊びでも活躍しました。&lt;/p&gt;

&lt;p&gt;作り方は以下の材料を遮光瓶に入れて混ぜるだけ。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;・精製水25ml　
・無水エタノール5ml
・テラアーマー4〜6滴
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;テラアーマーというエッセンシャルオイル、&lt;br&gt;
15種類(ユーカリプタス、シトロネラ、レモングラス、他)も&lt;br&gt;
防虫効果の高いオイルを組み合わせてあり、虫除け、虫退治に効果大！&lt;/p&gt;

&lt;p&gt;&lt;img alt="play_of_the_summer" src="/images/./2016/0818_play_of_the_summer/terraaumor.png" /&gt;&lt;/p&gt;

&lt;p&gt;匂いのきつい印象のある虫除けスプレーですがテラアーマーは優しい&lt;br&gt;
甘い香り。つけていてとても気分がいいですよ〜！&lt;/p&gt;

&lt;p&gt;我が家はお出かけの時は必ず、この虫除けスプレーをシュシュっとかけています。&lt;br&gt;
効果もばっちりのナチュラル虫除けスプレーぜひお試しください！&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>AWSと他の環境をVPNで繋げる際の「VPN接続」の作成をシェルスクリプトにしてみた。</title>
    <link rel="alternate" href="http://blog.url.com/2016/08/16/shell-script-for-aws-vpn.html"/>
    <id>http://blog.url.com/2016/08/16/shell-script-for-aws-vpn.html</id>
    <published>2016-08-16T09:00:00+09:00</published>
    <updated>2016-08-23T13:15:36+09:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;h1 id="はじめに"&gt;はじめに&lt;/h1&gt;

&lt;p&gt;AWSと他の環境をVPN接続する場合、AWS側では「VPN接続」を作成する必要があります。&lt;br&gt;
管理画面からポチポチ操作するのは面倒なのでスクリプトを作成しました。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h1 id="流れ"&gt;流れ&lt;/h1&gt;

&lt;p&gt;スクリプトの大まかな流れです。&lt;/p&gt;

&lt;p&gt;・ 仮想プライベートゲートウェイの作成&lt;br&gt;
・ 仮想プライベートゲートウェイをVPCへattach&lt;br&gt;
・ カスタマーゲートウェイの作成&lt;br&gt;
・ VPN接続の作成&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h1 id="スクリプト"&gt;スクリプト&lt;/h1&gt;

&lt;p&gt;以下、スクリプトです。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#!/bin/bash

# == Check number of arguments. ==================================== #
if [ $# -ne 2 ]; then
  echo "ERROR: Please check the number of arguments."
  echo "   -usage-----------------------------"
  echo "     $0 [VPC ID] [Counter VPN-IP] "
  echo "   -----------------------------------"
  echo ""
  exit 1
fi


# == Set ENV. ====================================================== #
VPC_ID="$1"
PUBLIC_IP="$2"
TAG_VALUE="VPNConnectTo${PUBLIC_IP}"


# == Create VPN ==================================================== #
# Create VPN Gateway
echo "==[VGW]======================================="
echo "Create the VGW."
VGW_ID=`aws ec2 create-vpn-gateway --type ipsec.1 | jq -r .VpnGateway.VpnGatewayId`

echo "VGW_ID:${VGW_ID}"
if [ -n "${VGW_ID}" -a "${VGW_ID}" != "null" ]; then
  echo "SUCCESS: Create the VirtualGateWay."
else
  echo "ERROR: Can't create the VirtualGateWay."
  exit 1
fi
echo ""

echo "Tagged to the VGW."
aws ec2 create-tags --resources ${VGW_ID} --tags Key=Name,Value=${TAG_VALUE}

echo "Attach the VGW to the VPC."
VGW_STAT=`aws ec2 attach-vpn-gateway --vpn-gateway-id ${VGW_ID} --vpc-id ${VPC_ID} | jq -r .VpcAttachment.State`

if [ "${VGW_STAT}" = "attaching" ]; then
  echo "SUCCESS: Attaching the VGW to the VPC."
else
  echo "ERROR: Can't attach the VGW to the VPC."
  exit 1
fi
echo ""
echo ""


# Create CustomerGateway
echo "==[CGW]======================================="
echo "Create the VGW."
CGW_ID=`aws ec2 create-customer-gateway --type ipsec.1 --public-ip ${PUBLIC_IP} --bgp-asn 65000 | jq -r .CustomerGateway.CustomerGatewayId`

echo "CGW_ID:${CGW_ID}"
if [ -n "${CGW_ID}" -a "${CGW_ID}" != "null" ]; then
  echo "SUCCESS: Create the CustomerGateWay."
else
  echo "ERROR: Can't create the CustomerGateWay."
  exit 1
fi
echo ""

echo "Tagged to the CGW."
aws ec2 create-tags --resources ${CGW_ID} --tags Key=Name,Value=${TAG_VALUE}
echo ""
echo ""


# Create VPN Connection
echo "==[VPN]======================================="
echo "Create the VPN."
VPN_ID=`aws ec2 create-vpn-connection --type ipsec.1 --customer-gateway-id ${CGW_ID} --vpn-gateway-id ${VGW_ID} | jq -r .VpnConnection.VpnConnectionId`

echo "VPN_ID:${VPN_ID}"
if [ -n "${VPN_ID}" -a "${VPN_ID}" != "null" ]; then
  echo "SUCCESS: Create the VPN Connection."
else
  echo "ERROR: Can't create the VPN Connection."
  exit 1
fi
echo ""

echo "Tagged to the VPN."
aws ec2 create-tags --resources ${VPN_ID} --tags Key=Name,Value=${TAG_VALUE}

echo ""
echo ""

echo "--------------------------------------------------"
echo "COMPLETED: All of the task has been completed."

exit 0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h1 id="実行"&gt;実行&lt;/h1&gt;

&lt;p&gt;コマンド実行例です。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ sh create-vpn.sh vpc-1e1ed97b 210.129.19.42
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h1 id="結果"&gt;結果&lt;/h1&gt;

&lt;p&gt;以下、管理画面から見た作成結果です。&lt;/p&gt;

&lt;p&gt;・仮想プライベートゲートウェイ&lt;br&gt;
&lt;img alt="idcf-vpn_scrip03.png" src="https://qiita-image-store.s3.amazonaws.com/0/82090/47834725-e13f-8cf9-d3a3-33f1cf51da26.png" /&gt;&lt;/p&gt;

&lt;p&gt;・カスタマーゲートウェイ&lt;br&gt;
&lt;img alt="idcf-vpn_scrip02.png" src="https://qiita-image-store.s3.amazonaws.com/0/82090/ee9a3f30-87a6-a69d-c6ad-6069eeb8928f.png" /&gt;&lt;/p&gt;

&lt;p&gt;・VPN接続&lt;br&gt;
&lt;img alt="idcf-vpn_scrip01.png" src="https://qiita-image-store.s3.amazonaws.com/0/82090/39290a24-e4ab-22dd-1d50-ec27b4183345.png" /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h1 id="おわりに"&gt;おわりに&lt;/h1&gt;

&lt;p&gt;スクリプト実行後、「VPN接続」から「設定のダウンロード」をしてそのコンフィグを対向となるルーターに流し込めばOKです。&lt;/p&gt;
</content>
  </entry>
</feed>
