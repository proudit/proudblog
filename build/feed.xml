<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Blog Name</title>
  <subtitle>Blog subtitle</subtitle>
  <id>http://blog.url.com/</id>
  <link href="http://blog.url.com/"/>
  <link href="http://blog.url.com/feed.xml" rel="self"/>
  <updated>2016-08-16T09:00:00+09:00</updated>
  <author>
    <name>Blog Author</name>
  </author>
  <entry>
    <title>AWSと他の環境をVPNで繋げる際の「VPN接続」の作成をシェルスクリプトにしてみた。</title>
    <link rel="alternate" href="http://blog.url.com/2016/08/16/shell-script-for-aws-vpn.html"/>
    <id>http://blog.url.com/2016/08/16/shell-script-for-aws-vpn.html</id>
    <published>2016-08-16T09:00:00+09:00</published>
    <updated>2016-08-16T12:12:04+09:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;h1 id="はじめに"&gt;はじめに&lt;/h1&gt;

&lt;p&gt;AWSと他の環境をVPN接続する場合、AWS側では「VPN接続」を作成する必要があります。&lt;br&gt;
管理画面からポチポチ操作するのは面倒なのでスクリプトを作成しました。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h1 id="流れ"&gt;流れ&lt;/h1&gt;

&lt;p&gt;スクリプトの大まかな流れです。&lt;/p&gt;

&lt;p&gt;・ 仮想プライベートゲートウェイの作成&lt;br&gt;
・ 仮想プライベートゲートウェイをVPCへattach&lt;br&gt;
・ カスタマーゲートウェイの作成&lt;br&gt;
・ VPN接続の作成&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h1 id="スクリプト"&gt;スクリプト&lt;/h1&gt;

&lt;p&gt;以下、スクリプトです。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#!/bin/bash

# == Check number of arguments. ==================================== #
if [ $# -ne 2 ]; then
  echo "ERROR: Please check the number of arguments."
  echo "   -usage-----------------------------"
  echo "     $0 [VPC ID] [Counter VPN-IP] "
  echo "   -----------------------------------"
  echo ""
  exit 1
fi


# == Set ENV. ====================================================== #
VPC_ID="$1"
PUBLIC_IP="$2"
TAG_VALUE="VPNConnectTo${PUBLIC_IP}"


# == Create VPN ==================================================== #
# Create VPN Gateway
echo "==[VGW]======================================="
echo "Create the VGW."
VGW_ID=`aws ec2 create-vpn-gateway --type ipsec.1 | jq -r .VpnGateway.VpnGatewayId`

echo "VGW_ID:${VGW_ID}"
if [ -n "${VGW_ID}" -a "${VGW_ID}" != "null" ]; then
  echo "SUCCESS: Create the VirtualGateWay."
else
  echo "ERROR: Can't create the VirtualGateWay."
  exit 1
fi
echo ""

echo "Tagged to the VGW."
aws ec2 create-tags --resources ${VGW_ID} --tags Key=Name,Value=${TAG_VALUE}

echo "Attach the VGW to the VPC."
VGW_STAT=`aws ec2 attach-vpn-gateway --vpn-gateway-id ${VGW_ID} --vpc-id ${VPC_ID} | jq -r .VpcAttachment.State`

if [ "${VGW_STAT}" = "attaching" ]; then
  echo "SUCCESS: Attaching the VGW to the VPC."
else
  echo "ERROR: Can't attach the VGW to the VPC."
  exit 1
fi
echo ""
echo ""


# Create CustomerGateway
echo "==[CGW]======================================="
echo "Create the VGW."
CGW_ID=`aws ec2 create-customer-gateway --type ipsec.1 --public-ip ${PUBLIC_IP} --bgp-asn 65000 | jq -r .CustomerGateway.CustomerGatewayId`

echo "CGW_ID:${CGW_ID}"
if [ -n "${CGW_ID}" -a "${CGW_ID}" != "null" ]; then
  echo "SUCCESS: Create the CustomerGateWay."
else
  echo "ERROR: Can't create the CustomerGateWay."
  exit 1
fi
echo ""

echo "Tagged to the CGW."
aws ec2 create-tags --resources ${CGW_ID} --tags Key=Name,Value=${TAG_VALUE}
echo ""
echo ""


# Create VPN Connection
echo "==[VPN]======================================="
echo "Create the VPN."
VPN_ID=`aws ec2 create-vpn-connection --type ipsec.1 --customer-gateway-id ${CGW_ID} --vpn-gateway-id ${VGW_ID} | jq -r .VpnConnection.VpnConnectionId`

echo "VPN_ID:${VPN_ID}"
if [ -n "${VPN_ID}" -a "${VPN_ID}" != "null" ]; then
  echo "SUCCESS: Create the VPN Connection."
else
  echo "ERROR: Can't create the VPN Connection."
  exit 1
fi
echo ""

echo "Tagged to the VPN."
aws ec2 create-tags --resources ${VPN_ID} --tags Key=Name,Value=${TAG_VALUE}

echo ""
echo ""

echo "--------------------------------------------------"
echo "COMPLETED: All of the task has been completed."

exit 0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h1 id="実行"&gt;実行&lt;/h1&gt;

&lt;p&gt;コマンド実行例です。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ sh create-vpn.sh vpc-1e1ed97b 210.129.19.42
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h1 id="結果"&gt;結果&lt;/h1&gt;

&lt;p&gt;以下、管理画面から見た作成結果です。&lt;/p&gt;

&lt;p&gt;・仮想プライベートゲートウェイ&lt;br&gt;
&lt;img alt="idcf-vpn_scrip03.png" src="https://qiita-image-store.s3.amazonaws.com/0/82090/47834725-e13f-8cf9-d3a3-33f1cf51da26.png" /&gt;&lt;/p&gt;

&lt;p&gt;・カスタマーゲートウェイ&lt;br&gt;
&lt;img alt="idcf-vpn_scrip02.png" src="https://qiita-image-store.s3.amazonaws.com/0/82090/ee9a3f30-87a6-a69d-c6ad-6069eeb8928f.png" /&gt;&lt;/p&gt;

&lt;p&gt;・VPN接続&lt;br&gt;
&lt;img alt="idcf-vpn_scrip01.png" src="https://qiita-image-store.s3.amazonaws.com/0/82090/39290a24-e4ab-22dd-1d50-ec27b4183345.png" /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h1 id="おわりに"&gt;おわりに&lt;/h1&gt;

&lt;p&gt;スクリプト実行後、「VPN接続」から「設定のダウンロード」をしてそのコンフィグを対抗となるルーターに流し込めばOKです。&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>LINE BOTとAWS LambdaとAPI Gatewayを使って「オウム返しBOT」を作る。</title>
    <link rel="alternate" href="http://blog.url.com/2016/08/08/make-linebot-using-the-aws-lambda-and-the-api-gateway.html"/>
    <id>http://blog.url.com/2016/08/08/make-linebot-using-the-aws-lambda-and-the-api-gateway.html</id>
    <published>2016-08-08T09:00:00+09:00</published>
    <updated>2016-08-08T14:48:22+09:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;h1 id="はじめに"&gt;はじめに&lt;/h1&gt;

&lt;p&gt;LineのBOT APIとAWSのAPI Gateway、Lambdaを利用してLINE botを作りたいと思います。&lt;br&gt;
まず、以下がLINEのBOT APIドキュメントの図です。&lt;br&gt;
&lt;img alt="How BOT API works" src="https://developers.line.me/wp-content/uploads/2016/04/bot_img001.png" /&gt;&lt;br&gt;
出典：&lt;a href="https://developers.line.me/bot-api/overview#how_bot_works"&gt;LINE developers&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;ここでの「YOUR SYSTEM」というところを「Lambda」と「API Gateway」を使って構築します。&lt;/p&gt;

&lt;p&gt;また、今回必要となる&lt;a href="https://business.line.me/services/products/4/introduction"&gt;LINE BOT API Trial Account&lt;/a&gt;の取得方法については割愛します。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h1 id="lambda関数の作成"&gt;Lambda関数の作成&lt;/h1&gt;

&lt;p&gt;それではまず、AWSの管理コンソールから「Lambda」のサービスへ移動します。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h2 id="●-create-a-lambda-function"&gt;● Create a Lambda function&lt;/h2&gt;

&lt;p&gt;次に「Create a Lambda function」をクリックします。&lt;br&gt;
&lt;img alt="amore00_create-lambda01.png" src="https://qiita-image-store.s3.amazonaws.com/0/82090/6e230911-b7b4-7b75-9918-f897c02b6304.png" /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h2 id="●-select-blue-print"&gt;● Select blue print&lt;/h2&gt;

&lt;p&gt;ここではとりあえず何も選択せず「Next」をクリックします。&lt;br&gt;
&lt;img alt="amore00_select-blueprint01.png" src="https://qiita-image-store.s3.amazonaws.com/0/82090/4579cd07-c77f-1464-3698-bd14b121c5ce.png" /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h2 id="●-configure-triggers"&gt;● Configure triggers&lt;/h2&gt;

&lt;p&gt;今のままだとLambdaだけの状態なのでフロントに「API Gateway」を配置します。&lt;br&gt;
&lt;img alt="amore01_configure-triggers01.png" src="https://qiita-image-store.s3.amazonaws.com/0/82090/a272ada3-31a3-528b-c685-ede6f538c285.png" /&gt;&lt;/p&gt;

&lt;p&gt;「API Gateway」を配置したらその設定をここで行いますが、&lt;strong&gt;API name&lt;/strong&gt;と&lt;strong&gt;Resource name&lt;/strong&gt;は任意の名前を設定して大丈夫です。今回は「&lt;em&gt;MyAmore&lt;/em&gt;」と「&lt;em&gt;/myamore&lt;/em&gt;」にしています。&lt;br&gt;
そして&lt;strong&gt;Method&lt;/strong&gt;は「&lt;em&gt;POST&lt;/em&gt;」を選択し、&lt;strong&gt;Deploymment stage&lt;/strong&gt;は「&lt;em&gt;prod&lt;/em&gt;(デフォルト)」のままで、&lt;strong&gt;Security&lt;/strong&gt;は「&lt;em&gt;Open&lt;/em&gt;」にしておきます。&lt;br&gt;
入力が完了したら「Next」ボタンをクリックします。&lt;br&gt;
&lt;img alt="01.png" src="https://qiita-image-store.s3.amazonaws.com/0/82090/6fce3683-d44f-ec25-f94a-c69a1ed08546.png" /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h2 id="●-configure-function"&gt;● Configure function&lt;/h2&gt;

&lt;p&gt;それでは関数の設定に移ります。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h3 id="--configure-function"&gt;- Configure function&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Name&lt;/strong&gt;と&lt;strong&gt;Description&lt;/strong&gt;に任意の内容を入力します。また&lt;strong&gt;Runtime&lt;/strong&gt;はここでは「&lt;em&gt;Node.js 4.3&lt;/em&gt;」を選択します。&lt;br&gt;
&lt;img alt="03.png" src="https://qiita-image-store.s3.amazonaws.com/0/82090/ed39297b-ea8a-ccf5-735d-b95d319a180b.png" /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h3 id="--lambda-function-code"&gt;- Lambda function code&lt;/h3&gt;

&lt;p&gt;ここはとりあえずこのままにしておきます。&lt;/p&gt;

&lt;p&gt;&lt;img alt="amore01_configure-triggers03_2.png" src="https://qiita-image-store.s3.amazonaws.com/0/82090/70e17b7a-9ab9-081f-778d-fc8c02cdd15f.png" /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h3 id="--lambda-function-handler-and-role"&gt;- Lambda function handler and role&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Handler&lt;/strong&gt;に「&lt;em&gt;index.handler&lt;/em&gt;」、&lt;strong&gt;Role&lt;/strong&gt;は「&lt;em&gt;Choose an existing role&lt;/em&gt;」を選び&lt;strong&gt;Existing role&lt;/strong&gt;に「&lt;em&gt;lambda_basic_execution&lt;/em&gt;」を指定します。&lt;br&gt;
&lt;img alt="amore01_configure-triggers03_3.png" src="https://qiita-image-store.s3.amazonaws.com/0/82090/a0f1069a-b1e1-ca68-b694-10169859d648.png" /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h3 id="--advanced-settings"&gt;- Advanced settings&lt;/h3&gt;

&lt;p&gt;今回はあまり使う予定はないので&lt;strong&gt;Memory(MB)&lt;/strong&gt;は「&lt;em&gt;128&lt;/em&gt;」にしておきます。&lt;br&gt;
&lt;strong&gt;Timeout&lt;/strong&gt;はデフォルトの「&lt;em&gt;3秒&lt;/em&gt;」です。&lt;br&gt;
また、&lt;strong&gt;VPC&lt;/strong&gt;は「&lt;em&gt;No VPC&lt;/em&gt;」にしておきます。&lt;br&gt;
&lt;img alt="amore01_configure-triggers03_4.png" src="https://qiita-image-store.s3.amazonaws.com/0/82090/271e53a9-b533-f8b5-8cd5-c56454a36c49.png" /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h2 id="●-review"&gt;● Review&lt;/h2&gt;

&lt;p&gt;「Configure function」で設定した内容の確認です。&lt;br&gt;
問題なさそうなら[Create function]で作成完了です。&lt;br&gt;
&lt;img alt="02.png" src="https://qiita-image-store.s3.amazonaws.com/0/82090/6e6a3b03-5ca2-c358-9c2d-b2b509c8a6cd.png" /&gt;&lt;br&gt;
&lt;img alt="03.png" src="https://qiita-image-store.s3.amazonaws.com/0/82090/ed39297b-ea8a-ccf5-735d-b95d319a180b.png" /&gt;&lt;/p&gt;

&lt;p&gt;作成が完了すると「API Gateway」のURLが表示されます。&lt;br&gt;
&lt;img alt="04.png" src="https://qiita-image-store.s3.amazonaws.com/0/82090/fdd1265d-0627-1699-c34a-143e77141ac9.png" /&gt;&lt;/p&gt;

&lt;p&gt;ここで表示されたURLを&lt;strong&gt;LINE&lt;/strong&gt;の「&lt;em&gt;Callback URL&lt;/em&gt;」に設定します。&lt;br&gt;
その際に注意が必要なのが、ポート番号も指定してあげなければならないという点です。&lt;br&gt;
以下の画像のように、ドメイン末尾に「:443」をつけてあげる必要があります。&lt;br&gt;
&lt;img alt="05.png" src="https://qiita-image-store.s3.amazonaws.com/0/82090/781d37da-0d5c-d326-daa5-119de87c6a6c.png" /&gt;&lt;/p&gt;

&lt;p&gt;以上で「YOUR SYSTEM」に該当するフレームが完了しました。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h1 id="lambda関数の設定"&gt;Lambda関数の設定&lt;/h1&gt;

&lt;p&gt;それでは作成したフレームの中身を設定していきます。&lt;br&gt;
中身というのは先ほど「とりあえずこのまま」にしていたLambda関数の箇所です。&lt;br&gt;
「Code」タブをクリックして編集画面を表示します。&lt;br&gt;
&lt;img alt="07.png" src="https://qiita-image-store.s3.amazonaws.com/0/82090/35cc41e6-9633-79c0-a551-050fe8b69324.png" /&gt;&lt;/p&gt;

&lt;p&gt;そこに以下のソースコードをコピペします。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var https = require('https');

exports.handler = function(event, context) {
    console.log('EVENT:', JSON.stringify(event, null, 0));
    var msg = event.result[0];
    var data = JSON.stringify({
      to: [msg.content.from.toString()],
      toChannel: 1383378250,
      eventType: "138311608800106203",
      content: msg.content
    });
    var url ='https://trialbot-api.line.me/v1/events';
    var opts = {
        host: 'trialbot-api.line.me',
        path: '/v1/events',
        headers: {
            "Content-type": "application/json; charset=UTF-8",
            "X-Line-ChannelID": "【Channel ID】",
            "X-Line-ChannelSecret": "【Channel Secret】",
            "X-Line-Trusted-User-With-ACL": "【MID】"
        },
        method: 'POST'
    };
    var req = https.request(opts, function(res){
        res.on('data', function (chunk) {
            console.log(res.statusCode + chunk.toString());
        });
        req.on('error', function(err) {
          console.log('ERROR: ' + err.message);
        });
    });
    req.write(data);
    req.end();
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ただその際に、【Channel ID】と【Channel Secret】と【MID】は独自の値を設定する必要があるので「&lt;a href="https://developers.line.me/channels/"&gt;Line developers&lt;/a&gt;」で取得した自分の値と置き換えてください。&lt;br&gt;
&lt;img alt="06.png" src="https://qiita-image-store.s3.amazonaws.com/0/82090/87c308e1-2ed4-31fd-d45f-d50d9c83ad10.png" /&gt;&lt;/p&gt;

&lt;p&gt;コピペが完了したら「Save」ボタンで保存して完了です。&lt;/p&gt;

&lt;p&gt;え？それじゃ何をしてるのかわからないって？いいんです！まずは完成させることが大事なんです！&lt;br&gt;
ひとまず何も考えずにコピペしましょう！&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h1 id="トーク"&gt;トーク&lt;/h1&gt;

&lt;p&gt;それではいよいよ会話です。ProudCloudに話しかけてみます。&lt;br&gt;
&lt;img alt="08.png" src="https://qiita-image-store.s3.amazonaws.com/0/82090/48bb2b15-2bb9-f322-e475-62c875efc3bb.png" /&gt;&lt;/p&gt;

&lt;p&gt;同じ言葉を返してくれます。いわゆる「オウム返し」というやつです。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h1 id="おわりに"&gt;おわりに&lt;/h1&gt;

&lt;p&gt;今回は「とにかく動かす」ことを目的に作りました。&lt;br&gt;
具体的な処理について説明すると長くなってしまうので、今回はここまでにしたいと思います。&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>13本の薬箱講座&amp;アロマタッチ</title>
    <link rel="alternate" href="http://blog.url.com/2016/08/05/kusuribako-kouza.html"/>
    <id>http://blog.url.com/2016/08/05/kusuribako-kouza.html</id>
    <published>2016-08-05T09:00:00+09:00</published>
    <updated>2016-08-08T14:26:54+09:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;h1 id="講座を開催しました！"&gt;講座を開催しました！&lt;/h1&gt;

&lt;hr&gt;

&lt;p&gt;7月も薬箱講座を開催しました！＠プラウディットオフィス&lt;br&gt;
今回はお昼の部、夜の部と同日２回に渡り開催しました！&lt;/p&gt;

&lt;p&gt;お昼の部では８名の方にご参加頂き、とても賑やかな講座になりましたよ〜！&lt;/p&gt;

&lt;p&gt;&lt;img alt="薬箱講座" src="/images/./2016/0805_kusuribako0727/0727kusuribako_1.jpg" /&gt;&lt;/p&gt;

&lt;p&gt;今回の講座もみなさんエッセンシャルオイルの世界に魅了され有意義な時間を&lt;br&gt;
過ごしていただけたようです！&lt;/p&gt;

&lt;p&gt;&lt;img alt="薬箱講座" src="/images/./2016/0805_kusuribako0727/0727kusuribako_2.jpg" /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img alt="薬箱講座" src="/images/./2016/0805_kusuribako0727/0727kusuribako_3.jpg" /&gt;&lt;br&gt;
基本の13本のオイルの他にも色々なオイルの香りを試すこともできますよ〜。&lt;/p&gt;

&lt;p&gt;そして、今回は薬箱講座とは別にアロマタッチテクニックの施術も行いました！&lt;br&gt;
＠プラウディットオフィス&lt;/p&gt;

&lt;h1 id="アロマタッチテクニックとは"&gt;アロマタッチテクニックとは&lt;/h1&gt;

&lt;hr&gt;

&lt;p&gt;doTERRA社の8種類のエッセンシャルオイルを使い、背中や足に直接エッセンシャルオイルを塗布して行う独自の施術です。&lt;/p&gt;

&lt;p&gt;&lt;img alt="薬箱講座" src="/images/./2016/0805_kusuribako0727/0727kusuribako_4.jpg" /&gt;&lt;/p&gt;

&lt;p&gt;異なる特性を持った高品質のオイルを順番に使い、&lt;br&gt;
ハンドテクニックによって体になじませていくことによって、脊髄神経に作用し、&lt;br&gt;
体の組織をリラックスさせ、ストレスの緩和、免疫力の向上、&lt;br&gt;
ホルモンバランスや自律神経の調整など心身の不調の回復をサポートします。&lt;/p&gt;

&lt;p&gt;エッセンシャルオイルの優しい香りに包まれながら心身ともにリラックスし、&lt;br&gt;
心地よい時間を過ごすことができます。&lt;br&gt;
強く力を加えるようなマッサージではないのに、体がとーっても軽く&lt;br&gt;
なるんです。&lt;br&gt;
そして、施術中気がつくと意識がなくなっていることが多々(笑)&lt;/p&gt;

&lt;p&gt;夏バテで体がスッキリしない、癒されたい、そんな方は&lt;br&gt;
是非一度アロマタッチを受けてみてくださいね〜！&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.proudit.jp/"&gt;お問い合わせはこちら！&lt;/a&gt;&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>goofysを使ってAmazon LinuxにS3をマウントする。</title>
    <link rel="alternate" href="http://blog.url.com/2016/08/01/use-the-goofys-to-mount-the-s3-to-amazon-linux.html"/>
    <id>http://blog.url.com/2016/08/01/use-the-goofys-to-mount-the-s3-to-amazon-linux.html</id>
    <published>2016-08-01T09:00:00+09:00</published>
    <updated>2016-08-01T15:54:16+09:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;h1 id="はじめに"&gt;はじめに&lt;/h1&gt;

&lt;p&gt;AWSを利用していて、S3をサーバーマウントする技術として&lt;code&gt;s3fs&lt;/code&gt;が有名だと思います。&lt;br&gt;
ですが、&lt;strong&gt;s3fsは遅い&lt;/strong&gt;と感じる人は少なくないかと思います。&lt;br&gt;
そこで他に何かないかなと思って調べたところ、&lt;strong&gt;&lt;a href="https://github.com/kahing/goofys"&gt;goofys&lt;/a&gt;&lt;/strong&gt;というのがあるみたいです。&lt;/p&gt;

&lt;p&gt;goofysのREADMEに、以下のBenchmarkが載っていました。&lt;/p&gt;

&lt;p&gt;&lt;img alt="goofys-benchmark" src="https://github.com/kahing/goofys/blob/master/bench/bench.png?raw=true" /&gt;&lt;/p&gt;

&lt;p&gt;ということで、とりあえず&lt;code&gt;goofys&lt;/code&gt;を使ってS3をマウントしたいと思います。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h1 id="goとfuseのインストール"&gt;goとfuseのインストール&lt;/h1&gt;

&lt;p&gt;まず、goofysを利用するにあたり、goとfuseが必要となるためパッケージをインストールします。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ sudo yum install golang fuse
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;golang&lt;/em&gt;をインストールする際に依存関係がたくさんあるため&lt;em&gt;yum&lt;/em&gt;で一気にインストールしてしまいましょう。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h1 id="aws-cliの設定"&gt;AWS CLIの設定&lt;/h1&gt;

&lt;p&gt;&lt;em&gt;aws cli&lt;/em&gt;環境を設定します。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ aws configure
AWS Access Key ID [None]: ********************
AWS Secret Access Key [None]: ****************************************
Default region name [None]: ap-northeast-1
Default output format [None]:
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h1 id="バケットの作成"&gt;バケットの作成&lt;/h1&gt;

&lt;p&gt;&lt;em&gt;aws cli&lt;/em&gt;環境の設定ができたらマウントするためのバケットを作成します。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ aws s3 mb s3://kohei-goofys
make_bucket: s3://kohei-goofys/
&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ aws s3 ls s3://kohei-goofys
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;作成したばかりだとバケットには何も無いので&lt;code&gt;aws s3 ls&lt;/code&gt;しても戻り値はありません。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h1 id="goofysインストール"&gt;goofysインストール&lt;/h1&gt;

&lt;p&gt;まず、GOPATHを設定します。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ export GOPATH=$HOME/go
$ echo $GOPATH
/home/ec2-user/go
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;今回は&lt;em&gt;ec2-user&lt;/em&gt;のホームディレクトリにインストールするようにしています。&lt;br&gt;
設定ができたらインストールです。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ go get github.com/kahing/goofys
$ go install github.com/kahing/goofys
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;*getもinstallもプロンプトが戻ってくるまでに若干時間がかかる可能性があります。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h1 id="s3マウント"&gt;S3マウント&lt;/h1&gt;

&lt;p&gt;インストールができたらいよいよマウントです。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ mkdir ~/mount-goofys
&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ ./go/bin/goofys kohei-goofys ~/mount-goofys
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;プロンプトが帰ってきたら完了です。&lt;br&gt;
マウントに成功してもしなくても、何も戻ってこないので実際に確認してみます。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h1 id="確認"&gt;確認&lt;/h1&gt;

&lt;p&gt;確認ポイントは幾つかあります。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ ps auxf |grep goofys
ec2-user  3030  0.0  0.4 110472  2144 pts/0    S+   03:08   0:00              \_ grep --color=auto goofys
ec2-user  3022  0.3  2.7 197876 13668 ?        Ssl  03:08   0:00 /home/ec2-user/go/bin/goofys kohei-goofys /home/ec2-user/mount-goofys
&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ sudo grep goofys /var/log/messages
Jul  1 03:08:50 ip-172-31-3-125 /home/ec2-user/go/bin/goofys[3022]: s3.ERROR code=incorrect region, the bucket is not in 'us-west-2' region msg=301 request=#012
Jul  1 03:08:51 ip-172-31-3-125 /home/ec2-user/go/bin/goofys[3022]: s3.INFO Switching from region 'us-west-2' to 'ap-northeast-1'
Jul  1 03:08:51 ip-172-31-3-125 /home/ec2-user/go/bin/goofys[3022]: main.INFO File system has been successfully mounted.
&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ df -h
ファイルシス   サイズ  使用  残り 使用% マウント位置
/dev/xvda1       7.8G  1.6G  6.1G   21% /
devtmpfs         238M   56K  238M    1% /dev
tmpfs            246M     0  246M    0% /dev/shm
kohei-goofys     1.0P     0  1.0P    0% /home/ec2-user/mount-goofys
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;無事マウントができたようです。&lt;br&gt;
では、ファイルの作成を行います。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ touch ~/mount-goofys/test
$ ls ~/mount-goofys/
test
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;作成できたら&lt;code&gt;aws s3&lt;/code&gt;コマンドでバケット内を直接確認してみます。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ aws s3 ls s3://kohei-goofys
2016-07-01 03:14:44          0 test
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;先ほど作成されたコマンドがこちらからでも確認できました。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h1 id="自動マウント設定"&gt;自動マウント設定&lt;/h1&gt;

&lt;p&gt;マウントはできるようになりましたが、毎回手動でマウントするのは大変です。&lt;br&gt;
なので&lt;em&gt;/etc/fstab&lt;/em&gt;にサーバー起動時にマウントされるように設定します。&lt;/p&gt;

&lt;p&gt;ただ、ここでポイントは&lt;strong&gt;サーバー起動時は&lt;em&gt;root&lt;/em&gt;&lt;/strong&gt;で処理が実行されます。&lt;br&gt;
ということは&lt;em&gt;aws cli&lt;/em&gt;の設定もrootで行う必要があります。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ sudo aws configure
AWS Access Key ID [None]: ********************
AWS Secret Access Key [None]: ****************************************
Default region name [None]: ap-northeast-1
Default output format [None]:
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;設定ができたら&lt;em&gt;fstab&lt;/em&gt;を修正します。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ sudo vi /etc/fstab
$ cat /etc/fstab
#
LABEL=/     /           ext4    defaults,noatime  1   1
tmpfs       /dev/shm    tmpfs   defaults        0   0
devpts      /dev/pts    devpts  gid=5,mode=620  0   0
sysfs       /sys        sysfs   defaults        0   0
proc        /proc       proc    defaults        0   0
/home/ec2-user/go/bin/goofys#kohei-goofys /home/ec2-user/mount-goofys fuse _netdev,allow_other,--file-mode=0666,--uid=500,--gid=500 0 0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ここでとても重要なのがオプションで&lt;em&gt;allow_other&lt;/em&gt;が指定されていることです。&lt;br&gt;
このオプションがないとroot以外のユーザーからは見えなくなってしまいます。&lt;br&gt;
また、&lt;em&gt;--file-mode&lt;/em&gt;と&lt;em&gt;--uid&lt;/em&gt;、&lt;em&gt;--gid&lt;/em&gt;はファイルやディレクトリが作成された際のデフォルト権限/所有者の設定になります。&lt;/p&gt;

&lt;p&gt;今回の場合は&lt;em&gt;ec2-user&lt;/em&gt;がUID、GIDともに500でした。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ id
uid=500(ec2-user) gid=500(ec2-user) groups=500(ec2-user),10(wheel)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;修正が完了したら自動マウントを確認します。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ sudo mount -a
&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ df -h
ファイルシス   サイズ  使用  残り 使用% マウント位置
/dev/xvda1       7.8G  1.6G  6.1G   21% /
devtmpfs         238M   56K  238M    1% /dev
tmpfs            246M     0  246M    0% /dev/shm
kohei-goofys     1.0P     0  1.0P    0% /home/ec2-user/mount-goofys
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ちゃんとマウントができたのが確認できます。&lt;br&gt;
もし、ここでマウントが見えなかったら&lt;code&gt;sudo df -h&lt;/code&gt;を試してみてください。&lt;br&gt;
それで見える場合は権限周りがうまくできてない可能性があります。&lt;/p&gt;

&lt;table&gt;&lt;thead&gt;
&lt;tr&gt;
&lt;th style="text-align: left"&gt;オプション&lt;/th&gt;
&lt;th style="text-align: left"&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td style="text-align: left"&gt;_netdev&lt;/td&gt;
&lt;td style="text-align: left"&gt;ネットワークが有効になるまでマウントを待つためのオプション。&lt;br&gt;ネットワーク経由のデバイスを起動時にマウントさせたい場合などに指定する。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left"&gt;allow_other&lt;/td&gt;
&lt;td style="text-align: left"&gt;他のユーザーでも利用できるようにする。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left"&gt;--file-mode&lt;/td&gt;
&lt;td style="text-align: left"&gt;マウントする際のファイル権限を設定する。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left"&gt;--uid&lt;/td&gt;
&lt;td style="text-align: left"&gt;マウントするユーザーIDを指定する。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left"&gt;--gid&lt;/td&gt;
&lt;td style="text-align: left"&gt;マウントするグループIDを指定する。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

&lt;p&gt;また、上記は今回使ったオプションの説明となるので参考にしてもらえればと思います。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h1 id="おわりに"&gt;おわりに&lt;/h1&gt;

&lt;p&gt;とりあえず&lt;strong&gt;&lt;em&gt;goofys&lt;/em&gt;&lt;/strong&gt;がどんな感じかを試したくて行いましたが、導入はとても簡単でした。&lt;br&gt;
ただ、自動マウント設定の際のアクセス権限周りの挙動を確認するのに少々時間かかったかなという感じです。&lt;br&gt;
GitHubの&lt;a href="https://github.com/kahing/goofys#benchmark"&gt;Benchmark&lt;/a&gt;ではs3fsよりかなり優秀な感じですが、実際比較はまだしてないのでそっちの方も検証できたらなと思っています。&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>AWS初心者でも簡単にAWSでWordPressが使えます！</title>
    <link rel="alternate" href="http://blog.url.com/2016/07/28/AWS-WordPress.html"/>
    <id>http://blog.url.com/2016/07/28/AWS-WordPress.html</id>
    <published>2016-07-28T09:00:00+09:00</published>
    <updated>2016-07-29T12:45:37+09:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;h1 id="はじめに"&gt;はじめに&lt;/h1&gt;

&lt;hr&gt;

&lt;p&gt;AWS上でWordPressを使ってみたいなとふと思い立ちました。勉強もかねて。&lt;br&gt;
とは言え、やっぱり自分でサーバにインストールするのは...&lt;br&gt;
簡単に素人でもできる方法はないかなと、調べてみると。&lt;br&gt;
既にWordPressがインストールされたAMIがあるようです！&lt;/p&gt;

&lt;p&gt;インストールする必要がないので、一気にハードルは下がりますね！&lt;br&gt;
AWSのページにきちんと設定手順もあります！&lt;/p&gt;

&lt;h1 id="手順は？"&gt;手順は？&lt;/h1&gt;

&lt;hr&gt;

&lt;p&gt;既にアカウントがある場合は、そのままサインアップ。&lt;br&gt;
まだアカウントを持っていない方はアカウント作成をします。&lt;br&gt;
12ヶ月間無料利用枠を利用できるお試し枠を利用することができます。&lt;br&gt;
もちろん無料利用枠内で、WprdPressインストール済みのAMIが使えます。&lt;/p&gt;

&lt;p&gt;サインアップすると、画面上にサービスアイコンがずらり。&lt;br&gt;
その一番左上AmazonEC2のインスタンスを起動し、インスタンスの作成へ。&lt;/p&gt;

&lt;p&gt;&lt;img alt="AWS_WordPress" src="/images/./2016/0728_WordPress/aws_wp_01.png" /&gt;&lt;/p&gt;

&lt;p&gt;AWSMarketplaceへ移動し、WordPressで検索をかけると、&lt;br&gt;
ずらりと出てきます。&lt;br&gt;
この中からWordPress powered by BitNami (HVM) を選択します。&lt;br&gt;
&lt;img alt="AWS_WordPress" src="/images/./2016/0728_WordPress/aws_wp_02.png" /&gt;&lt;br&gt;
&lt;img alt="AWS_WordPress" src="/images/./2016/0728_WordPress/aws_wp_03.png" /&gt;&lt;/p&gt;

&lt;p&gt;次はインスタンスタイプの選択です。&lt;br&gt;
無料利用枠を利用している方は、t2.maicroを選択。&lt;br&gt;
今回利用しているアカウントは無料利用枠対象期間は過ぎてしまっているので、一番小さいnanoで。&lt;/p&gt;

&lt;p&gt;&lt;img alt="AWS_WordPress" src="/images/./2016/0728_WordPress/aws_wp_04.png" /&gt;&lt;/p&gt;

&lt;p&gt;インスタンスの詳細設定。&lt;br&gt;
特に手を加えることなくそのままそのまま進みます。&lt;/p&gt;

&lt;p&gt;&lt;img alt="AWS_WordPress" src="/images/./2016/0728_WordPress/aws_wp_05.png" /&gt;&lt;/p&gt;

&lt;p&gt;次は、ストレージの設定。&lt;/p&gt;

&lt;p&gt;&lt;img alt="AWS_WordPress" src="/images/./2016/0728_WordPress/aws_wp_06.png" /&gt;&lt;/p&gt;

&lt;p&gt;インスタンスのタグ付け。&lt;br&gt;
インスタンスの名前の設定をします。&lt;br&gt;
値の部分は任意のものを入力。今回はwordpressと入力。確認と作成をポチッと。&lt;/p&gt;

&lt;p&gt;&lt;img alt="AWS_WordPress" src="/images/./2016/0728_WordPress/aws_wp_07.png" /&gt;&lt;/p&gt;

&lt;p&gt;インスタンス作成の確認を行い、作成。&lt;/p&gt;

&lt;p&gt;&lt;img alt="AWS_WordPress" src="/images/./2016/0728_WordPress/aws_wp_08.png" /&gt;&lt;/p&gt;

&lt;p&gt;キーペア設定画面が出てきます。&lt;br&gt;
SSHログインをする際に必要になる設定です。ここではキーペアなしで続行をして、インスタンスの作成へ。&lt;/p&gt;

&lt;p&gt;&lt;img alt="AWS_WordPress" src="/images/./2016/0728_WordPress/aws_wp_09.png" /&gt;&lt;/p&gt;

&lt;p&gt;インスタンスの作成をしています。&lt;/p&gt;

&lt;p&gt;&lt;img alt="AWS_WordPress" src="/images/./2016/0728_WordPress/aws_wp_10.png" /&gt;&lt;/p&gt;

&lt;p&gt;無事、インスタンスの作成が完了しました。&lt;/p&gt;

&lt;p&gt;&lt;img alt="AWS_WordPress" src="/images/./2016/0728_WordPress/aws_wp_11.png" /&gt;&lt;/p&gt;

&lt;p&gt;インスタンスが作成できたら、実際にサーバにインストールされている&lt;br&gt;
サイトの確認をしてみます。&lt;br&gt;
作成したインスタンスの情報から、パブリックIPを参照し、サイトにアクセスしてみます。&lt;/p&gt;

&lt;p&gt;サイトのカスタマイズをするため、まずは管理画面へアクセスします。&lt;/p&gt;

&lt;p&gt;管理画面にアクセスするためのパスワードを確認します。&lt;br&gt;
アクション＞インスタンスの設定＞システムログの取得&lt;br&gt;
&lt;img alt="AWS_WordPress" src="/images/./2016/0728_WordPress/aws_wp_12.png" /&gt;&lt;/p&gt;

&lt;p&gt;システムログのウィンドウが出てくるので、下の方までスクロール。&lt;br&gt;
ハッシュマークで囲まれているので見つけやすいです。&lt;/p&gt;

&lt;p&gt;&lt;img alt="AWS_WordPress" src="/images/./2016/0728_WordPress/aws_wp_13.png" /&gt;&lt;/p&gt;

&lt;p&gt;管理画面(URL:パブリックIP/admin  ex.54.192.32.144/admin)にアクセスし、username:user/PW:システムログで取得したもの&lt;/p&gt;

&lt;p&gt;を入力するとログインできます！&lt;/p&gt;

&lt;p&gt;&lt;img alt="AWS_WordPress" src="/images/./2016/0728_WordPress/aws_wp_14.png" /&gt;&lt;/p&gt;

&lt;p&gt;デフォルトの設定は英語になっているので、管理画面にログイン後&lt;br&gt;
Settings＞Site Languageを日本語に変更＞Save ChangesすればOKです。&lt;/p&gt;

&lt;h1 id="おわりに"&gt;おわりに&lt;/h1&gt;

&lt;hr&gt;

&lt;p&gt;参考にした手順通り、そのままでした。簡単でした。&lt;br&gt;
AWSを使ったことがないって人でも大丈夫！&lt;br&gt;
以前、サクラのレンタルサーバでwordpressを利用したことがありますが、その時の設定よりも簡単でした。&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws.amazon.com/jp/getting-started/launch-a-wordpress-website/"&gt;参考サイト：WordPress Webサイトの起動&lt;/a&gt;&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>13本の薬箱講座＆体験談</title>
    <link rel="alternate" href="http://blog.url.com/2016/07/26/kusuribako-syoukai.html"/>
    <id>http://blog.url.com/2016/07/26/kusuribako-syoukai.html</id>
    <published>2016-07-26T09:00:00+09:00</published>
    <updated>2016-07-26T12:25:59+09:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;h1 id="植物エッセンスの薬箱®13本講座　13本のオイルはどんなオイル？"&gt;植物エッセンスの薬箱®13本講座　13本のオイルはどんなオイル？&lt;/h1&gt;

&lt;hr&gt;

&lt;p&gt;先日ご紹介した13本の薬箱講座、内容についてちらっとご紹介。&lt;/p&gt;

&lt;p&gt;講座で使用する13本のエッセンシャルオイルは・・・&lt;/p&gt;

&lt;p&gt;&lt;img alt="薬箱講座" src="/images/./2016/0726_kusuribako/kusuribako_0726_1.jpg" /&gt;&lt;/p&gt;

&lt;h2 id="★シングルオイル"&gt;★シングルオイル&lt;/h2&gt;

&lt;p&gt;ラベンダー&lt;br&gt;
レモン&lt;br&gt;
ペパーミント&lt;br&gt;
ティートゥリー&lt;br&gt;
オレガノ&lt;br&gt;
フランキンセンス&lt;br&gt;
ワイルドオレンジ&lt;/p&gt;

&lt;h2 id="★ブレンドオイル"&gt;★ブレンドオイル&lt;/h2&gt;

&lt;p&gt;イージーエアー&lt;br&gt;
オンガード&lt;br&gt;
ディープブルー&lt;br&gt;
ゼンジェスト&lt;br&gt;
アースリズム&lt;br&gt;
アロマタッチ&lt;/p&gt;

&lt;p&gt;どのオイルも手軽に使えることができ、色々な場面で使用することができるので使用頻度がかなり高いオイルばかり。&lt;/p&gt;

&lt;p&gt;香る、飲用、塗布、使い方も色々！&lt;/p&gt;

&lt;p&gt;オイルの特性から、具体的な使い方まで盛り沢山の内容です。講座を受けたらすぐにお家で実践してみたくなります！&lt;/p&gt;

&lt;h1 id="講座を受けて早速実践"&gt;講座を受けて早速実践&lt;/h1&gt;

&lt;hr&gt;

&lt;p&gt;私が講座を受けて早速実践したのは、子供の汗疹対策にラベンダーとティートゥリー。&lt;/p&gt;

&lt;p&gt;小さな子供なので、ココナッツオイルで希釈して、汗疹でプツプツしている部分に毎日塗り続けました。&lt;/p&gt;

&lt;p&gt;すると、一ヶ月ほどで汗疹は消失。&lt;/p&gt;

&lt;p&gt;今でも予防のために利用しています。&lt;br&gt;
子供の肌は繊細なので汗疹対策に保湿は大事。&lt;br&gt;
去年、汗疹で皮膚科を受診した際に、保湿を目的としてヒロドイドをもらって&lt;br&gt;
塗っていました。&lt;br&gt;
今は、シアバターとみつろうで、保湿クリームを作りそこにラベンダーとティートゥリー、プラスでフランキンセンスを入れたものを塗り塗りしています！&lt;/p&gt;

&lt;h1 id="ちょっぴり体験談"&gt;ちょっぴり体験談&lt;/h1&gt;

&lt;hr&gt;

&lt;p&gt;13本のエッセンシャルオイルはどのオイルも本当に活躍の場が多いのですが、&lt;br&gt;
中でも利用頻度が高いものの一つはペパーミント！&lt;br&gt;
手の平に一滴オイルを垂らし、こめかみや痛みを感じるところに塗布しています。&lt;br&gt;
スーッとスッキリして次第に痛みも無くなっていきます★&lt;/p&gt;

&lt;p&gt;&lt;img alt="薬箱講座" src="/images/./2016/0726_kusuribako/peppermint.png" /&gt;&lt;/p&gt;

&lt;p&gt;以前から偏頭痛もちで、頭痛がある時は決まってロキソニンを服用していました。&lt;br&gt;
ただ、ロキソニンの服用は消化器系に副作用が伴います。&lt;br&gt;
病院でロキソニンが処方されると必ずあわせて服用するようにと、胃を守るための胃薬も処方されます。&lt;/p&gt;

&lt;p&gt;これに加えて厚生労働省から、腸閉塞などの重大な副作用のリスクがあると呼びかけがありました。&lt;/p&gt;

&lt;p&gt;薬を全く飲まない、というわけではありませんが、&lt;br&gt;
薬の代替手段として、&lt;br&gt;
エッセンシャルオイルの様に副作用のない自然由来のものを&lt;br&gt;
生活に取り入れることができるといいな、と思います。&lt;/p&gt;

&lt;p&gt;エッセンシャルオイルの活用方法は無限大！&lt;br&gt;
今後お家のお掃除にもオイルを活用していきたいなと、実践中です。&lt;/p&gt;

&lt;p&gt;※上記の使い方は、CPTG(認定純粋セラピー等級)エッセンシャルオイル純度100%のドテラのオイルを利用した場合の一例です。&lt;/p&gt;

&lt;p&gt;&lt;a href="http://www.doterraeveryday.jp/training/cptg/"&gt;CPTGとは&lt;/a&gt;&lt;/p&gt;
</content>
  </entry>
</feed>
