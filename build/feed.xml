<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Blog Name</title>
  <subtitle>Blog subtitle</subtitle>
  <id>http://blog.url.com/</id>
  <link href="http://blog.url.com/"/>
  <link href="http://blog.url.com/feed.xml" rel="self"/>
  <updated>2016-08-01T09:00:00+09:00</updated>
  <author>
    <name>Blog Author</name>
  </author>
  <entry>
    <title>goofysを使ってAmazon LinuxにS3をマウントする。</title>
    <link rel="alternate" href="http://blog.url.com/2016/08/01/use-the-goofys-to-mount-the-s3-to-amazon-linux.html"/>
    <id>http://blog.url.com/2016/08/01/use-the-goofys-to-mount-the-s3-to-amazon-linux.html</id>
    <published>2016-08-01T09:00:00+09:00</published>
    <updated>2016-08-01T11:41:11+09:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;h1 id="はじめに"&gt;はじめに&lt;/h1&gt;

&lt;p&gt;AWSを利用していて、S3をサーバーマウントする技術として&lt;code&gt;s3fs&lt;/code&gt;が有名だと思います。&lt;br&gt;
ですが、&lt;strong&gt;s3fsは遅い&lt;/strong&gt;と感じる人は少なくないかと思います。&lt;br&gt;
そこで他に何かないかなと思って調べたところ、&lt;strong&gt;&lt;a href="https://github.com/kahing/goofys"&gt;goofys&lt;/a&gt;&lt;/strong&gt;というのがあるみたいです。&lt;/p&gt;

&lt;p&gt;goofysのREADMEに、以下のBenchmarkが載っていました。&lt;/p&gt;

&lt;p&gt;&lt;img alt="goofys-benchmark" src="https://github.com/kahing/goofys/blob/master/bench/bench.png?raw=true" /&gt;&lt;/p&gt;

&lt;p&gt;ということで、とりあえず&lt;code&gt;goofys&lt;/code&gt;を使ってS3をマウントしたいと思います。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h1 id="goとfuseのインストール"&gt;goとfuseのインストール&lt;/h1&gt;

&lt;p&gt;まず、goofysを利用するにあたり、goとfuseが必要となるためパッケージをインストールします。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ sudo yum install golang fuse
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;golang&lt;/em&gt;をインストールする際に依存関係がたくさんあるため&lt;em&gt;yum&lt;/em&gt;で一気にインストールしてしまいましょう。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h1 id="aws-cliの設定"&gt;AWS CLIの設定&lt;/h1&gt;

&lt;p&gt;&lt;em&gt;aws cli&lt;/em&gt;環境を設定します。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ aws configure
AWS Access Key ID [None]: ********************
AWS Secret Access Key [None]: ****************************************
Default region name [None]: ap-northeast-1
Default output format [None]:
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h1 id="バケットの作成"&gt;バケットの作成&lt;/h1&gt;

&lt;p&gt;&lt;em&gt;aws cli&lt;/em&gt;環境の設定ができたらマウントするためのバケットを作成します。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ aws s3 mb s3://kohei-goofys
make_bucket: s3://kohei-goofys/
&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ aws s3 ls s3://kohei-goofys
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;作成したばかりだとバケットには何も無いので&lt;code&gt;aws s3 ls&lt;/code&gt;しても戻り値はありません。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h1 id="goofysインストール"&gt;goofysインストール&lt;/h1&gt;

&lt;p&gt;まず、GOPATHを設定します。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ export GOPATH=$HOME/go
$ echo $GOPATH
/home/ec2-user/go
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;今回は&lt;em&gt;ec2-user&lt;/em&gt;のホームディレクトリにインストールするようにしています。&lt;br&gt;
設定ができたらインストールです。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ go get github.com/kahing/goofys
$ go install github.com/kahing/goofys
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;*getもinstallもプロンプトが戻ってくるまでに若干時間がかかる可能性があります。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h1 id="s3マウント"&gt;S3マウント&lt;/h1&gt;

&lt;p&gt;インストールができたらいよいよマウントです。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ mkdir ~/mount-goofys
&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ ./go/bin/goofys kohei-goofys ~/mount-goofys
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;プロンプトが帰ってきたら完了です。&lt;br&gt;
マウントに成功してもしなくても、何も戻ってこないので実際に確認してみます。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h1 id="確認"&gt;確認&lt;/h1&gt;

&lt;p&gt;確認ポイントは幾つかあります。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ ps auxf |grep goofys
ec2-user  3030  0.0  0.4 110472  2144 pts/0    S+   03:08   0:00              \_ grep --color=auto goofys
ec2-user  3022  0.3  2.7 197876 13668 ?        Ssl  03:08   0:00 /home/ec2-user/go/bin/goofys kohei-goofys /home/ec2-user/mount-goofys
&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ sudo grep goofys /var/log/messages
Jul  1 03:08:50 ip-172-31-3-125 /home/ec2-user/go/bin/goofys[3022]: s3.ERROR code=incorrect region, the bucket is not in 'us-west-2' region msg=301 request=#012
Jul  1 03:08:51 ip-172-31-3-125 /home/ec2-user/go/bin/goofys[3022]: s3.INFO Switching from region 'us-west-2' to 'ap-northeast-1'
Jul  1 03:08:51 ip-172-31-3-125 /home/ec2-user/go/bin/goofys[3022]: main.INFO File system has been successfully mounted.
&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ df -h
ファイルシス   サイズ  使用  残り 使用% マウント位置
/dev/xvda1       7.8G  1.6G  6.1G   21% /
devtmpfs         238M   56K  238M    1% /dev
tmpfs            246M     0  246M    0% /dev/shm
kohei-goofys     1.0P     0  1.0P    0% /home/ec2-user/mount-goofys
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;無事マウントができたようです。&lt;br&gt;
では、ファイルの作成を行います。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ touch ~/mount-goofys/test
$ ls ~/mount-goofys/
test
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;作成できたら&lt;code&gt;aws s3&lt;/code&gt;コマンドでバケット内を直接確認してみます。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ aws s3 ls s3://kohei-goofys
2016-07-01 03:14:44          0 test
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;先ほど作成されたコマンドがこちらからでも確認できました。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h1 id="自動マウント設定"&gt;自動マウント設定&lt;/h1&gt;

&lt;p&gt;マウントはできるようになりましたが、毎回手動でマウントするのは大変です。&lt;br&gt;
なので&lt;em&gt;/etc/fstab&lt;/em&gt;にサーバー起動時にマウントされるように設定します。&lt;/p&gt;

&lt;p&gt;ただ、ここでポイントは&lt;strong&gt;サーバー起動時は&lt;em&gt;root&lt;/em&gt;&lt;/strong&gt;で処理が実行されます。&lt;br&gt;
ということは&lt;em&gt;aws cli&lt;/em&gt;の設定もrootで行う必要があります。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ sudo aws configure
AWS Access Key ID [None]: ********************
AWS Secret Access Key [None]: ****************************************
Default region name [None]: ap-northeast-1
Default output format [None]:
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;設定ができたら&lt;em&gt;fstab&lt;/em&gt;を修正します。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ sudo vi /etc/fstab
$ cat /etc/fstab
#
LABEL=/     /           ext4    defaults,noatime  1   1
tmpfs       /dev/shm    tmpfs   defaults        0   0
devpts      /dev/pts    devpts  gid=5,mode=620  0   0
sysfs       /sys        sysfs   defaults        0   0
proc        /proc       proc    defaults        0   0
/home/ec2-user/go/bin/goofys#kohei-goofys /home/ec2-user/mount-goofys fuse _netdev,allow_other,--file-mode=0666,--uid=500,--gid=500 0 0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ここでとても重要なのがオプションで&lt;em&gt;allow_other&lt;/em&gt;が指定されていることです。&lt;br&gt;
このオプションがないとroot以外のユーザーからは見えなくなってしまいます。&lt;br&gt;
また、&lt;em&gt;--file-mode&lt;/em&gt;と&lt;em&gt;--uid&lt;/em&gt;、&lt;em&gt;--gid&lt;/em&gt;はファイルやディレクトリが作成された際のデフォルト権限/所有者の設定になります。&lt;/p&gt;

&lt;p&gt;今回の場合は&lt;em&gt;ec2-user&lt;/em&gt;がUID、GIDともに500でした。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ id
uid=500(ec2-user) gid=500(ec2-user) groups=500(ec2-user),10(wheel)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;修正が完了したら自動マウントを確認します。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ sudo mount -a
&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ df -h
ファイルシス   サイズ  使用  残り 使用% マウント位置
/dev/xvda1       7.8G  1.6G  6.1G   21% /
devtmpfs         238M   56K  238M    1% /dev
tmpfs            246M     0  246M    0% /dev/shm
kohei-goofys     1.0P     0  1.0P    0% /home/ec2-user/mount-goofys
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ちゃんとマウントができたのが確認できます。&lt;br&gt;
もし、ここでマウントが見えなかったら&lt;code&gt;sudo df -h&lt;/code&gt;を試してみてください。&lt;br&gt;
それで見える場合は権限周りがうまくできてない可能性があります。&lt;/p&gt;

&lt;table&gt;&lt;thead&gt;
&lt;tr&gt;
&lt;th style="text-align: left"&gt;オプション&lt;/th&gt;
&lt;th style="text-align: left"&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td style="text-align: left"&gt;_netdev&lt;/td&gt;
&lt;td style="text-align: left"&gt;ネットワークが有効になるまでマウントを待つためのオプション。&lt;br&gt;ネットワーク経由のデバイスを起動時にマウントさせたい場合などに指定する。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left"&gt;allow_other&lt;/td&gt;
&lt;td style="text-align: left"&gt;他のユーザーでも利用できるようにする。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left"&gt;--file-mode&lt;/td&gt;
&lt;td style="text-align: left"&gt;マウントする際のファイル権限を設定する。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left"&gt;--uid&lt;/td&gt;
&lt;td style="text-align: left"&gt;マウントするユーザーIDを指定する。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left"&gt;--gid&lt;/td&gt;
&lt;td style="text-align: left"&gt;マウントするグループIDを指定する。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

&lt;p&gt;また、上記は今回使ったオプションの説明となるので参考にしてもらえればと思います。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h1 id="おわりに"&gt;おわりに&lt;/h1&gt;

&lt;p&gt;とりあえず&lt;strong&gt;&lt;em&gt;goofys&lt;/em&gt;&lt;/strong&gt;がどんな感じかを試したくて行いましたが、導入はとても簡単でした。&lt;br&gt;
ただ、自動マウント設定の際のアクセス権限周りの挙動を確認するのに少々時間かかったかなという感じです。&lt;br&gt;
GitHubの&lt;a href="https://github.com/kahing/goofys#benchmark"&gt;Benchmark&lt;/a&gt;ではs3fsよりかなり優秀な感じですが、実際比較はまだしてないのでそっちの方もできたらなと思っています。&lt;br&gt;
また、実際に利用している方がいましたらそこらへんの情報についてコメントいただけると嬉しいです。&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>AWS初心者でも簡単にAWSでWordPressが使えます！</title>
    <link rel="alternate" href="http://blog.url.com/2016/07/28/AWS-WordPress.html"/>
    <id>http://blog.url.com/2016/07/28/AWS-WordPress.html</id>
    <published>2016-07-28T09:00:00+09:00</published>
    <updated>2016-07-29T12:45:37+09:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;h1 id="はじめに"&gt;はじめに&lt;/h1&gt;

&lt;hr&gt;

&lt;p&gt;AWS上でWordPressを使ってみたいなとふと思い立ちました。勉強もかねて。&lt;br&gt;
とは言え、やっぱり自分でサーバにインストールするのは...&lt;br&gt;
簡単に素人でもできる方法はないかなと、調べてみると。&lt;br&gt;
既にWordPressがインストールされたAMIがあるようです！&lt;/p&gt;

&lt;p&gt;インストールする必要がないので、一気にハードルは下がりますね！&lt;br&gt;
AWSのページにきちんと設定手順もあります！&lt;/p&gt;

&lt;h1 id="手順は？"&gt;手順は？&lt;/h1&gt;

&lt;hr&gt;

&lt;p&gt;既にアカウントがある場合は、そのままサインアップ。&lt;br&gt;
まだアカウントを持っていない方はアカウント作成をします。&lt;br&gt;
12ヶ月間無料利用枠を利用できるお試し枠を利用することができます。&lt;br&gt;
もちろん無料利用枠内で、WprdPressインストール済みのAMIが使えます。&lt;/p&gt;

&lt;p&gt;サインアップすると、画面上にサービスアイコンがずらり。&lt;br&gt;
その一番左上AmazonEC2のインスタンスを起動し、インスタンスの作成へ。&lt;/p&gt;

&lt;p&gt;&lt;img alt="AWS_WordPress" src="/images/./2016/0728_WordPress/aws_wp_01.png" /&gt;&lt;/p&gt;

&lt;p&gt;AWSMarketplaceへ移動し、WordPressで検索をかけると、&lt;br&gt;
ずらりと出てきます。&lt;br&gt;
この中からWordPress powered by BitNami (HVM) を選択します。&lt;br&gt;
&lt;img alt="AWS_WordPress" src="/images/./2016/0728_WordPress/aws_wp_02.png" /&gt;&lt;br&gt;
&lt;img alt="AWS_WordPress" src="/images/./2016/0728_WordPress/aws_wp_03.png" /&gt;&lt;/p&gt;

&lt;p&gt;次はインスタンスタイプの選択です。&lt;br&gt;
無料利用枠を利用している方は、t2.maicroを選択。&lt;br&gt;
今回利用しているアカウントは無料利用枠対象期間は過ぎてしまっているので、一番小さいnanoで。&lt;/p&gt;

&lt;p&gt;&lt;img alt="AWS_WordPress" src="/images/./2016/0728_WordPress/aws_wp_04.png" /&gt;&lt;/p&gt;

&lt;p&gt;インスタンスの詳細設定。&lt;br&gt;
特に手を加えることなくそのままそのまま進みます。&lt;/p&gt;

&lt;p&gt;&lt;img alt="AWS_WordPress" src="/images/./2016/0728_WordPress/aws_wp_05.png" /&gt;&lt;/p&gt;

&lt;p&gt;次は、ストレージの設定。&lt;/p&gt;

&lt;p&gt;&lt;img alt="AWS_WordPress" src="/images/./2016/0728_WordPress/aws_wp_06.png" /&gt;&lt;/p&gt;

&lt;p&gt;インスタンスのタグ付け。&lt;br&gt;
インスタンスの名前の設定をします。&lt;br&gt;
値の部分は任意のものを入力。今回はwordpressと入力。確認と作成をポチッと。&lt;/p&gt;

&lt;p&gt;&lt;img alt="AWS_WordPress" src="/images/./2016/0728_WordPress/aws_wp_07.png" /&gt;&lt;/p&gt;

&lt;p&gt;インスタンス作成の確認を行い、作成。&lt;/p&gt;

&lt;p&gt;&lt;img alt="AWS_WordPress" src="/images/./2016/0728_WordPress/aws_wp_08.png" /&gt;&lt;/p&gt;

&lt;p&gt;キーペア設定画面が出てきます。&lt;br&gt;
SSHログインをする際に必要になる設定です。ここではキーペアなしで続行をして、インスタンスの作成へ。&lt;/p&gt;

&lt;p&gt;&lt;img alt="AWS_WordPress" src="/images/./2016/0728_WordPress/aws_wp_09.png" /&gt;&lt;/p&gt;

&lt;p&gt;インスタンスの作成をしています。&lt;/p&gt;

&lt;p&gt;&lt;img alt="AWS_WordPress" src="/images/./2016/0728_WordPress/aws_wp_10.png" /&gt;&lt;/p&gt;

&lt;p&gt;無事、インスタンスの作成が完了しました。&lt;/p&gt;

&lt;p&gt;&lt;img alt="AWS_WordPress" src="/images/./2016/0728_WordPress/aws_wp_11.png" /&gt;&lt;/p&gt;

&lt;p&gt;インスタンスが作成できたら、実際にサーバにインストールされている&lt;br&gt;
サイトの確認をしてみます。&lt;br&gt;
作成したインスタンスの情報から、パブリックIPを参照し、サイトにアクセスしてみます。&lt;/p&gt;

&lt;p&gt;サイトのカスタマイズをするため、まずは管理画面へアクセスします。&lt;/p&gt;

&lt;p&gt;管理画面にアクセスするためのパスワードを確認します。&lt;br&gt;
アクション＞インスタンスの設定＞システムログの取得&lt;br&gt;
&lt;img alt="AWS_WordPress" src="/images/./2016/0728_WordPress/aws_wp_12.png" /&gt;&lt;/p&gt;

&lt;p&gt;システムログのウィンドウが出てくるので、下の方までスクロール。&lt;br&gt;
ハッシュマークで囲まれているので見つけやすいです。&lt;/p&gt;

&lt;p&gt;&lt;img alt="AWS_WordPress" src="/images/./2016/0728_WordPress/aws_wp_13.png" /&gt;&lt;/p&gt;

&lt;p&gt;管理画面(URL:パブリックIP/admin  ex.54.192.32.144/admin)にアクセスし、username:user/PW:システムログで取得したもの&lt;/p&gt;

&lt;p&gt;を入力するとログインできます！&lt;/p&gt;

&lt;p&gt;&lt;img alt="AWS_WordPress" src="/images/./2016/0728_WordPress/aws_wp_14.png" /&gt;&lt;/p&gt;

&lt;p&gt;デフォルトの設定は英語になっているので、管理画面にログイン後&lt;br&gt;
Settings＞Site Languageを日本語に変更＞Save ChangesすればOKです。&lt;/p&gt;

&lt;h1 id="おわりに"&gt;おわりに&lt;/h1&gt;

&lt;hr&gt;

&lt;p&gt;参考にした手順通り、そのままでした。簡単でした。&lt;br&gt;
AWSを使ったことがないって人でも大丈夫！&lt;br&gt;
以前、サクラのレンタルサーバでwordpressを利用したことがありますが、その時の設定よりも簡単でした。&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws.amazon.com/jp/getting-started/launch-a-wordpress-website/"&gt;参考サイト：WordPress Webサイトの起動&lt;/a&gt;&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>13本の薬箱講座＆体験談</title>
    <link rel="alternate" href="http://blog.url.com/2016/07/26/kusuribako-syoukai.html"/>
    <id>http://blog.url.com/2016/07/26/kusuribako-syoukai.html</id>
    <published>2016-07-26T09:00:00+09:00</published>
    <updated>2016-07-26T12:25:59+09:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;h1 id="植物エッセンスの薬箱®13本講座　13本のオイルはどんなオイル？"&gt;植物エッセンスの薬箱®13本講座　13本のオイルはどんなオイル？&lt;/h1&gt;

&lt;hr&gt;

&lt;p&gt;先日ご紹介した13本の薬箱講座、内容についてちらっとご紹介。&lt;/p&gt;

&lt;p&gt;講座で使用する13本のエッセンシャルオイルは・・・&lt;/p&gt;

&lt;p&gt;&lt;img alt="薬箱講座" src="/images/./2016/0726_kusuribako/kusuribako_0726_1.jpg" /&gt;&lt;/p&gt;

&lt;h2 id="★シングルオイル"&gt;★シングルオイル&lt;/h2&gt;

&lt;p&gt;ラベンダー&lt;br&gt;
レモン&lt;br&gt;
ペパーミント&lt;br&gt;
ティートゥリー&lt;br&gt;
オレガノ&lt;br&gt;
フランキンセンス&lt;br&gt;
ワイルドオレンジ&lt;/p&gt;

&lt;h2 id="★ブレンドオイル"&gt;★ブレンドオイル&lt;/h2&gt;

&lt;p&gt;イージーエアー&lt;br&gt;
オンガード&lt;br&gt;
ディープブルー&lt;br&gt;
ゼンジェスト&lt;br&gt;
アースリズム&lt;br&gt;
アロマタッチ&lt;/p&gt;

&lt;p&gt;どのオイルも手軽に使えることができ、色々な場面で使用することができるので使用頻度がかなり高いオイルばかり。&lt;/p&gt;

&lt;p&gt;香る、飲用、塗布、使い方も色々！&lt;/p&gt;

&lt;p&gt;オイルの特性から、具体的な使い方まで盛り沢山の内容です。講座を受けたらすぐにお家で実践してみたくなります！&lt;/p&gt;

&lt;h1 id="講座を受けて早速実践"&gt;講座を受けて早速実践&lt;/h1&gt;

&lt;hr&gt;

&lt;p&gt;私が講座を受けて早速実践したのは、子供の汗疹対策にラベンダーとティートゥリー。&lt;/p&gt;

&lt;p&gt;小さな子供なので、ココナッツオイルで希釈して、汗疹でプツプツしている部分に毎日塗り続けました。&lt;/p&gt;

&lt;p&gt;すると、一ヶ月ほどで汗疹は消失。&lt;/p&gt;

&lt;p&gt;今でも予防のために利用しています。&lt;br&gt;
子供の肌は繊細なので汗疹対策に保湿は大事。&lt;br&gt;
去年、汗疹で皮膚科を受診した際に、保湿を目的としてヒロドイドをもらって&lt;br&gt;
塗っていました。&lt;br&gt;
今は、シアバターとみつろうで、保湿クリームを作りそこにラベンダーとティートゥリー、プラスでフランキンセンスを入れたものを塗り塗りしています！&lt;/p&gt;

&lt;h1 id="ちょっぴり体験談"&gt;ちょっぴり体験談&lt;/h1&gt;

&lt;hr&gt;

&lt;p&gt;13本のエッセンシャルオイルはどのオイルも本当に活躍の場が多いのですが、&lt;br&gt;
中でも利用頻度が高いものの一つはペパーミント！&lt;br&gt;
手の平に一滴オイルを垂らし、こめかみや痛みを感じるところに塗布しています。&lt;br&gt;
スーッとスッキリして次第に痛みも無くなっていきます★&lt;/p&gt;

&lt;p&gt;&lt;img alt="薬箱講座" src="/images/./2016/0726_kusuribako/peppermint.png" /&gt;&lt;/p&gt;

&lt;p&gt;以前から偏頭痛もちで、頭痛がある時は決まってロキソニンを服用していました。&lt;br&gt;
ただ、ロキソニンの服用は消化器系に副作用が伴います。&lt;br&gt;
病院でロキソニンが処方されると必ずあわせて服用するようにと、胃を守るための胃薬も処方されます。&lt;/p&gt;

&lt;p&gt;これに加えて厚生労働省から、腸閉塞などの重大な副作用のリスクがあると呼びかけがありました。&lt;/p&gt;

&lt;p&gt;薬を全く飲まない、というわけではありませんが、&lt;br&gt;
薬の代替手段として、&lt;br&gt;
エッセンシャルオイルの様に副作用のない自然由来のものを&lt;br&gt;
生活に取り入れることができるといいな、と思います。&lt;/p&gt;

&lt;p&gt;エッセンシャルオイルの活用方法は無限大！&lt;br&gt;
今後お家のお掃除にもオイルを活用していきたいなと、実践中です。&lt;/p&gt;

&lt;p&gt;※上記の使い方は、CPTG(認定純粋セラピー等級)エッセンシャルオイル純度100%のドテラのオイルを利用した場合の一例です。&lt;/p&gt;

&lt;p&gt;&lt;a href="http://www.doterraeveryday.jp/training/cptg/"&gt;CPTGとは&lt;/a&gt;&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>静的ルーティングの設定 - Linux</title>
    <link rel="alternate" href="http://blog.url.com/2016/07/25/static-route.html"/>
    <id>http://blog.url.com/2016/07/25/static-route.html</id>
    <published>2016-07-25T09:00:00+09:00</published>
    <updated>2016-07-26T12:25:59+09:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;h1 id="はじめに"&gt;はじめに&lt;/h1&gt;

&lt;p&gt;AWSではルートテーブルがあるので設定することはないですが、そう言ったルーティングを管理する機能がない場合は自分で設定を行わなければなりません。&lt;br&gt;
ということでルーティングの設定についてまとめてみました。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h1 id="事前確認"&gt;事前確認&lt;/h1&gt;

&lt;p&gt;とりあえず&lt;code&gt;netstat&lt;/code&gt;コマンドで現在のルーティングの状態を確認しておきます。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ netstat -nr
Kernel IP routing table
Destination     Gateway         Genmask         Flags   MSS Window  irtt Iface
0.0.0.0         10.13.0.1       0.0.0.0         UG        0 0          0 eth0
10.13.0.0       0.0.0.0         255.255.248.0   U         0 0          0 eth0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h1 id="ルーティングの追加"&gt;ルーティングの追加&lt;/h1&gt;

&lt;p&gt;ルーティングの追加には一時的または永続的の２通りあります。コマンドでの追加、設定ファイルへ記載しての追加です。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h2 id="一時的な追加"&gt;一時的な追加&lt;/h2&gt;

&lt;p&gt;一時的な追加はコマンドでの追加となります。ここでは&lt;code&gt;route&lt;/code&gt;コマンドと&lt;code&gt;ip&lt;/code&gt;コマンドの２通りを紹介します。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h3 id="routeコマンド"&gt;routeコマンド&lt;/h3&gt;

&lt;h4 id="・networkの追加"&gt;・networkの追加&lt;/h4&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ sudo route add -net 172.31.0.0 gw 10.13.0.145 netmask 255.255.0.0 eth0
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id="・hostの追加"&gt;・hostの追加&lt;/h4&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ sudo route add -host 172.31.0.10 gw 10.13.0.145 eth0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;network&lt;/em&gt;に比べて&lt;em&gt;host&lt;/em&gt;は&lt;code&gt;-net&lt;/code&gt;が&lt;code&gt;-host&lt;/code&gt;になるのと、&lt;code&gt;netmask&lt;/code&gt;が不要になります。&lt;br&gt;
また、&lt;code&gt;eth0&lt;/code&gt; は無くても大丈夫です。その場合は任意でルーティングが設定できる&lt;em&gt;eth&lt;/em&gt;で設定されます。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h3 id="ipコマンド"&gt;ipコマンド&lt;/h3&gt;

&lt;h5 id="・networkの追加"&gt;・networkの追加&lt;/h5&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ sudo ip route add 172.31.0.0/16 via 10.13.0.145 dev eth0
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id="・hostの追加"&gt;・hostの追加&lt;/h5&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ sudo ip route add 172.31.0.10/32 via 10.13.0.145 dev eth0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ここでの&lt;em&gt;network&lt;/em&gt;と&lt;em&gt;host&lt;/em&gt;の違いは&lt;em&gt;netmask&lt;/em&gt;だけです。&lt;em&gt;host&lt;/em&gt;の場合は&lt;code&gt;/32&lt;/code&gt;にするだけです。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h2 id="永続的な追加"&gt;永続的な追加&lt;/h2&gt;

&lt;p&gt;コマンドで一時的に追加しただけではサーバー再起動などをしてしまうと消えてしまいます。&lt;br&gt;
そこで再起動してもルーティングが消えない設定を紹介します。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h3 id="ubuntu-の場合"&gt;Ubuntu の場合&lt;/h3&gt;

&lt;h4 id="・その１"&gt;・その１&lt;/h4&gt;

&lt;p&gt;ひとつ目は&lt;code&gt;/etc/network/if-up.d/static-routes&lt;/code&gt;で設定する方法です。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ sudo vi /etc/network/if-up.d/static-routes
&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#!/bin/sh
/sbin/route add -net 172.31.0.0 gw 10.13.0.145 netmask 255.255.0.0 dev eth0 // networkの場合
/sbin/route add -host 172.31.0.10 gw 10.13.0.145 eth0 // hostの場合
&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ sudo chmod +x /etc/network/if-up.d/static-routes
&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ sudo /etc/network/if-up.d/static-routes
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id="・その２"&gt;・その２&lt;/h4&gt;

&lt;p&gt;もう一つの方法は&lt;code&gt;/etc/network/interfaces&lt;/code&gt;に設定する方法です。&lt;br&gt;
&lt;code&gt;post-up&lt;/code&gt;を使うと任意のコマンドが実行できるようになります。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ cat /etc/network/interfaces
# This file describes the network interfaces available on your system
# and how to activate them. For more information, see interfaces(5).

# The loopback network interface
auto lo
iface lo inet loopback

# The primary network interface
auto eth0
iface eth0 inet dhcp
    post-up route add -net 172.31.0.0/16 gw 10.13.0.145  // networkの場合
    post-up route add -host 172.31.0.10/32 gw 10.13.0.145  // hostの場合
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h3 id="centos-の場合"&gt;CentOS の場合&lt;/h3&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ cat /etc/sysconfig/network-scripts/route-eth0 
# Static route for metadata service
172.31.0.0/16 via 10.13.0.145 dev eth0 // networkの場合
172.31.0.10/32 via 10.13.0.145 dev eth0 // hostの場合
&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ sudo /etc/init.d/network restart
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;もし&lt;code&gt;route-eth0&lt;/code&gt;の&lt;code&gt;0&lt;/code&gt;の部分は設定したい&lt;em&gt;eth&lt;/em&gt;によって変えてください。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h2 id="確認"&gt;確認&lt;/h2&gt;

&lt;p&gt;ということで追加した後の設定は以下の状態になります。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ netstat -nr
Kernel IP routing table
Destination     Gateway         Genmask         Flags   MSS Window  irtt Iface
0.0.0.0         10.13.0.1       0.0.0.0         UG        0 0          0 eth0
10.13.0.0       0.0.0.0         255.255.248.0   U         0 0          0 eth0
172.31.0.0      10.13.0.145     255.255.0.0     UG        0 0          0 eth0
172.31.0.10     10.13.0.145     255.255.255.255 UGH       0 0          0 eth0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h1 id="ルーティングの削除"&gt;ルーティングの削除&lt;/h1&gt;

&lt;p&gt;ルーティングの削除にも一時的または永続的の２通りあります。コマンドでの削除は一時的なものですが。永続的に削除をしたい場合は設定ファイルの記載から削除してあげる必要があります。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h2 id="一時的な削除"&gt;一時的な削除&lt;/h2&gt;

&lt;p&gt;一時的な削除は追加の時と同じでコマンドで行います。ここでも&lt;code&gt;route&lt;/code&gt;コマンドと&lt;code&gt;ip&lt;/code&gt;コマンドの２通りを紹介します。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h3 id="routeコマンド"&gt;routeコマンド&lt;/h3&gt;

&lt;h4 id="・networkの削除"&gt;・networkの削除&lt;/h4&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ sudo route add -net 172.31.0.0 gw 10.13.0.145 netmask 255.255.0.0 eth0
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id="・hostの削除"&gt;・hostの削除&lt;/h4&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ sudo route add -host 172.31.0.10 gw 10.13.0.145 eth0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;追加の時と同じで、&lt;em&gt;network&lt;/em&gt;と&lt;em&gt;host&lt;/em&gt;の違いは&lt;code&gt;-net&lt;/code&gt;が&lt;code&gt;-host&lt;/code&gt;になるのと、&lt;code&gt;netmask&lt;/code&gt;が不要になるところです。&lt;code&gt;eth0&lt;/code&gt;の箇所も無くても大丈夫です。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h3 id="ipコマンド"&gt;ipコマンド&lt;/h3&gt;

&lt;h4 id="・networkの削除"&gt;・networkの削除&lt;/h4&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ sudo ip route del 172.31.0.0/16
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id="・hostの削除"&gt;・hostの削除&lt;/h4&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ sudo ip route del 172.31.0.10/32
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;こちらも追加と同じで&lt;em&gt;host&lt;/em&gt;の場合は&lt;em&gt;netmask&lt;/em&gt;を&lt;code&gt;/32&lt;/code&gt;にするだけです。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h2 id="永続的な削除"&gt;永続的な削除&lt;/h2&gt;

&lt;p&gt;ただ、追加した箇所を削除するだけですので割愛します。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h2 id="確認"&gt;確認&lt;/h2&gt;

&lt;p&gt;永続的な設定の場合も&lt;code&gt;netstat&lt;/code&gt;で確認するとコマンドで追加した場合と同様の状態と取ります。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ netstat -nr
Kernel IP routing table
Destination     Gateway         Genmask         Flags   MSS Window  irtt Iface
0.0.0.0         10.13.0.1       0.0.0.0         UG        0 0          0 eth0
10.13.0.0       0.0.0.0         255.255.248.0   U         0 0          0 eth0
172.31.0.0      10.13.0.145     255.255.0.0     UG        0 0          0 eth0
172.31.0.10     10.13.0.145     255.255.255.255 UGH       0 0          0 eth0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h1 id="おわりに"&gt;おわりに&lt;/h1&gt;

&lt;p&gt;今までのルーティングの設定は各サーバーに設定しなければならないので、台数が多くなればなるほど大変でした。&lt;br&gt;
そういった煩雑さを軽くしてくれたAWSのルートテーブルは本当に便利だなと思います。&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>OGPの設定 Part2</title>
    <link rel="alternate" href="http://blog.url.com/2016/07/21/facebookSARE3.html"/>
    <id>http://blog.url.com/2016/07/21/facebookSARE3.html</id>
    <published>2016-07-21T09:00:00+09:00</published>
    <updated>2016-07-26T12:25:59+09:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;h1 id="はじめに"&gt;はじめに&lt;/h1&gt;

&lt;hr&gt;

&lt;p&gt;前回から引き続きfacebookのOGP設定についてです。&lt;br&gt;
前回、大方設定したOGP情報が反映されるところまでいきましたが、、&lt;br&gt;
記事ごとのOGPデータの設定がうまくいかない。という所でつまずきました。&lt;/p&gt;

&lt;p&gt;&lt;img alt="OGP設定" src="/images/./2016/0721_facebookSHARE3/OGP_5.png" /&gt;&lt;/p&gt;

&lt;p&gt;今回はなんとかして記事ごとにOGPの取得をしてもらえるように設定したい！&lt;/p&gt;

&lt;h1 id="middleman-ogpを使う"&gt;Middleman-OGPを使う&lt;/h1&gt;

&lt;hr&gt;

&lt;p&gt;突然ですが、、&lt;br&gt;
実はこのProudBlog、middlemanのブログ機能を使って作られています。&lt;/p&gt;

&lt;p&gt;そのため、色々と調べてみた結果、今回はMiddleman-OGPというプラグインを利用しました。&lt;br&gt;
プラグインを入れて、の作業なったので、社長に設定をしてもらいました！&lt;br&gt;
なので、すみません、、詳細な設定内容は省きます＞＜&lt;br&gt;
(ここが一番気になりますよね。汗)&lt;/p&gt;

&lt;p&gt;内容についてはこの辺りのサイトを参考にしています。&lt;br&gt;
&lt;a href="http://whiskers.nukos.kitchen/2015/04/10/middleman-ogp.html"&gt;http://whiskers.nukos.kitchen/2015/04/10/middleman-ogp.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;ただ上記プラグイン導入の他にも色々と手を加えて、加えて、、、&lt;br&gt;
設定をしてもらい、ようやく理想通りの形ができあがりましたー！！&lt;/p&gt;

&lt;p&gt;肝心な手順部分の内容が薄くなってしまいました...&lt;br&gt;
せっかくなのでMiddlemanと静的サイトについて備忘録としてまとめておきます。&lt;/p&gt;

&lt;h1 id="middlemanとは"&gt;Middlemanとは&lt;/h1&gt;

&lt;hr&gt;

&lt;p&gt;&lt;img alt="OGP設定" src="/images/./2016/0721_facebookSHARE3/middleman_1.png" /&gt;&lt;/p&gt;

&lt;p&gt;Middlemanとはruby製の静的サイトジェネレーター。&lt;br&gt;
静的なwebサイトを構築する際に便利なコマンドラインツール。&lt;/p&gt;

&lt;p&gt;日本語のドキュメントもあります。&lt;br&gt;
&lt;a href="https://middlemanapp.com/jp/"&gt;https://middlemanapp.com/jp/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;日本語ドキュメントがあるのはありがたいですね！&lt;/p&gt;

&lt;p&gt;この他にmiddlemanのメリットが書かれたサイトを見つけました。&lt;br&gt;
&lt;a href="http://www.mdesign-works.com/blog/web/static-site-genareter/"&gt;http://www.mdesign-works.com/blog/web/static-site-genareter/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;・開発用サーバがある&lt;br&gt;
・共通のレイアウト設定やファイルをパーツ化できる&lt;br&gt;
・変数が使える&lt;/p&gt;

&lt;p&gt;※上記はサイトから抜粋したものです&lt;/p&gt;

&lt;h2 id="静的サイトジェネレーター（static-site-generator）とは"&gt;静的サイトジェネレーター（Static Site Generator）とは&lt;/h2&gt;

&lt;p&gt;記事を書いたテキストファイルを元に、HTMLを生成してくれる、&lt;br&gt;
静的サイトを効率的に制作するためのツール。&lt;/p&gt;

&lt;p&gt;middlemanの他にも&lt;br&gt;
Hugo、jekllyといったものが有名どころのようです。&lt;/p&gt;

&lt;p&gt;静的サイトは、指定したパスに設置してあるhtmlファイルを表示させ、&lt;br&gt;
何度読み込んでも同じ内容を表示させます。&lt;br&gt;
まさに動きのない、静的なサイト。&lt;/p&gt;

&lt;p&gt;HTMLファイルを表示させるだけなので、表示速度も高速。&lt;br&gt;
尚且つサーバ負荷も最小限で済みます。&lt;br&gt;
構成がシンプルで、更新頻度の少ないサイトには向いています。&lt;/p&gt;

&lt;p&gt;サイトを簡単に作る上で多く利用されているのが、CMS(content management system)。&lt;br&gt;
なかでもwordpressは代表的なCMS。&lt;br&gt;
CMSは静的サイトと異なり、DBサーバも必要になるので、前述したようにシンプルな&lt;br&gt;
構成のサイトは静的サイトで構築するほうが色々とメリットがあるかもしれません。&lt;/p&gt;

&lt;h1 id="おわりに"&gt;おわりに&lt;/h1&gt;

&lt;hr&gt;

&lt;p&gt;実際に自分がmiddlemanを一から設定する作業をやったわけではないのですが、&lt;br&gt;
このブログを更新する上で一つ一つの作業はいたってシンプル。&lt;br&gt;
一定の規則に従って記事を書いてアップするだけ！&lt;br&gt;
ただ、中の構成がどうなっているのかわからないので、ブログのトップ画像を変えたい、今回のようにfacebookのogp設定をしたいとった時は&lt;br&gt;
分かる人に聞いたり、やってもらったりしないといけないので、&lt;br&gt;
社内向け、個人利用が主になってしまうのかな。&lt;br&gt;
お客さん向けに提供するには難しいかもしれません。&lt;/p&gt;

&lt;p&gt;とは言え、サーバレスも注目されている中でmiddlemanのようなツールを&lt;br&gt;
使ったサイトはこれからどんどん増えていくかも！&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>AmazonLinuxにswapを作成する。</title>
    <link rel="alternate" href="http://blog.url.com/2016/07/19/how-to-make-a-swap-for-the-amazonlinux.html"/>
    <id>http://blog.url.com/2016/07/19/how-to-make-a-swap-for-the-amazonlinux.html</id>
    <published>2016-07-19T09:00:00+09:00</published>
    <updated>2016-07-26T12:25:59+09:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;h1 id="はじめに"&gt;はじめに&lt;/h1&gt;

&lt;p&gt;&lt;em&gt;Amazon Linux&lt;/em&gt;に2048MBのスワップを作成する作業を行います。&lt;/p&gt;

&lt;p&gt;その前にまずスワップとは、&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;スワップとは、ハードディスクなどの補助記憶装置を利用して使用可能なメモリ容量を増やすOSの機能の一つ。－ IT用語辞典(e-Words)より抜粋&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;つまり今回で言うとEBSボリュームの一部をメモリとして扱えるようにした領域のことです。&lt;/p&gt;

&lt;p&gt;ということで作成してみます。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h1 id="事前確認"&gt;事前確認&lt;/h1&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ free -m
             total       used       free     shared    buffers     cached
Mem:           491        353        138          0          8        294
-/+ buffers/cache:         49        442
Swap:            0          0          0
&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ swapon -s
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h1 id="スワップ領域の作成"&gt;スワップ領域の作成&lt;/h1&gt;

&lt;p&gt;まず、&lt;code&gt;dd&lt;/code&gt;コマンドでスワップ用の領域を確保します。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ sudo dd if=/dev/zero of=/swapfile bs=1024 count=2048k
2097152+0 レコード入力
2097152+0 レコード出力
2147483648 バイト (2.1 GB) コピーされました、 32.0676 秒、 67.0 MB/秒
&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ sudo chmod 600 /swapfile 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;作成したら&lt;code&gt;mkswap&lt;/code&gt;でスワップを作成します。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ sudo mkswap /swapfile 
mkswap: /swapfile: warning: wiping old swap signature.
スワップ空間バージョン1を設定します、サイズ = 2097148 KiB
ラベルはありません, UUID=88c217dc-d8e0-42f9-b2bc-eb814505b5e3
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;以上で作成が完了しました。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h1 id="スワップ領域の有効化"&gt;スワップ領域の有効化&lt;/h1&gt;

&lt;p&gt;&lt;code&gt;mkswap&lt;/code&gt;で作成しただけでは利用できません。スワップの作成ができたら&lt;code&gt;swapon&lt;/code&gt;でスワップ領域の有効化をします。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ sudo swapon /swapfile 
&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ free -m
             total       used       free     shared    buffers     cached
Mem:           491        485          6          0          4        421
-/+ buffers/cache:         59        432
Swap:         2047          0       2047
&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ swapon -s
Filename                Type        Size    Used    Priority
/swapfile                               file    2097148 0   -1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h1 id="スワップ領域の無効化"&gt;スワップ領域の無効化&lt;/h1&gt;

&lt;p&gt;スワップ領域の有効化は&lt;code&gt;swapon&lt;/code&gt;ですが、無効化は&lt;code&gt;swapoff&lt;/code&gt;で行います。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ sudo swapoff /swapfile 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h1 id="自動マウント設定"&gt;自動マウント設定&lt;/h1&gt;

&lt;p&gt;毎回コマンドでスワップを有効化するのは大変ですので、起動時に自動マウントするように&lt;em&gt;/etc/fstab&lt;/em&gt;に追記しておきます。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ sudo vi /etc/fstab
/swapfile   none        swap    defaults        0   0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;参考：&lt;a href="https://wiki.archlinuxjp.org/index.php/Fstab"&gt;Arch Linux - fstab&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;以上で完了です。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h1 id="おわりに"&gt;おわりに&lt;/h1&gt;

&lt;p&gt;かつての物理サーバでは、コストや仕様などの理由で利用出来るメモリに制限がありました。&lt;br&gt;
ただ、今ではクラウドを利用することによって&lt;strong&gt;swapを作成するならそれ以上にメモリを積む&lt;/strong&gt;であったり、&lt;strong&gt;一台あたりのパワーを求めるよりスケールアウト&lt;/strong&gt;という発想の方が効率的になってきたこともありswapの利用する場面が少なくなっています。&lt;br&gt;
とはいえ、&lt;strong&gt;いざという時のswap&lt;/strong&gt;はあっても損じゃないかなと個人的には思います。&lt;/p&gt;
</content>
  </entry>
</feed>
