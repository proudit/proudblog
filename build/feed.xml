<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Blog Name</title>
  <subtitle>Blog subtitle</subtitle>
  <id>http://blog.url.com/</id>
  <link href="http://blog.url.com/"/>
  <link href="http://blog.url.com/feed.xml" rel="self"/>
  <updated>2016-09-07T09:00:00+09:00</updated>
  <author>
    <name>Blog Author</name>
  </author>
  <entry>
    <title>GCP NEXT Tokyo 2016に行ってきた。</title>
    <link rel="alternate" href="http://blog.url.com/2016/09/07/about-gcp-next-tokyo-2016.html"/>
    <id>http://blog.url.com/2016/09/07/about-gcp-next-tokyo-2016.html</id>
    <published>2016-09-07T09:00:00+09:00</published>
    <updated>2016-09-07T15:55:27+09:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;&lt;img alt="GPCNEXT" src="/images/./2016/0907_about_GCP_NEXT_Tokyo_2016/gcp_next_tokyo_2016.jpg" /&gt;&lt;br&gt;
昨日(2016年9月6日)、芝公園にあるザ・プリンスタワー東京で&lt;strong&gt;GCP NEXT | World Tour | Tokyo 2016&lt;/strong&gt;が開催されたので行ってきました。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h1 id="gcp-nextとは？"&gt;GCP NEXTとは？&lt;/h1&gt;

&lt;p&gt;Google Cloud Platformに関する最新クラウドテクノロジーについての発表や活用事例を発表するイベントです。&lt;br&gt;
その他にGCP導入企業との交流やハンズオントレーニングも行えます。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h1 id="どんな企業が参加しているの？"&gt;どんな企業が参加しているの？&lt;/h1&gt;

&lt;p&gt;&lt;img alt="GoogleApps" src="/images/./2016/0907_about_GCP_NEXT_Tokyo_2016/GoogleApps.jpg" /&gt;&lt;br&gt;
GCPでシステム構築・運用などを行うMSPの企業やGCPをベースに構築したサービスを提供する企業、CDNなどのGCPと組み合わせて利用できるサービスなどを展開する企業など様々でした。&lt;/p&gt;

&lt;p&gt;今回ブース出展していた協賛パートナーは以下です。(※アルファベット順)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.accenture.com/jp-ja/"&gt;accenture&lt;/a&gt;&lt;br&gt;
コンサルティング会社です。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="http://www.brainpad.co.jp"&gt;BrainPad&lt;/a&gt;&lt;br&gt;
ビッグデータを活用した解析や機械学習、AIなどに力を入れている会社です。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.cloud-ace.jp"&gt;Cloud Ace&lt;/a&gt;&lt;br&gt;
Google Cloud Platformの導入・運用をワンストップでサポートするMSPサービスです。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="http://cross-rendering.jp"&gt;Cross&lt;/a&gt;&lt;br&gt;
Googleのクラウドコンピューティングでレンダーファームサービスを提供している会社です。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="http://www.equinix.co.jp/locations/japan-colocation/tokyo-data-centers/?ls=Advertising%20-%20Web&amp;amp;lsd=16q2_enterprise_people__google_cpc_jp-jp&amp;amp;utm_campaign=people&amp;amp;utm_medium=cpc&amp;amp;utm_source=google&amp;amp;utm_term=equinix&amp;amp;gclid=CNmSxpHE_M4CFQpwvAodAesP0g"&gt;EQUINIX&lt;/a&gt;&lt;br&gt;
データセンター事業を展開する会社です。ビットアイルを買収したことでも有名ですね。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.fastly.com"&gt;fastly&lt;/a&gt;&lt;br&gt;
CDNサービスを提供する会社です。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="http://www.grasys.io"&gt;grasys&lt;/a&gt;&lt;br&gt;
システム設計・構築・運用保守を行うMSPの会社です。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="http://www.groovenauts.jp"&gt;Groovenauts&lt;/a&gt;&lt;br&gt;
画面上のブロックを配置して複雑なクラウド機能をつなぎあわせる「BLOCKS」というサービスを提供している会社です。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="http://www.inter.it/jp/hp"&gt;intel&lt;/a&gt;&lt;br&gt;
CoreプロセッサなどのCPUを製造している半導体メーカーです。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.isao.co.jp"&gt;ISAO&lt;/a&gt;&lt;br&gt;
クラウドマネージメントの「くらまね」をサービスとして提供している会社です。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.jig-saw.com"&gt;JIG-SAW&lt;/a&gt;&lt;br&gt;
システム設計・構築・運用保守を行うMSPの会社です。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.jsol.co.jp"&gt;JSOL&lt;/a&gt;&lt;br&gt;
ITコンサルティング会社です。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://mackerel.io"&gt;mackerel&lt;/a&gt;&lt;br&gt;
モニタリングプラットフォームを提供する会社です。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://nhn-techorus.com"&gt;TECHORUS&lt;/a&gt;&lt;br&gt;
ITインフラを提案・構築・運用支援などを行う会社です。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="http://www.tokai-com.co.jp"&gt;TOKAIコミュニケーション&lt;/a&gt;&lt;br&gt;
ネットワーク・データセンター・システム開発を三位一体で展開する会社です。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.topgate.co.jp"&gt;TOP GATE&lt;/a&gt;&lt;br&gt;
Googleの技術をコアとした開発やコンサルティングを行う、Google技術者集団です。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img alt="GDC" src="/images/./2016/0907_about_GCP_NEXT_Tokyo_2016/gdc.jpg" /&gt;&lt;br&gt;
&lt;img alt="GCP" src="/images/./2016/0907_about_GCP_NEXT_Tokyo_2016/gcp.jpg" /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h1 id="どんな内容が聞けるの？"&gt;どんな内容が聞けるの？&lt;/h1&gt;

&lt;p&gt;午前中は基調講演です。お昼を挟んで午後からは「事例紹介」や「各種サービスの技術」についてA・B・Cの３会場に分かれて講演が行われました。&lt;br&gt;
&lt;a href="https://cloudplatformonline.com/NEXT2016-Tokyo-Agenda.html"&gt;アジェンダ&lt;/a&gt;&lt;br&gt;
どのセッションもほぼ満席みたいでしたが、特にゲーム系のセッションが開場前から行列だったので人気があったのかなと感じました。&lt;br&gt;
&lt;img alt="schedule" src="/images/./2016/0907_about_GCP_NEXT_Tokyo_2016/gcp-schedule.png" /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h1 id="今回気になったサービス"&gt;今回気になったサービス&lt;/h1&gt;

&lt;h2 id="●stackdriver"&gt;●STACKDRIVER&lt;/h2&gt;

&lt;p&gt;なんと言っても&lt;a href="http://www.stackdriver.com"&gt;&lt;strong&gt;Stackdriver&lt;/strong&gt;&lt;/a&gt;ですね。&lt;br&gt;
マルチクラウド管理に対応したモニタリングツールで、「&lt;strong&gt;モニタリング、ロギング、デバッグ、トレース、エラーレポーティング&lt;/strong&gt;」と言ったことが行えます。&lt;br&gt;
しかもAWSにも対応(というかテクノロジーパートナーですw)しているので両方のパブリッククラウドを利用している企業などは一元管理できるのでとても便利なのではないかなと思います。&lt;br&gt;
現在、β版で無料で利用できるので今のうちにもっと試して使い勝手などを検証したいと思います。&lt;br&gt;
&lt;img alt="stackdriver" src="/images/./2016/0907_about_GCP_NEXT_Tokyo_2016/stackdriver.png" /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h2 id="●gae"&gt;●GAE&lt;/h2&gt;

&lt;p&gt;個人的に&lt;a href="https://cloud.google.com/appengine/?hl=ja&amp;amp;utm_source=google&amp;amp;utm_medium=cpc&amp;amp;utm_campaign=2015-q1-cloud-japac-jp-gae-bkws-freetrial-jap&amp;amp;utm_term=gae&amp;amp;gclid=CKGltMq8_M4CFYWUvQodkFcI4A"&gt;&lt;strong&gt;GAE(Google App Engine)&lt;/strong&gt;&lt;/a&gt;も良いです。&lt;br&gt;
でもGAEは昔からある成熟したサービスだと言われました。。。勉強不足。。。&lt;br&gt;
とはいえ、せっかくなのでGAEについて!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://cloud.google.com/appengine/docs/whatisgoogleappengine?hl=ja"&gt;GAE&lt;/a&gt;とはGoogleのインフラの上でアプリケーションを作り、実行できるようにする「&lt;strong&gt;Paas&lt;/strong&gt;」です。利用者はただ、アプリケーションをGAEへアップロードするだけで実行できます。ランタイム環境としては現在「Java、Python、PHP、Go」をサポートしているみたいです。&lt;br&gt;
無料枠もあるみたいで&lt;strong&gt;1日28時間までサポート&lt;/strong&gt;されています。つまり１台動かす分には無料ということです。&lt;br&gt;
しかも&lt;strong&gt;使った分だけ課金&lt;/strong&gt;になるので、アップロードしてもアクセスがない場合は課金されません。良いですね！&lt;br&gt;
逆に負荷が高くなった場合、自動でオートスケーリングしてくれます。ここで気になったのが、上限値は設定できるんですかね？できるはずですよね？そこ重要ですよね！？要チェックや。。。&lt;br&gt;
また、聴講していて他にいいなと思ったポイントはバージョン管理機能みたいなのがあるらしく、&lt;br&gt;
アップロードした内容がOKであれば管理画面上で切り替えることができるんだそうです。いわゆる&lt;strong&gt;blue/greenデプロイみたいなことが可能&lt;/strong&gt;との事です。&lt;br&gt;
昔からあるサービスなだけあって、GAEは「ザ・GCP」と言った感じですね。&lt;br&gt;
&lt;img alt="GAE" src="http://23.251.145.25/wordpress/wp-content/uploads/2014/03/gae_image.jpg" /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h1 id="おわりに"&gt;おわりに&lt;/h1&gt;

&lt;p&gt;パブリッククラウドと言ったらAWSというのはまだまだ拭えないですが、東京リージョンもついにやってくるとの事で、ここからのGoogleの追い上げに注目です。&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>モダールウィンドウの設定</title>
    <link rel="alternate" href="http://blog.url.com/2016/09/06/how-to-modalwindow.html"/>
    <id>http://blog.url.com/2016/09/06/how-to-modalwindow.html</id>
    <published>2016-09-06T09:00:00+09:00</published>
    <updated>2016-09-07T13:48:31+09:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;h1 id="はじめに"&gt;はじめに&lt;/h1&gt;

&lt;hr&gt;

&lt;p&gt;モーダルウィンドウとはなんでしょう？&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;モーダルウィンドウとは、操作が完了するまで親ウィンドウへの操作を受け付けなくさせるタイプのウィンドウのことである。
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;引用元：&lt;a href="http://www.sophia-it.com/content/%E3%83%A2%E3%83%BC%E3%83%80%E3%83%AB%E3%82%A6%E3%82%A3%E3%83%B3%E3%83%89%E3%82%A6"&gt;IT用語辞典&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img alt="modalwindow" src="/images/./2016/0906_modalwindow_setting/modalwindow_01.png" /&gt;&lt;/p&gt;

&lt;p&gt;ページ遷移すること無く、もとのページがグレーアウトした状態で、子ウィンドウをオーバレイする状態で表示させることができます。&lt;/p&gt;

&lt;p&gt;画面遷移せずに同ページ内で別コンテンツを開くことができるという利点がある一方で、&lt;br&gt;
モダールウィンドウであることがユーザーに認識されづらく、&lt;br&gt;
ユーザビリティが欠落してしまうケースや、スマートフォンのような小さな画面ではウィンドウを閉じる場合、&lt;br&gt;
操作性が悪い等、、デメリットも多くあるのです。&lt;/p&gt;

&lt;p&gt;設置の際はそういった点も考慮する必要がありそうです。&lt;/p&gt;

&lt;p&gt;前置きが長くなりましたが、早速実践してみましょう！&lt;/p&gt;

&lt;h1 id="モーダルウィンドウの設置"&gt;モーダルウィンドウの設置&lt;/h1&gt;

&lt;hr&gt;

&lt;p&gt;このモダールウィンドウ設置のために利用したのは&lt;strong&gt;remodal&lt;/strong&gt;というプラグイン。&lt;br&gt;
軽量かつシンプル。&lt;br&gt;
ギャラリー機能は無く、テキスト表示のみ対応です。&lt;br&gt;
今回はテキスト表示が目的なので、こちらを選びましたが、&lt;br&gt;
モダールウィンドウのプラグインはこの他にも多くあるので、用途に合わせて&lt;br&gt;
使い分けしてみてください。&lt;/p&gt;

&lt;p&gt;まずはremodalのファイルをダウンロード。&lt;br&gt;
ダウンロードした以下ファイルを任意のフォルダに設置し、読み込みます。&lt;/p&gt;

&lt;p&gt;・remodal.js&lt;br&gt;
・remodal-default-theme.css&lt;br&gt;
・remodal.css&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;script src="../js/remodal.js"&amp;gt;&amp;lt;/script&amp;gt;

&amp;lt;link rel="stylesheet" href="css/remodal.css"&amp;gt;
&amp;lt;link rel="stylesheet" href="css/remodal-default-theme.css"&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ソースコードの記述。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;!-- 呼び出し用ボタン --&amp;gt;
&amp;lt;a href="#modal" class="btn btn-default"&amp;gt;Modalデモ&amp;lt;/a&amp;gt;

&amp;lt;!-- Modal本体 --&amp;gt;
&amp;lt;!-- ボタンが押されると呼び出される --&amp;gt;
&amp;lt;div class="remodal" data-remodal-id="modal"&amp;gt;
&amp;lt;!-- クローズボタン --&amp;gt;
&amp;lt;button data-remodal-action="close" class="remodal-close"&amp;gt;&amp;lt;/button&amp;gt;
&amp;lt;h1&amp;gt;Remodal&amp;lt;/h1&amp;gt;
&amp;lt;!-- your content --&amp;gt;
&amp;lt;p&amp;gt; Remodalテスト &amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt; Write something. &amp;lt;/p&amp;gt;
&amp;lt;br&amp;gt;
&amp;lt;!-- キャンセルボタン --&amp;gt;
&amp;lt;button data-remodal-action="cancel" class="remodal-cancel"&amp;gt;Cancel&amp;lt;/button&amp;gt;
&amp;lt;!-- サブミットボタン --&amp;gt;
&amp;lt;button data-remodal-action="confirm" class="remodal-confirm"&amp;gt;OK&amp;lt;/button&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;以上です！&lt;br&gt;
とっても簡単ですよね！&lt;/p&gt;

&lt;h1 id="おわりに"&gt;おわりに&lt;/h1&gt;

&lt;hr&gt;

&lt;p&gt;プラグインを利用したので、スムーズに設置することができました。&lt;br&gt;
が、今回テキスト表示のみのプラグインを利用したので、カスタマイズはしづらいです。&lt;br&gt;
テキスト表示といっても長文テキストを仕込んだので、その分コードが&lt;br&gt;
長くなってしまいました・・・&lt;/p&gt;

&lt;p&gt;ここをなんとかシンプルにまとめる方法はないかな、と今後改善したいと思っています。&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>AWS SDK for Ruby バージョン 2 で期限付きURLの発行</title>
    <link rel="alternate" href="http://blog.url.com/2016/08/31/issu-of-time-limited-url-in-the-aws-sdk-for-ruby-version-2.html"/>
    <id>http://blog.url.com/2016/08/31/issu-of-time-limited-url-in-the-aws-sdk-for-ruby-version-2.html</id>
    <published>2016-08-31T09:00:00+09:00</published>
    <updated>2016-08-31T21:55:38+09:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;h1 id="はじめに"&gt;はじめに&lt;/h1&gt;

&lt;p&gt;前回、&lt;a href="http://blog.proudit.jp/2016/08/23/to-upload-a-file-using-the-aws-sdk-for-ruby.html"&gt;「AWS SDK for Ruby バージョン 2 を使用したS3バケットへのオブジェクトアップロード」&lt;/a&gt;でS3へオブジェクトのアップロードを行いました。&lt;br&gt;
でも、このままではアップロードしただけで、誰もアップしたオブジェクトにアクセスができないですね。。。&lt;br&gt;
ということで、今回はアップロードしたファイルをブラウザからアクセスできるように&lt;strong&gt;期限付きURLの発行&lt;/strong&gt;をしてみたいと思います。&lt;br&gt;
ちなみに&lt;strong&gt;期限付きURL&lt;/strong&gt;とはその名の通り、URLを発行してから１0分だったり3日だったり１週間だったりと、利用できる&lt;strong&gt;期限&lt;/strong&gt;を持たせたURLです。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h1 id="1.-アクセス先の準備"&gt;1. アクセス先の準備&lt;/h1&gt;

&lt;p&gt;前回、&lt;a href="http://blog.proudit.jp/2016/08/23/to-upload-a-file-using-the-aws-sdk-for-ruby.html#1.-ファイルアップロード先の準備"&gt;「AWS SDK for Ruby バージョン 2 を使用したS3バケットへのオブジェクトアップロード」&lt;/a&gt;で作成したバケットを利用するので今回は省略します。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h1 id="2.-アクセスユーザーの用意"&gt;2. アクセスユーザーの用意&lt;/h1&gt;

&lt;p&gt;まずは、バケットへアクセスできるユーザーを準備しますが、&lt;a href="http://blog.proudit.jp/2016/08/23/to-upload-a-file-using-the-aws-sdk-for-ruby.html#2.-アップロードユーザーの用意"&gt;前回作成&lt;/a&gt;した&lt;em&gt;kohei-no-iam&lt;/em&gt;を利用したいと思います。&lt;/p&gt;

&lt;p&gt;まずは「アクセス許可」→「ポリシーのアタッチ」をクリックします。&lt;/p&gt;

&lt;p&gt;&lt;img alt="4-iam01.png" src="https://qiita-image-store.s3.amazonaws.com/0/82090/6a324b60-8cfd-05c8-a9ea-3a6450c39f25.png" /&gt;&lt;/p&gt;

&lt;p&gt;今回は &lt;strong&gt;AmazonS3ReadOnlyAccess&lt;/strong&gt; をアタッチするだけでOKです。&lt;/p&gt;

&lt;p&gt;&lt;img alt="4-iam02.png" src="https://qiita-image-store.s3.amazonaws.com/0/82090/3d1435a3-6637-f5f9-ef80-6ba87388d897.png" /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img alt="4-iam03.png" src="https://qiita-image-store.s3.amazonaws.com/0/82090/b6d48db2-01be-4bfb-0b9b-20cb21f7ff70.png" /&gt;&lt;/p&gt;

&lt;p&gt;以上でユーザーの用意は完了です。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h1 id="3.-スクリプトの作成"&gt;3. スクリプトの作成&lt;/h1&gt;

&lt;p&gt;それではスクリプトを作成します。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ vim presigned_url.rb
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ファイルを開いたら以下の内容をコピペします。&lt;br&gt;
また、その際に&lt;strong&gt;bucketname&lt;/strong&gt;、&lt;strong&gt;objectname&lt;/strong&gt;、&lt;strong&gt;uploadfile&lt;/strong&gt;と&lt;strong&gt;アクセスキーID&lt;/strong&gt;と&lt;strong&gt;シークレットアクセスキー&lt;/strong&gt;は適宜変更してください。&lt;br&gt;
バケットのリージョンをTokyoにしなかった場合も適切なリージョンに変更する必要があります。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#!/usr/bin/env ruby

require 'aws-sdk'

bucketname = "kohei-no-bucket"    # バケット名
objectname = "ceresso.png"        # オブジェクト名

Aws.config[:credentials] = Aws::Credentials.new(
  '********************',                      # アクセスキーID
  '****************************************',  # シークレットアクセスキー
)
s3 = Aws::S3::Resource.new(region:'ap-northeast-1')  # Tokyoリージョン
obj = s3.bucket(bucketname).object(objectname)
puts obj.presigned_url(:get, expires_in:60)   # expires_in:有効期限(秒)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;実行権限を追加しておきます。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ chmod +x presigned_url.rb
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;以上で準備完了です。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h1 id="4.-実践！"&gt;4. 実践！&lt;/h1&gt;

&lt;p&gt;その前に、一応現在のバケットの設定が&lt;strong&gt;「ウェブサイトのホスティングを有効にしない」&lt;/strong&gt;となっているのを確認しておきます。&lt;/p&gt;

&lt;p&gt;&lt;img alt="5-test01.png" src="https://qiita-image-store.s3.amazonaws.com/0/82090/18fb2061-a1fc-f7d5-fee6-0f8e7b15e7b8.png" /&gt;&lt;/p&gt;

&lt;p&gt;それでは実行です。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ ./presigned_url.rb
https://kohei-no-bucket.s3-ap-northeast-1.amazonaws.com/ceresso.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;amp;X-Amz-Credential=＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊%2F20160824%2Fap-northeast-1%2Fs3%2Faws4_request&amp;amp;X-Amz-Date=20160824T061832Z&amp;amp;X-Amz-Expires=60&amp;amp;X-Amz-SignedHeaders=host&amp;amp;X-Amz-Signature=26eddaaad67a9f0e5d011b110ee34e271557c5f9f8bac82c9da655d58956245e
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;発行されたURLにアクセスしてみます。&lt;/p&gt;

&lt;p&gt;&lt;img alt="5-test02.png" src="https://qiita-image-store.s3.amazonaws.com/0/82090/6d3642fe-2325-e9f2-54b3-d093f67a472b.png" /&gt;&lt;/p&gt;

&lt;p&gt;画像が表示されました。&lt;br&gt;
それでは60秒過ぎてからもう一度アクセスしてみます。&lt;/p&gt;

&lt;p&gt;&lt;img alt="5-test03.png" src="https://qiita-image-store.s3.amazonaws.com/0/82090/0a7cf754-86eb-631e-0de4-2b20b78e389f.png" /&gt;&lt;/p&gt;

&lt;p&gt;アクセスができなくなっているのが確認できました。&lt;br&gt;
以上で期限付きURLの発行の完了です。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h1 id="おわりに"&gt;おわりに&lt;/h1&gt;

&lt;p&gt;「期限付きURL」が発行できることによって、一時的なファイル共有が可能になるのでこれはとても便利なんじゃないかなと個人的には思います。&lt;br&gt;
ただ、&lt;a href="http://docs.aws.amazon.com/sdkforruby/api/Aws/S3/Object.html#presigned_url-instance_method"&gt;ドキュメント&lt;/a&gt;によるとこの期限付きURLは「１週間」を超える設定にはできないことです。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Raises:&lt;br&gt;
(ArgumentError) — Raised if :expires_in exceeds one week (604800 seconds).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h1 id="おまけ"&gt;おまけ&lt;/h1&gt;

&lt;p&gt;そこについても試してみました。&lt;/p&gt;

&lt;p&gt;●ちょうど１週間(604800秒)の場合&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ ./presigned_url.rb 
https://kohei-no-bucket.s3-ap-northeast-1.amazonaws.com/ceresso.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;amp;X-Amz-Credential=********************%2F20160825%2Fap-northeast-1%2Fs3%2Faws4_request&amp;amp;X-Amz-Date=20160825T021333Z&amp;amp;X-Amz-Expires=604800&amp;amp;X-Amz-SignedHeaders=host&amp;amp;X-Amz-Signature=709a0de7cf14bd002a9b7953da5e5c9433104ccf9743bb7fda0332bd17830043
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;●1週間+1秒(604801秒)の場合&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ ./presigned_url.rb 
/Library/Ruby/Gems/2.0.0/gems/aws-sdk-core-2.5.4/lib/aws-sdk-core/s3/presigner.rb:68:in `expires_in': expires_in value of 604801 exceeds one-week maximum (ArgumentError)
    from /Library/Ruby/Gems/2.0.0/gems/aws-sdk-core-2.5.4/lib/aws-sdk-core/s3/presigner.rb:50:in `presigned_url'
    from /Library/Ruby/Gems/2.0.0/gems/aws-sdk-resources-2.5.4/lib/aws-sdk-resources/services/s3/object.rb:189:in `presigned_url'
    from ./presigned_url.rb:14:in `&amp;lt;main&amp;gt;'
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;期限付きURLも期限付きだったんですねw&lt;/p&gt;

&lt;p&gt;参考：&lt;a href="http://docs.aws.amazon.com/sdkforruby/api/Aws/S3/Object.html#presigned_url-instance_method"&gt;&lt;strong&gt;AWS SDK for Ruby - presigned_url&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>必ずやっておきたいwordpress初期設定</title>
    <link rel="alternate" href="http://blog.url.com/2016/08/26/wordpress-how-to-get-started.html"/>
    <id>http://blog.url.com/2016/08/26/wordpress-how-to-get-started.html</id>
    <published>2016-08-26T09:00:00+09:00</published>
    <updated>2016-08-31T11:33:25+09:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;h1 id="はじめに"&gt;はじめに&lt;/h1&gt;

&lt;hr&gt;

&lt;p&gt;wordpressインストール後、サイトの中身をカスタマイズする前に、まずやっておくべき初期設定。&lt;br&gt;
今後のサイト管理をしやすくするためにもまずはじめに設定しましょう。&lt;/p&gt;

&lt;p&gt;基本的にはメニューバー下部にある、設定メニュー部分にある６項目。&lt;br&gt;
今回は★印の部分の設定をおこないました。&lt;/p&gt;

&lt;p&gt;&lt;img alt="wordpress_setting" src="/images/./2016/0826_wordpress_setting/setting_00.png" /&gt;&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;・一般 ★
・投稿設定
・表示設定
・ディスカッション
・メディア
・パーマリンク設定　★
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id="一般設定★"&gt;一般設定★&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;サイトタイトル、キャッチフレーズを入力。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;キャッチフレーズについてはテンプレートによって、タイトルタグや見出しタグにはいってしまい、&lt;br&gt;
SEO的に好ましくない設定になっているものもあるようなので、&lt;br&gt;
空白にした方が良い場合もあるようです。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;wordpressアドレス、サイトアドレスを入力。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;wordpressアドレス：実際にwordpressがインストールされているパスを入力します。&lt;/p&gt;

&lt;p&gt;サイトアドレス：ブラウザ上で表示されるサイトのトップページとなるURL&lt;/p&gt;

&lt;p&gt;�ここで注意！&lt;br&gt;
wordpressアドレスは、誤ったものを入力してしまうとそもそもサイト自体にアクセスできなくなってしまいます！&lt;/p&gt;

&lt;p&gt;今回これに引っかかってしまいました&amp;gt;&amp;lt;&lt;/p&gt;

&lt;p&gt;解決方法は2つ。&lt;/p&gt;

&lt;p&gt;・定数を定義する&lt;br&gt;
・MysQLデータの書き換え&lt;/p&gt;

&lt;p&gt;このいずれかで復旧できます！でもやはり手間なので、wordpressアドレスは&lt;br&gt;
安易に触らないことをおすすめします。&lt;/p&gt;

&lt;p&gt;また言語設定もこの一般設定からできます。&lt;br&gt;
インストール後、英語表示になっている場合はここで日本語表示へ変更&lt;br&gt;
しましょう。&lt;/p&gt;

&lt;h2 id="パーマリンク設定"&gt;パーマリンク設定&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://wpdocs.osdn.jp/%E3%83%91%E3%83%BC%E3%83%9E%E3%83%AA%E3%83%B3%E3%82%AF%E3%81%AE%E4%BD%BF%E3%81%84%E6%96%B9"&gt;パーマリンクとは？&lt;/a&gt;&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;パーマリンクとは、ブログの個々の投稿、
カテゴリーなどの投稿一覧ページへの恒久的（半永久的）な URL です。
(引用：wordpress codex　日本語版より)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;パーマリンクについては基本設定のままの場合、&lt;br&gt;
記事部分を示す値が数字と記号の組み合わせとなってしまいます。&lt;/p&gt;

&lt;p&gt;&lt;img alt="wordpress_setting" src="/images/./2016/0826_wordpress_setting/setting_02.png" /&gt;&lt;/p&gt;

&lt;p&gt;ここをなぜ変更する必要があるかというと、SEO対策としての意味合いが大きいようです。&lt;br&gt;
そして、googleの推奨する&lt;a href="https://support.google.com/webmasters/answer/76329?hl=ja"&gt;シンプルなURL構造を維持する&lt;/a&gt;という文面にも&lt;br&gt;
&lt;strong&gt;可能な場合は ID ではなく意味のある単語を使用して&lt;/strong&gt;とあります。&lt;/p&gt;

&lt;p&gt;また、URLを一目見て、どんな記事かが分かるようなURLにするとユーザビリティも良くなるのではないでしょうか。&lt;/p&gt;

&lt;p&gt;パーマリンクのおすすめを紹介しているサイトもありますが、&lt;br&gt;
運用の仕方に合わせて検討するのがよいかと思います。&lt;/p&gt;

&lt;p&gt;ただし、パーマリンクは日本語ではなく英語設定をおすすめします。&lt;br&gt;
理由は、リンクをコピーしてテキストに貼り付けた場合、リンクが長くなってしまうのです。&lt;/p&gt;

&lt;p&gt;&lt;img alt="wordpress_setting" src="/images/./2016/0826_wordpress_setting/setting_03.png" /&gt;&lt;/p&gt;

&lt;p&gt;そして、このパーマリンクの構成は必ず初期設定の段階でしっかり取り決めを&lt;br&gt;
することが必要です。&lt;br&gt;
なぜなら、途中でこのパーマリンクを変更しようとすると、今まで投稿した記事&lt;br&gt;
のリンクも全て変更されてしまうのです。&lt;/p&gt;

&lt;p&gt;リンク変更に伴い、&lt;br&gt;
リダイレクト設定に手間がかかる、SEO評価やSNSのシェア回数もリセットされて&lt;br&gt;
しまうので、結構なダメージを受ける可能性大です。&lt;br&gt;
安易に変更することはできないので、初期の段階でしっかりと設定をしておきましょう！&lt;/p&gt;

&lt;p&gt;この次はテーマの設定です。&lt;br&gt;
長くなったので、別記事にまとめます！&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>弊社お客様であるセーフィー様の「Safie LIVE」が「RIZAP KBC オーガスタゴルフトーナメント2016」の定点ネット映像配信に採用されました！！！</title>
    <link rel="alternate" href="http://blog.url.com/2016/08/25/kbc-augusta-golf-tournament-2016.html"/>
    <id>http://blog.url.com/2016/08/25/kbc-augusta-golf-tournament-2016.html</id>
    <published>2016-08-25T09:00:00+09:00</published>
    <updated>2016-08-31T11:33:25+09:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;弊社のお客様である&lt;strong&gt;&lt;a href="https://safie.link"&gt;セーフィー様&lt;/a&gt;&lt;/strong&gt;が手掛ける&lt;strong&gt;「Safie LIVE」&lt;/strong&gt;が、石川遼選手も参戦する&lt;strong&gt;「&lt;a href="http://www.kbc.co.jp/sports/augusta/"&gt;RIZAP KBC オーガスタゴルフトーナメント&lt;/a&gt;」&lt;/strong&gt;の&lt;strong&gt;定点ネットライブ映像配信&lt;/strong&gt;に採用されました！&lt;/p&gt;

&lt;p&gt;&lt;img alt="augusta2016" src="http://www.kbc.co.jp/image/bn_kbc/bn_augusta_live_474x64.gif" /&gt;&lt;/p&gt;

&lt;p&gt;弊社プラウディットではこのシステムの&lt;strong&gt;インフラ部分の設計・構築&lt;/strong&gt;をお手伝いさせていただいております。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;テレビ中継だけでは見ることのできない映像や、自分の見たい特定箇所(スタート１番ホールのティーショット・打撃練習場・上がり18番ホールのグリーン)の映像をスマートフォンやタブレット、パソコンから手軽に視聴いただければと思います！&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;「&lt;a href="http://www.kbc.co.jp/sports/augusta/"&gt;RIZAP KBC オーガスタゴルフトーナメント&lt;/a&gt;」&lt;/strong&gt;は&lt;strong&gt;本日8/25(木)〜28(日)&lt;/strong&gt;の開催ですので、ご興味のある方は是非ご視聴ください！&lt;/p&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;a href="http://www3.kbc.co.jp/live/augusta/camera_01.html#TopCamera"&gt;Live! 1番ティーショット&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;a href="http://www3.kbc.co.jp/live/augusta/camera_03.html#TopCamera"&gt;Live! 18番グリーン&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;また、弊社プラウディットへの&lt;strong&gt;お仕事のご依頼やお問い合わせ&lt;/strong&gt;は&lt;strong&gt;&lt;a href="https://www.proudit.jp/#contact"&gt;こちら&lt;/a&gt;&lt;/strong&gt;まで。&lt;/p&gt;
&lt;/blockquote&gt;
</content>
  </entry>
  <entry>
    <title>AWS SDK for Ruby バージョン 2 を使用したS3バケットへのオブジェクトアップロード</title>
    <link rel="alternate" href="http://blog.url.com/2016/08/23/to-upload-a-file-using-the-aws-sdk-for-ruby.html"/>
    <id>http://blog.url.com/2016/08/23/to-upload-a-file-using-the-aws-sdk-for-ruby.html</id>
    <published>2016-08-23T09:00:00+09:00</published>
    <updated>2016-08-31T21:55:38+09:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;h1 id="はじめに"&gt;はじめに&lt;/h1&gt;

&lt;p&gt;プログラミングのお勉強をしようと思い、AWS公式ドキュメントにある&lt;a href="https://docs.aws.amazon.com/ja_jp/AmazonS3/latest/dev/UploadObjSingleOpRuby.html"&gt;「AWS SDK for Ruby を使用したオブジェクトのアップロード」&lt;/a&gt;を参考にファイルアップロードを行うRubyスクリプトを書いてみました。&lt;br&gt;
とはいえ、そのままだとただのコピペになってしまうので、アップロードするのに必要な権限のみを持つIAMユーザーを作成し、それをスクリプト内で指定してファイルのアップロードを行いたいと思います。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h1 id="1.-ファイルアップロード先の準備"&gt;1. ファイルアップロード先の準備&lt;/h1&gt;

&lt;p&gt;「S3」→「バケットを作成」でアップロード先となるバケットを作成します。&lt;br&gt;
一応、今回はリージョンを「Tokyo」にしています。&lt;br&gt;
&lt;img alt="1-s301.png" src="https://qiita-image-store.s3.amazonaws.com/0/82090/9467a12e-d512-e23a-7c76-f9a541e1eb76.png" /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img alt="1-s302.png" src="https://qiita-image-store.s3.amazonaws.com/0/82090/bdc1e8ef-6d6e-6c06-52ab-bc384be83e02.png" /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h1 id="2.-アップロードユーザーの用意"&gt;2. アップロードユーザーの用意&lt;/h1&gt;

&lt;p&gt;「IAM」→「ユーザー」→「新規ユーザーの作成」で今回利用するアップロード用のユーザー名を入力し「作成」をクリックします。&lt;br&gt;
&lt;img alt="2-iam01.png" src="https://qiita-image-store.s3.amazonaws.com/0/82090/c3fdf8ba-b84a-b1b0-8a24-3a7302a8577b.png" /&gt;&lt;/p&gt;

&lt;p&gt;ここで、&lt;strong&gt;アクセスキーID&lt;/strong&gt;と&lt;strong&gt;シークレットアクセスキー&lt;/strong&gt;が表示されるので、メモまたはダウンロードをしてから「閉じる」をクリックしてください。後で必要になります。&lt;br&gt;
&lt;img alt="2-iam02.png" src="https://qiita-image-store.s3.amazonaws.com/0/82090/2fd87e9f-ccf7-99f9-4e0b-eeefc1f3b80a.png" /&gt;&lt;/p&gt;

&lt;p&gt;次に、先ほど作成したユーザーを選択します。&lt;br&gt;
&lt;img alt="2-iam03.png" src="https://qiita-image-store.s3.amazonaws.com/0/82090/ab0e379b-b43a-82a9-0967-137d41867186.png" /&gt;&lt;/p&gt;

&lt;p&gt;「アクセス許可」→「インラインポリシー」→「ここをクリックしてください。」をクリックします。&lt;br&gt;
&lt;img alt="2-iam04.png" src="https://qiita-image-store.s3.amazonaws.com/0/82090/f769ec9e-7b96-ffc6-64ad-39f656bdbae7.png" /&gt;&lt;/p&gt;

&lt;p&gt;「カスタムポリシー」を選んで「選択」をクリックします。&lt;br&gt;
&lt;img alt="2-iam05.png" src="https://qiita-image-store.s3.amazonaws.com/0/82090/67481f69-69f8-a042-9449-05cf19e679bf.png" /&gt;&lt;/p&gt;

&lt;p&gt;以下のポリシーを適用します。(コピペでOKです。)&lt;/p&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nt"&gt;"Version"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"2012-10-17"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nt"&gt;"Statement"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nt"&gt;"Sid"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Stmt1471591778000"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nt"&gt;"Effect"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Allow"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nt"&gt;"Action"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="s2"&gt;"s3:PutObject"&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nt"&gt;"Resource"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="s2"&gt;"*"&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img alt="2-iam06.png" src="https://qiita-image-store.s3.amazonaws.com/0/82090/f5d54ce1-971c-ead6-2948-f1c791dfb19b.png" /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img alt="2-iam07.png" src="https://qiita-image-store.s3.amazonaws.com/0/82090/93c5946d-9996-1c5c-864c-01cece33cfca.png" /&gt;&lt;/p&gt;

&lt;p&gt;以上で、ファイルアップロード用ユーザーが作成できました。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h1 id="3.-スクリプトの作成"&gt;3. スクリプトの作成&lt;/h1&gt;

&lt;p&gt;それではいよいよアップロード用のスクリプトを作成します。&lt;br&gt;
今回の作業環境はMacで行います。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ vim upload.rb
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ファイルを開いたら以下のスクリプトをコピペします。&lt;br&gt;
ただ、その際に&lt;strong&gt;bucketname&lt;/strong&gt;、&lt;strong&gt;objectname&lt;/strong&gt;、&lt;strong&gt;uploadfile&lt;/strong&gt;と&lt;strong&gt;アクセスキーID&lt;/strong&gt;と&lt;strong&gt;シークレットアクセスキー&lt;/strong&gt;は適宜変更してください。&lt;br&gt;
また、バケットのリージョンをTokyoにしなかった場合も適切なリージョンに変更する必要があります。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#!/usr/bin/env ruby

require 'aws-sdk'

bucketname = "kohei-no-bucket"  # バケット名
objectname = "ceresso.png"      # アップロード後のファイル名
uploadfile = "ceresso.png"       アップロードするファイル名

Aws.config[:credentials] = Aws::Credentials.new(
  '********************',                        # アクセスキーID
  '****************************************',    # シークレットアクセスキー
)
s3 = Aws::S3::Resource.new(region:'ap-northeast-1')  # Tokyoリージョン
obj = s3.bucket(bucketname).object(objectname)
obj.upload_file(uploadfile)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;最後に、作成したら実行権限をつけておきましょう。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ chmod +x upload.rb
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;あと、もし&lt;em&gt;aws-adk&lt;/em&gt;のインストールがまだの場合は以下のコマンドでインストールもしておいてください。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ gem install aws-sdk
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ということで、すべての準備が整いました。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h1 id="4.-実践！"&gt;4. 実践！&lt;/h1&gt;

&lt;p&gt;それではアップロードしてみます。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ ./upload.rb
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;何もエラーなくプロンプトが返って来れば無事アップロード成功です。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h1 id="5.-確認"&gt;5. 確認&lt;/h1&gt;

&lt;p&gt;それではバケットを確認してみます。&lt;/p&gt;

&lt;p&gt;&lt;img alt="3-upload01.png" src="https://qiita-image-store.s3.amazonaws.com/0/82090/62b9865a-e187-ba56-a6f1-a81c4143c754.png" /&gt;&lt;/p&gt;

&lt;p&gt;アップロードできているのが確認できました。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h1 id="おわりに"&gt;おわりに&lt;/h1&gt;

&lt;p&gt;今回は同じディレクトリ内にあるファイルをアップロードしました。&lt;br&gt;
別の場所にあるファイルをアップロードしたい場合は、スクリプト内の&lt;em&gt;uploadfile&lt;/em&gt;をパス指定すればOKです。&lt;/p&gt;
</content>
  </entry>
</feed>
